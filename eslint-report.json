[{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/about/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/ai-assistant-disabled/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/ai-assistant-disabled/settings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/analytics-disabled/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/bookings/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchBookings'. Either include it or remove the dependency array.","line":28,"column":6,"nodeType":"ArrayExpression","endLine":28,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchBookings]","fix":{"range":[697,699],"text":"[fetchBookings]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { NextPage } from 'next';\nimport { listBookings, updateBooking, deleteBooking } from '@/lib/services/booking-service';\nimport { Booking } from '@/types/booking';\nimport {\n  AdminPageWrapper,\n  GridSection,\n  StatCard,\n  InfoCard,\n  DataTable,\n  DataTableColumn,\n  DataTableAction,\n  ToastProvider,\n  useToast,\n  Span\n} from '@/components/ui';\n\nfunction AdminBookingsPageContent() {\n  const { addToast } = useToast();\n  const [bookings, setBookings] = useState<Booking[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchBookings();\n  }, []);\n\n  const fetchBookings = async () => {\n    try {\n      setError(null);\n      setLoading(true);\n      console.log('🔄 Fetching bookings...');\n      \n      const fetchedBookings = await listBookings();\n      console.log('✅ Bookings fetched:', fetchedBookings.length, fetchedBookings);\n      \n      // If no real bookings exist, use mock data for demonstration\n      if (fetchedBookings.length === 0) {\n        console.log('📝 No bookings found, using mock data for demonstration');\n        const mockBookings: Booking[] = [\n          {\n            id: 'mock-1',\n            name: 'John Smith',\n            email: 'john@example.com',\n            phone: '203-555-0123',\n            pickupLocation: 'Fairfield Station',\n            dropoffLocation: 'JFK Airport',\n            pickupDateTime: new Date('2024-12-25T10:00:00Z'),\n            passengers: 2,\n            fare: 150,\n            status: 'confirmed',\n            depositPaid: true,\n            balanceDue: 50,\n            tipAmount: 25,\n            cancellationFee: 0,\n            createdAt: new Date(),\n            updatedAt: new Date()\n          },\n          {\n            id: 'mock-2', \n            name: 'Sarah Johnson',\n            email: 'sarah@example.com',\n            phone: '203-555-0124',\n            pickupLocation: 'Stamford Downtown',\n            dropoffLocation: 'LaGuardia Airport',\n            pickupDateTime: new Date('2024-12-26T14:30:00Z'),\n            passengers: 1,\n            fare: 120,\n            status: 'pending',\n            depositPaid: false,\n            balanceDue: 120,\n            tipAmount: 0,\n            cancellationFee: 0,\n            createdAt: new Date(),\n            updatedAt: new Date()\n          },\n          {\n            id: 'mock-3',\n            name: 'Mike Davis',\n            email: 'mike@example.com', \n            phone: '203-555-0125',\n            pickupLocation: 'Greenwich Harbor',\n            dropoffLocation: 'Newark Airport',\n            pickupDateTime: new Date('2024-12-24T08:15:00Z'),\n            passengers: 3,\n            fare: 180,\n            status: 'completed',\n            depositPaid: true,\n            balanceDue: 0,\n            tipAmount: 30,\n            cancellationFee: 0,\n            createdAt: new Date(),\n            updatedAt: new Date()\n          },\n          {\n            id: 'mock-4',\n            name: 'Emily Chen',\n            email: 'emily@example.com',\n            phone: '203-555-0126',\n            pickupLocation: 'Westport Downtown',\n            dropoffLocation: 'Bradley Airport',\n            pickupDateTime: new Date('2024-12-27T12:00:00Z'),\n            passengers: 1,\n            fare: 95,\n            status: 'cancelled',\n            depositPaid: false,\n            balanceDue: 0,\n            tipAmount: 0,\n            cancellationFee: 25,\n            createdAt: new Date(),\n            updatedAt: new Date()\n          }\n        ];\n        \n        setBookings(mockBookings);\n      } else {\n        setBookings(fetchedBookings);\n      }\n    } catch (err) {\n      console.error('❌ Error fetching bookings:', err);\n      setError('Failed to load bookings. Please try again.');\n      addToast('error', 'Failed to load bookings');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleStatusUpdate = async (booking: Booking, newStatus: Booking['status']) => {\n    try {\n      if (!booking.id) {\n        addToast('error', 'Cannot update booking: missing ID');\n        return;\n      }\n      \n      await updateBooking(booking.id, { status: newStatus });\n      \n      // Update local state\n      setBookings(prev => prev.map(b => \n        b.id === booking.id ? { ...b, status: newStatus } : b\n      ));\n      \n      addToast('success', `Booking ${newStatus}`);\n    } catch (err) {\n      console.error('Error updating booking status:', err);\n      addToast('error', 'Failed to update booking status');\n    }\n  };\n\n  const handleDeleteBooking = async (booking: Booking) => {\n    if (!booking.id) {\n      addToast('error', 'Cannot delete booking: missing ID');\n      return;\n    }\n    \n    if (!confirm(`Are you sure you want to delete the booking for ${booking.name}?`)) {\n      return;\n    }\n\n    try {\n      await deleteBooking(booking.id);\n      \n      // Update local state\n      setBookings(prev => prev.filter(b => b.id !== booking.id));\n      \n      addToast('success', 'Booking deleted');\n    } catch (err) {\n      console.error('Error deleting booking:', err);\n      addToast('error', 'Failed to delete booking');\n    }\n  };\n\n  // Calculate stats\n  const totalBookings = bookings.length;\n  const pendingBookings = bookings.filter(b => b.status === 'pending').length;\n  const confirmedBookings = bookings.filter(b => b.status === 'confirmed').length;\n  const completedBookings = bookings.filter(b => b.status === 'completed').length;\n  const totalRevenue = bookings\n    .filter(b => b.status === 'completed')\n    .reduce((sum, b) => sum + b.fare, 0);\n  const totalTips = bookings\n    .filter(b => b.status === 'completed')\n    .reduce((sum, b) => sum + (b.tipAmount || 0), 0);\n  const totalCancFees = bookings\n    .filter(b => b.status === 'cancelled')\n    .reduce((sum, b) => sum + (b.cancellationFee || 0), 0);\n\n  // Header actions\n  const headerActions = [\n    {\n      label: 'Refresh',\n      icon: '🔄',\n      onClick: fetchBookings,\n      variant: 'outline' as const\n    },\n    {\n      label: 'Export',\n      icon: '📊',\n      onClick: () => addToast('info', 'Export feature coming soon'),\n      variant: 'outline' as const\n    }\n  ];\n\n  // Status renderer\n  const renderStatus = (status: string) => {\n    const getStatusClass = (status: string) => {\n      switch (status.toLowerCase()) {\n        case 'confirmed':\n          return 'status-badge-confirmed';\n        case 'pending':\n          return 'status-badge-pending';\n        case 'completed':\n          return 'status-badge-completed';\n        case 'cancelled':\n          return 'status-badge-cancelled';\n        default:\n          return 'status-badge-default';\n      }\n    };\n\n    return (\n      <Span className={`status-badge ${getStatusClass(status)}`}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Span>\n    );\n  };\n\n  // Table columns configuration\n  const columns: DataTableColumn<Booking>[] = [\n    {\n      key: 'name',\n      label: 'Customer',\n      sortable: true,\n      render: (_, booking) => (\n        <div >\n          <div >{booking.name}</div>\n          <div >{booking.email}</div>\n        </div>\n      )\n    },\n    {\n      key: 'pickupLocation',\n      label: 'Route',\n      sortable: true,\n      render: (_, booking) => (\n        <div >\n          <div >{booking.pickupLocation}</div>\n          <div >→ {booking.dropoffLocation}</div>\n        </div>\n      )\n    },\n    {\n      key: 'pickupDateTime',\n      label: 'Pickup Time',\n      sortable: true,\n      render: (value) => {\n        const date = new Date(value);\n        return (\n          <div >\n            <div >{date.toLocaleDateString()}</div>\n            <div >{date.toLocaleTimeString()}</div>\n          </div>\n        );\n      }\n    },\n    {\n      key: 'fare',\n      label: 'Fare',\n      sortable: true,\n      render: (value) => (\n        <Span >${(value || 0).toFixed(2)}</Span>\n      )\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      sortable: true,\n      render: (value) => renderStatus(value)\n    }\n  ];\n\n  // Table actions\n  const actions: DataTableAction<Booking>[] = [\n    {\n      label: 'View',\n      icon: '👁️',\n      onClick: (booking) => window.open(`/booking/${booking.id}`, '_blank'),\n      variant: 'outline'\n    },\n    {\n      label: 'Confirm',\n      icon: '✅',\n      onClick: (booking) => handleStatusUpdate(booking, 'confirmed'),\n      variant: 'primary',\n      condition: (booking) => booking.status === 'pending'\n    },\n    {\n      label: 'Complete',\n      icon: '🏁',\n      onClick: (booking) => handleStatusUpdate(booking, 'completed'),\n      variant: 'primary', \n      condition: (booking) => booking.status === 'confirmed'\n    },\n    {\n      label: 'Cancel',\n      icon: '❌',\n      onClick: (booking) => handleStatusUpdate(booking, 'cancelled'),\n      variant: 'outline',\n      condition: (booking) => booking.status !== 'completed' && booking.status !== 'cancelled'\n    },\n    {\n      label: 'Delete',\n      icon: '🗑️',\n      onClick: handleDeleteBooking,\n      variant: 'outline'\n    }\n  ];\n\n  return (\n    <AdminPageWrapper\n      title=\"Booking Dashboard\"\n      subtitle=\"Manage customer bookings and reservations\"\n      actions={headerActions}\n      loading={loading}\n      error={error}\n      loadingMessage=\"Loading bookings...\"\n      errorTitle=\"Booking Load Error\"\n    >\n      {/* Stats Overview */}\n      <GridSection variant=\"stats\" columns={4}>\n        <StatCard\n          title=\"Total Bookings\"\n          icon=\"📊\"\n          statNumber={totalBookings.toString()}\n          statChange={`${pendingBookings} pending, ${confirmedBookings} confirmed`}\n          changeType=\"neutral\"\n        />\n        <StatCard\n          title=\"Total Revenue\"\n          icon=\"💰\"\n          statNumber={`$${totalRevenue.toFixed(2)}`}\n          statChange={`${completedBookings} completed bookings`}\n          changeType=\"positive\"\n        />\n        <StatCard\n          title=\"Tips Collected\"\n          icon=\"💵\"\n          statNumber={`$${totalTips.toFixed(2)}`}\n          statChange=\"From completed rides\"\n          changeType=\"positive\"\n        />\n        <StatCard\n          title=\"Cancellation Fees\"\n          icon=\"⚠️\"\n          statNumber={`$${totalCancFees.toFixed(2)}`}\n          statChange=\"From cancelled bookings\"\n          changeType=\"neutral\"\n        />\n      </GridSection>\n\n      {/* Bookings Table */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title=\"📅 All Bookings\"\n          description=\"Search, sort, and manage customer bookings\"\n        >\n          <DataTable\n            data={bookings}\n            columns={columns}\n            actions={actions}\n            loading={loading}\n            searchPlaceholder=\"Search by customer, location, or status...\"\n            emptyMessage=\"No bookings found. Create your first booking to get started.\"\n            emptyIcon=\"📅\"\n            pageSize={10}\n            rowClassName={(booking) => booking.status === 'cancelled' ? 'opacity-60' : ''}\n            onRowClick={(booking) => console.log('Clicked booking:', booking.id)}\n          />\n        </InfoCard>\n      </GridSection>\n    </AdminPageWrapper>\n  );\n}\n\nconst AdminBookingsPage: NextPage = () => {\n  return (\n    <ToastProvider>\n      <AdminBookingsPageContent />\n    </ToastProvider>\n  );\n};\n\nexport default AdminBookingsPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/calendar/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchCalendarData'. Either include it or remove the dependency array.","line":24,"column":6,"nodeType":"ArrayExpression","endLine":24,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchCalendarData]","fix":{"range":[587,589],"text":"[fetchCalendarData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport { listBookings } from '../../../lib/services/booking-service';\nimport { \n  AdminPageWrapper, \n  InfoCard, \n  GridSection,\n  Container,\n  H3,\n  Text,\n  Span\n} from '@/components/ui';\n\nconst CalendarPage = () => {\n  const [events, setEvents] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchCalendarData();\n  }, []);\n\n  const fetchCalendarData = async () => {\n    try {\n      setError(null);\n      setLoading(true);\n      console.log('📅 Loading calendar data...');\n      \n      const bookings = await listBookings();\n      const calendarEvents = bookings.map((booking) => ({\n        id: booking.id,\n        title: `${booking.name} – $${booking.fare}`,\n        start: booking.pickupDateTime,\n        url: `/booking/${booking.id}`,\n        backgroundColor: getEventColor(booking.status),\n        borderColor: getEventColor(booking.status),\n        textColor: '#ffffff'\n      }));\n      \n      console.log('✅ Calendar events loaded:', calendarEvents.length);\n      setEvents(calendarEvents);\n    } catch (err) {\n      console.error('❌ Failed to load calendar data:', err);\n      setError('Failed to load calendar data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getEventColor = (status: string) => {\n    switch (status) {\n      case 'cancelled': return '#dc2626';\n      case 'confirmed': return '#059669';\n      case 'completed': return '#0d9488';\n      case 'pending': return '#d97706';\n      default: return '#6b7280';\n    }\n  };\n\n  const headerActions = [\n    { \n      label: 'Refresh',\n      onClick: fetchCalendarData,\n      variant: 'outline' as const,\n      disabled: loading\n    },\n    { \n      label: 'View Bookings', \n      href: '/admin/bookings', \n      variant: 'outline' as const \n    },\n    { \n      label: 'Add Booking', \n      href: '/admin/bookings/new', \n      variant: 'primary' as const \n    }\n  ];\n\n  return (\n    <AdminPageWrapper\n      title=\"Ride Calendar\"\n      subtitle=\"View all bookings in calendar format\"\n      actions={headerActions}\n      loading={loading}\n      error={error}\n      loadingMessage=\"Loading calendar data...\"\n      errorTitle=\"Calendar Load Error\"\n    >\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title=\"📅 Monthly Booking Calendar\"\n          description={`Showing ${events.length} bookings with color-coded status`}\n        >\n          {!loading && !error && (\n            <Container>\n              {typeof window !== 'undefined' && (\n                <FullCalendar\n                  plugins={[dayGridPlugin]}\n                  initialView=\"dayGridMonth\"\n                  events={events}\n                  height=\"auto\"\n                  headerToolbar={{\n                    left: 'prev,next today',\n                    center: 'title',\n                    right: 'dayGridMonth,dayGridWeek'\n                  }}\n                  eventClick={(info: any) => {\n                    if (info.event.url) {\n                      window.open(info.event.url, '_blank');\n                      info.jsEvent.preventDefault();\n                    }\n                  }}\n                  eventDisplay=\"block\"\n                  dayMaxEvents={3}\n                  moreLinkClick=\"popover\"\n                />\n              )}\n            </Container>\n          )}\n\n          {!loading && !error && events.length === 0 && (\n            <Container>\n              <Container>📅</Container>\n              <H3>No bookings found</H3>\n              <Text>No bookings scheduled for this month.</Text>\n            </Container>\n          )}\n        </InfoCard>\n      </GridSection>\n\n      {/* Calendar Legend */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title=\"📊 Status Legend\"\n          description=\"Color coding for booking statuses\"\n        >\n          <Container>\n            <Container >\n              <Span>🟡</Span>\n              <Span >Pending</Span>\n            </Container>\n            <Container >\n              <Span>🟢</Span>\n              <Span >Confirmed</Span>\n            </Container>\n            <Container >\n              <Span>🔵</Span>\n              <Span >Completed</Span>\n            </Container>\n            <Container >\n              <Span>🔴</Span>\n              <Span >Cancelled</Span>\n            </Container>\n          </Container>\n        </InfoCard>\n      </GridSection>\n    </AdminPageWrapper>\n  );\n};\n\nexport default CalendarPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/cms/business/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadBusinessSettings'. Either include it or remove the dependency array.","line":31,"column":6,"nodeType":"ArrayExpression","endLine":31,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadBusinessSettings]","fix":{"range":[802,804],"text":"[loadBusinessSettings]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'handleSave' and 'loadBusinessSettings'. Either include them or remove the dependency array.","line":116,"column":6,"nodeType":"ArrayExpression","endLine":116,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [loadBusinessSettings, loading, handleSave, settings, saving]","fix":{"range":[2885,2912],"text":"[loadBusinessSettings, loading, handleSave, settings, saving]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect, useMemo } from 'react';\nimport withAuth from '../../withAuth';\nimport { cmsService } from '@/lib/services/cms-service';\nimport { BusinessSettings } from '@/types/cms';\nimport { \n  AdminPageWrapper,\n  SettingSection,\n  SettingInput,\n  StatusMessage,\n  ToastProvider,\n  useToast,\n  GridSection,\n  Container,\n  Text,\n  H3,\n  Span\n} from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\n\nfunction BusinessPageContent() {\n  const { addToast } = useToast();\n  const [settings, setSettings] = useState<BusinessSettings | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadBusinessSettings();\n  }, []);\n\n  const loadBusinessSettings = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const businessSettings = await cmsService.getBusinessSettings();\n      setSettings(businessSettings);\n      addToast('success', 'Business settings loaded successfully');\n    } catch (error) {\n      console.error('Error loading business settings:', error);\n      const errorMsg = 'Failed to load business settings';\n      setError(errorMsg);\n      addToast('error', errorMsg);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    if (!settings) return;\n    \n    setSaving(true);\n    setError(null);\n    \n    try {\n      await cmsService.updateBusinessSettings(settings);\n      addToast('success', 'Business settings saved successfully!');\n    } catch (error) {\n      console.error('Error saving business settings:', error);\n      const errorMsg = 'Failed to save business settings';\n      setError(errorMsg);\n      addToast('error', errorMsg);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleInputChange = (section: keyof BusinessSettings, field: string, value: string) => {\n    if (!settings) return;\n    \n    setSettings({\n      ...settings,\n      [section]: {\n        ...settings[section],\n        [field]: value\n      }\n    });\n  };\n\n  const handleSocialChange = (platform: string, value: string) => {\n    if (!settings) return;\n    \n    setSettings({\n      ...settings,\n      social: {\n        ...settings.social,\n        [platform]: value\n      }\n    });\n  };\n\n  // Header actions\n  const headerActions = useMemo(() => [\n    { \n      label: 'Back to CMS',\n      onClick: (): void => { window.location.href = '/admin/cms'; },\n      variant: 'outline' as const,\n      icon: '🔙'\n    },\n    { \n      label: 'Reload Settings',\n      onClick: loadBusinessSettings,\n      variant: 'outline' as const,\n      disabled: loading,\n      icon: '🔄'\n    },\n    { \n      label: 'Save Changes',\n      onClick: handleSave,\n      variant: 'primary' as const,\n      disabled: !settings || saving,\n      icon: '💾'\n    }\n  ], [settings, loading, saving]);\n\n  if (loading) {\n    return (\n      <AdminPageWrapper\n        title=\"Business Settings\"\n        subtitle=\"Configure your company information and branding\"\n        loading={true}\n        loadingMessage=\"Loading business settings...\"\n      >\n        <div />\n      </AdminPageWrapper>\n    );\n  }\n\n  if (error) {\n    return (\n      <AdminPageWrapper\n        title=\"Business Settings\"\n        subtitle=\"Configure your company information and branding\"\n        error={error}\n        errorTitle=\"Settings Load Error\"\n      >\n        <div />\n      </AdminPageWrapper>\n    );\n  }\n\n  if (!settings) {\n    return (\n      <AdminPageWrapper\n        title=\"Business Settings\"\n        subtitle=\"Configure your company information and branding\"\n        error=\"No business settings found\"\n        errorTitle=\"Settings Not Found\"\n      >\n        <div />\n      </AdminPageWrapper>\n    );\n  }\n\n  return (\n    <AdminPageWrapper\n      title=\"Business Settings\"\n      subtitle=\"Configure your company information and branding\"\n      actions={headerActions}\n      loading={saving}\n      loadingMessage=\"Saving business settings...\"\n    >\n      {saving && (\n        <StatusMessage\n          type=\"info\"\n          message=\"Please wait while we save your business settings...\"\n        />\n      )}\n\n      {settings && (\n        <GridSection variant=\"content\" columns={1}>\n          <Container>\n            {/* Company Information */}\n            <SettingSection\n              title=\"Company Information\"\n              description=\"Basic company details and contact information\"\n              icon=\"🏢\"\n            >\n              <Stack spacing=\"md\">\n                <SettingInput\n                  id=\"company-name\"\n                  label=\"Company Name\"\n                  description=\"Your official business name\"\n                  value={settings.company.name}\n                  onChange={(value) => handleInputChange('company', 'name', value)}\n                  placeholder=\"Your Company Name\"\n                  icon=\"🏢\"\n                />\n                \n                <SettingInput\n                  id=\"company-tagline\"\n                  label=\"Tagline\"\n                  description=\"A brief description of your business\"\n                  value={settings.company.tagline || ''}\n                  onChange={(value) => handleInputChange('company', 'tagline', value)}\n                  placeholder=\"Your company tagline\"\n                  icon=\"💬\"\n                />\n                \n                <SettingInput\n                  id=\"company-phone\"\n                  label=\"Phone Number\"\n                  description=\"Primary contact phone number\"\n                  value={settings.company.phone}\n                  onChange={(value) => handleInputChange('company', 'phone', value)}\n                  placeholder=\"(555) 123-4567\"\n                  icon=\"📞\"\n                />\n                \n                <SettingInput\n                  id=\"company-email\"\n                  label=\"Email Address\"\n                  description=\"Primary contact email address\"\n                  type=\"email\"\n                  value={settings.company.email}\n                  onChange={(value) => handleInputChange('company', 'email', value)}\n                  placeholder=\"contact@company.com\"\n                  icon=\"✉️\"\n                />\n                \n                <SettingInput\n                  id=\"company-address\"\n                  label=\"Address\"\n                  description=\"Business physical address\"\n                  value={settings.company.address || ''}\n                  onChange={(value) => handleInputChange('company', 'address', value)}\n                  placeholder=\"123 Main St, City, State 12345\"\n                  icon=\"📍\"\n                />\n                \n                <SettingInput\n                  id=\"company-hours\"\n                  label=\"Business Hours\"\n                  description=\"Operating hours for customers\"\n                  value={settings.company.hours || ''}\n                  onChange={(value) => handleInputChange('company', 'hours', value)}\n                  placeholder=\"Mon-Fri 9am-5pm\"\n                  icon=\"🕒\"\n                />\n              </Stack>\n            </SettingSection>\n\n            {/* Social Media */}\n            <SettingSection\n              title=\"Social Media\"\n              description=\"Links to your social media profiles\"\n              icon=\"📱\"\n            >\n              <Stack spacing=\"md\">\n                <SettingInput\n                  id=\"social-facebook\"\n                  label=\"Facebook URL\"\n                  description=\"Link to your Facebook business page\"\n                  value={settings.social.facebook || ''}\n                  onChange={(value) => handleSocialChange('facebook', value)}\n                  placeholder=\"https://facebook.com/yourpage\"\n                  icon=\"📘\"\n                />\n                \n                <SettingInput\n                  id=\"social-instagram\"\n                  label=\"Instagram URL\"\n                  description=\"Link to your Instagram business account\"\n                  value={settings.social.instagram || ''}\n                  onChange={(value) => handleSocialChange('instagram', value)}\n                  placeholder=\"https://instagram.com/yourpage\"\n                  icon=\"📷\"\n                />\n                \n                <SettingInput\n                  id=\"social-twitter\"\n                  label=\"Twitter URL\"\n                  description=\"Link to your Twitter business account\"\n                  value={settings.social.twitter || ''}\n                  onChange={(value) => handleSocialChange('twitter', value)}\n                  placeholder=\"https://twitter.com/yourpage\"\n                  icon=\"🐦\"\n                />\n              </Stack>\n            </SettingSection>\n\n            {/* Branding */}\n            <SettingSection\n              title=\"Branding\"\n              description=\"Visual identity and brand colors\"\n              icon=\"🎨\"\n            >\n              <Stack spacing=\"md\">\n                <Container>\n                  <SettingInput\n                    id=\"brand-primary-color\"\n                    label=\"Primary Color\"\n                    description=\"Main brand color for buttons and accents\"\n                    value={settings.branding.primaryColor}\n                    onChange={(value) => handleInputChange('branding', 'primaryColor', value)}\n                    placeholder=\"#1f2937\"\n                    icon=\"🎨\"\n                  />\n                  <Container>\n                    <Span>Preview:</Span>\n                    <Container>\n                      <span>Color preview</span>\n                    </Container>\n                  </Container>\n                </Container>\n                \n                <Container>\n                  <SettingInput\n                    id=\"brand-secondary-color\"\n                    label=\"Secondary Color\"\n                    description=\"Secondary brand color for highlights\"\n                    value={settings.branding.secondaryColor}\n                    onChange={(value) => handleInputChange('branding', 'secondaryColor', value)}\n                    placeholder=\"#3b82f6\"\n                    icon=\"🎨\"\n                  />\n                  <Container>\n                    <Span>Preview:</Span>\n                    <Container>\n                      <span>Color preview</span>\n                    </Container>\n                  </Container>\n                </Container>\n                \n                <SettingInput\n                  id=\"brand-logo-url\"\n                  label=\"Logo URL\"\n                  description=\"Direct link to your company logo image\"\n                  value={settings.branding.logoUrl || ''}\n                  onChange={(value) => handleInputChange('branding', 'logoUrl', value)}\n                  placeholder=\"https://example.com/logo.png\"\n                  icon=\"🖼️\"\n                />\n              </Stack>\n            </SettingSection>\n\n            {/* Business Preview */}\n            <SettingSection\n              title=\"Business Card Preview\"\n              description=\"How your business information will appear to customers\"\n              icon=\"👀\"\n            >\n              <Container>\n                <Container>\n                  <Container>\n                    <H3>{settings.company.name}</H3>\n                    <Text>{settings.company.tagline}</Text>\n                  </Container>\n                  <Container>\n                    <Text>📞 {settings.company.phone}</Text>\n                    <Text>✉️ {settings.company.email}</Text>\n                    <Text>📍 {settings.company.address}</Text>\n                    <Text>🕒 {settings.company.hours}</Text>\n                  </Container>\n                </Container>\n              </Container>\n            </SettingSection>\n          </Container>\n        </GridSection>\n      )}\n    </AdminPageWrapper>\n  );\n}\n\nconst BusinessPage = () => {\n  return (\n    <ToastProvider>\n      <BusinessPageContent />\n    </ToastProvider>\n  );\n};\n\nexport default withAuth(BusinessPage);\n","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/cms/colors/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadColors'. Either include it or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadColors]","fix":{"range":[1714,1716],"text":"[loadColors]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleSave' function makes the dependencies of useMemo Hook (at line 142) change on every render. Move it inside the useMemo callback. Alternatively, wrap the definition of 'handleSave' in its own useCallback() Hook.","line":91,"column":9,"nodeType":"VariableDeclarator","endLine":105,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleReset' function makes the dependencies of useMemo Hook (at line 142) change on every render. Move it inside the useMemo callback. Alternatively, wrap the definition of 'handleReset' in its own useCallback() Hook.","line":107,"column":9,"nodeType":"VariableDeclarator","endLine":115,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleReload' function makes the dependencies of useMemo Hook (at line 142) change on every render. Move it inside the useMemo callback. Alternatively, wrap the definition of 'handleReload' in its own useCallback() Hook.","line":117,"column":9,"nodeType":"VariableDeclarator","endLine":119,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState, useMemo } from 'react';\nimport { \n  AdminPageWrapper,\n  SettingSection,\n  ActionButtonGroup,\n  StatusMessage,\n  ToastProvider,\n  useToast,\n  GridSection,\n  Input,\n  Text\n} from '@/components/ui';\nimport { getCMSConfig, updateCMSConfig } from '@/lib/services/cms-service';\n\nconst COLOR_VARIABLES = [\n  { key: '--primary', label: 'Primary', description: 'Main brand color for buttons and links' },\n  { key: '--secondary', label: 'Secondary', description: 'Secondary brand color for accents' },\n  { key: '--accent', label: 'Accent', description: 'Accent color for highlights and emphasis' },\n  { key: '--background', label: 'Background', description: 'Main background color' },\n  { key: '--foreground', label: 'Foreground', description: 'Main text color' },\n  { key: '--muted', label: 'Muted', description: 'Subtle text and element colors' },\n  { key: '--destructive', label: 'Destructive', description: 'Error and warning colors' },\n  { key: '--border', label: 'Border', description: 'Border and divider colors' },\n];\n\nconst getCSSVar = (key: string) =>\n  typeof window !== 'undefined'\n    ? getComputedStyle(document.documentElement).getPropertyValue(key).trim()\n    : '';\n\nconst setCSSVar = (key: string, value: string) => {\n  if (typeof window !== 'undefined') {\n    document.documentElement.style.setProperty(key, value);\n  }\n};\n\nfunction AdminColorsPageContent() {\n  const { addToast } = useToast();\n  const [colors, setColors] = useState<Record<string, string>>({});\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadColors();\n  }, []);\n\n  const loadColors = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const config = await getCMSConfig();\n      const saved = config?.themeColors || {};\n      const initial: Record<string, string> = {};\n      \n      for (const { key } of COLOR_VARIABLES) {\n        initial[key] = saved[key] || getCSSVar(key) || '#ffffff';\n      }\n      \n      setColors(initial);\n      addToast('success', 'Color scheme loaded successfully');\n    } catch {\n      const errorMsg = 'Failed to load color scheme';\n      setError(errorMsg);\n      addToast('error', errorMsg);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleColorChange = (key: string, value: string) => {\n    setColors((prev) => ({ ...prev, [key]: value }));\n    setCSSVar(key, value);\n    \n    // Update CSS custom properties for preview\n    document.documentElement.style.setProperty('--color-swatch', value);\n    if (key === '--background') {\n      document.documentElement.style.setProperty('--preview-background', value);\n    }\n    if (key === '--foreground') {\n      document.documentElement.style.setProperty('--preview-foreground', value);\n    }\n    if (key === '--primary') {\n      document.documentElement.style.setProperty('--preview-primary', value);\n    }\n  };\n\n  const handleSave = async () => {\n    setSaving(true);\n    setError(null);\n    \n    try {\n      await updateCMSConfig({ themeColors: colors });\n      addToast('success', 'Color scheme saved successfully!');\n    } catch {\n      const errorMsg = 'Failed to save color scheme';\n      setError(errorMsg);\n      addToast('error', errorMsg);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleReset = () => {\n    if (confirm('Reset all colors to default? This will reload the page.')) {\n      COLOR_VARIABLES.forEach(({ key }) => {\n        setCSSVar(key, '');\n      });\n      addToast('info', 'Colors reset to default');\n      setTimeout(() => window.location.reload(), 1000);\n    }\n  };\n\n  const handleReload = () => {\n    loadColors();\n  };\n\n  // Header actions\n  const headerActions = useMemo(() => [\n    {\n      label: 'Reload',\n      onClick: handleReload,\n      variant: 'outline' as const,\n      icon: '🔄'\n    },\n    {\n      label: 'Reset to Default',\n      onClick: handleReset,\n      variant: 'secondary' as const,\n      icon: '↩️'\n    },\n    {\n      label: saving ? 'Saving...' : 'Save Colors',\n      onClick: handleSave,\n      variant: 'primary' as const,\n      disabled: saving,\n      icon: '💾'\n    }\n  ], [saving, handleSave, handleReload, handleReset]);\n\n  return (\n    <AdminPageWrapper\n      title=\"Color Scheme\"\n      subtitle=\"Customize your admin and site colors\"\n      actions={headerActions}\n      loading={loading}\n      error={error}\n      errorTitle=\"Color Scheme Error\"\n      loadingMessage=\"Loading color configuration...\"\n    >\n      {/* Error Message */}\n      {error && (\n        <StatusMessage \n          type=\"error\" \n          message={error} \n          onDismiss={() => setError(null)} \n        />\n      )}\n\n      <GridSection variant=\"content\" columns={1}>\n        <div>\n          {/* Color Configuration */}\n          <SettingSection\n            title=\"Theme Colors\"\n            description=\"Configure the main colors used throughout your application\"\n            icon=\"🎨\"\n          >\n            <div>\n              {COLOR_VARIABLES.map(({ key, label, description }) => (\n                <div key={key}>\n                  <div>\n                    <div\n                      data-color={colors[key] || '#ffffff'}\n                    />\n                    <strong>\n                      {label}\n                    </strong>\n                  </div>\n                  \n                  <Text>\n                    {description}\n                  </Text>\n                  \n                  <div>\n                    <Input\n                      type=\"color\"\n                      value={colors[key] || '#ffffff'}\n                      onChange={(e) => handleColorChange(key, e.target.value)}\n                    />\n                    <Input\n                      type=\"text\"\n                      value={colors[key] || ''}\n                      onChange={(e) => handleColorChange(key, e.target.value)}\n                      placeholder=\"#ffffff\"\n                    />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </SettingSection>\n\n          {/* Live Preview */}\n          <SettingSection\n            title=\"Live Preview\"\n            description=\"See how your color scheme looks in real-time\"\n            icon=\"👀\"\n          >\n            <div \n              data-background={colors['--background'] || 'var(--background-primary)'}\n              data-foreground={colors['--foreground'] || 'var(--text-primary)'}\n            >\n              <h2 \n                data-primary={colors['--primary'] || 'var(--primary-color)'}\n              >\n                Primary Color Example\n              </h2>\n              \n              <Text>\n                This is a preview of your current color scheme. The colors you choose will be applied throughout your application.\n              </Text>\n              \n              <ActionButtonGroup\n                buttons={[\n                  {\n                    label: 'Primary Gradient',\n                    onClick: () => addToast('info', 'This is how primary buttons look'),\n                    variant: 'primary' as const,\n                    icon: '🎨'\n                  },\n                  {\n                    label: 'Outline Style',\n                    onClick: () => addToast('info', 'This is how outline buttons look'),\n                    variant: 'outline' as const,\n                    icon: '⭕'\n                  },\n                  {\n                    label: 'Secondary Color',\n                    onClick: () => addToast('info', 'This is how secondary buttons look'),\n                    variant: 'secondary' as const,\n                    icon: '🔘'\n                  }\n                ]}\n                orientation=\"horizontal\"\n                spacing=\"sm\"\n              />\n            </div>\n          </SettingSection>\n        </div>\n      </GridSection>\n    </AdminPageWrapper>\n  );\n}\n\nexport default function AdminColorsPage() {\n  return (\n    <ToastProvider>\n      <AdminColorsPageContent />\n    </ToastProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/cms/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Span' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { cmsService } from '@/lib/services/cms-service';\nimport { CMSConfiguration } from '@/types/cms';\n\nimport { \n  AdminPageWrapper,\n  GridSection, \n  InfoCard, \n  ActionGrid,\n  ToastProvider,\n  useToast,\n  ActionButtonGroup,\n  Container,\n  Text,\n  Span\n} from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\n\nfunction CMSPageContent() {\n  const { addToast } = useToast();\n  const [config, setConfig] = useState<CMSConfiguration | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\n\n  useEffect(() => {\n    loadCMSConfig();\n  }, []);\n\n  const loadCMSConfig = async () => {\n    try {\n      setError(null);\n      setLoading(true);\n      console.log('⚙️ Loading CMS configuration...');\n      \n      const cmsConfig = await cmsService.getCMSConfiguration();\n      setConfig(cmsConfig);\n      if (cmsConfig) {\n        setLastUpdated(cmsConfig.lastUpdated);\n      }\n      \n      console.log('✅ CMS configuration loaded');\n    } catch (err) {\n      console.error('❌ Error loading CMS config:', err);\n      setError('Failed to load CMS configuration. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInitializeCMS = async () => {\n    try {\n      setLoading(true);\n      console.log('🔄 Initializing CMS...');\n      \n      const response = await fetch('/api/admin/init-cms', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        await loadCMSConfig();\n        addToast('success', 'CMS initialized successfully!');\n        console.log('✅ CMS initialized successfully');\n      } else {\n        throw new Error(result.message);\n      }\n    } catch (err) {\n      console.error('❌ Error initializing CMS:', err);\n      addToast('error', 'Failed to initialize CMS: ' + (err instanceof Error ? err.message : 'Unknown error'));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const headerActions = [\n    { \n      label: 'Refresh', \n      onClick: loadCMSConfig, \n      variant: 'outline' as const,\n      disabled: loading\n    },\n    { \n      label: 'Export Config', \n      onClick: () => addToast('info', 'Export functionality coming soon'), \n      variant: 'outline' as const \n    },\n    { \n      label: 'Initialize CMS', \n      onClick: handleInitializeCMS, \n      variant: 'primary' as const,\n      disabled: loading\n    }\n  ];\n\n  const cmsSections = [\n    {\n      id: 'pages',\n      title: 'Pages',\n      description: 'Manage website pages and content',\n      icon: '📄',\n      href: '/admin/cms/pages',\n      status: config?.pages ? 'Configured' : 'Not Set Up'\n    },\n    {\n      id: 'business',\n      title: 'Business Info',\n      description: 'Company details and contact information',\n      icon: '🏢',\n      href: '/admin/cms/business',\n      status: config?.business ? 'Configured' : 'Not Set Up'\n    },\n    {\n      id: 'pricing',\n      title: 'Pricing',\n      description: 'Service rates and pricing structure',\n      icon: '💰',\n      href: '/admin/cms/pricing',\n      status: config?.pricing ? 'Configured' : 'Not Set Up'\n    },\n    {\n      id: 'colors',\n      title: 'Colors',\n      description: 'Brand colors and design system',\n      icon: '🎨',\n      href: '/admin/cms/colors',\n      status: config?.themeColors ? 'Configured' : 'Not Set Up'\n    },\n    {\n      id: 'communication',\n      title: 'Communication',\n      description: 'Email and SMS templates',\n      icon: '📧',\n      href: '/admin/cms/communication',\n      status: config?.communication ? 'Configured' : 'Not Set Up'\n    },\n    {\n      id: 'analytics',\n      title: 'Analytics',\n      description: 'Tracking and reporting settings',\n      icon: '📊',\n      href: '/admin/cms/analytics',\n      status: config?.analytics ? 'Configured' : 'Not Set Up'\n    }\n  ];\n\n  const quickActions = [\n    {\n      id: 1,\n      icon: \"🔄\",\n      label: \"Sync Content\",\n      onClick: () => addToast('info', 'Content sync functionality coming soon')\n    },\n    {\n      id: 2,\n      icon: \"📊\",\n      label: \"Analytics\",\n      href: \"/admin/cms/analytics\"\n    },\n    {\n      id: 3,\n      icon: \"🔧\",\n      label: \"Backup\",\n      onClick: () => addToast('info', 'Backup functionality coming soon')\n    },\n    {\n      id: 4,\n      icon: \"📤\",\n      label: \"Export\",\n      onClick: () => addToast('info', 'Export functionality coming soon')\n    }\n  ];\n\n  return (\n    <AdminPageWrapper\n      title=\"Content Management System\"\n      subtitle=\"Manage website content, branding, and configuration\"\n      actions={headerActions}\n      loading={loading}\n      error={error}\n      loadingMessage=\"Loading CMS configuration...\"\n      errorTitle=\"CMS Load Error\"\n    >\n      {/* CMS Sections Grid */}\n      <GridSection variant=\"content\" columns={3}>\n        {cmsSections.map((section) => (\n          <InfoCard\n            key={section.id}\n            title={`${section.icon} ${section.title}`}\n            description={section.description}\n          >\n            <Container>\n              <Stack direction=\"horizontal\" align=\"center\" justify=\"between\">\n                <Container>\n                  <Text>\n                    Status:\n                  </Text>\n                  <Text>\n                    {section.status}\n                  </Text>\n                </Container>\n                \n                <ActionButtonGroup\n                  buttons={[{\n                    label: `Manage ${section.title}`,\n                    onClick: () => window.location.href = section.href,\n                    variant: 'outline' as const,\n                    icon: section.icon\n                  }]}\n                />\n              </Stack>\n            </Container>\n          </InfoCard>\n        ))}\n      </GridSection>\n\n      {/* Quick Actions */}\n      <GridSection variant=\"actions\" columns={1}>\n        <InfoCard\n          title=\"⚡ Quick Actions\"\n          description=\"Common CMS management and maintenance tasks\"\n        >\n          <ActionGrid actions={quickActions} columns={4} />\n        </InfoCard>\n      </GridSection>\n\n      {/* Last Updated Info */}\n      {lastUpdated && (\n        <GridSection variant=\"content\" columns={1}>\n          <InfoCard\n            title=\"🕒 Configuration Status\"\n            description=\"CMS configuration and update information\"\n          >\n            <Stack spacing=\"md\">\n              <Stack direction=\"horizontal\" align=\"center\" justify=\"between\">\n                <Container>\n                  <Text>\n                    Last Updated\n                  </Text>\n                  <Text>\n                    {new Date(lastUpdated).toLocaleDateString()} at {new Date(lastUpdated).toLocaleTimeString()}\n                  </Text>\n                </Container>\n              </Stack>\n              \n              <Stack direction=\"horizontal\" align=\"center\" justify=\"between\">\n                <Container>\n                  <Text>\n                    Configuration Status\n                  </Text>\n                  <Text>\n                    {config ? 'Fully Configured' : 'Needs Setup'}\n                  </Text>\n                </Container>\n              </Stack>\n              \n              <Stack direction=\"horizontal\" align=\"center\" justify=\"between\">\n                <Container>\n                  <Text>\n                    Auto-Save\n                  </Text>\n                  <Text>\n                    Enabled\n                  </Text>\n                </Container>\n              </Stack>\n            </Stack>\n          </InfoCard>\n        </GridSection>\n      )}\n    </AdminPageWrapper>\n  );\n}\n\nconst CMSPage = () => {\n  return (\n    <ToastProvider>\n      <CMSPageContent />\n    </ToastProvider>\n  );\n};\n\nexport default CMSPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/cms/pages/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stack' is defined but never used.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPages'. Either include it or remove the dependency array.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadPages]","fix":{"range":[1745,1747],"text":"[loadPages]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'loadPages'. Either include it or remove the dependency array.","line":160,"column":6,"nodeType":"ArrayExpression","endLine":160,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [addToast, loadPages]","fix":{"range":[4420,4430],"text":"[addToast, loadPages]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState, useMemo } from \"react\";\nimport { cmsService } from \"@/lib/services/cms-service\";\nimport { CMSConfiguration, HomePageContent, HelpPageContent, PageContent } from \"@/types/cms\";\nimport { \n  AdminPageWrapper,\n  StatusMessage,\n  ToastProvider,\n  useToast,\n  GridSection,\n  InfoCard,\n  Container,\n  Text\n} from \"@/components/ui\";\nimport { Stack } from '@/components/ui/containers';\nimport { \n  GenericPageEditor,\n  HomePageEditor,\n  BookingPageEditor,\n  HelpPageEditor\n} from \"@/components/cms/PageEditors\";\n\n\nconst PAGE_KEYS = [\n  { key: \"home\", label: \"Homepage\", icon: \"🏠\" },\n  { key: \"help\", label: \"Help Page\", icon: \"❓\" },\n  { key: \"booking\", label: \"Booking Page\", icon: \"📅\" },\n  { key: \"success\", label: \"Success Page\", icon: \"✅\" },\n  { key: \"bookingDetails\", label: \"Booking Details Page\", icon: \"📋\" },\n  { key: \"feedback\", label: \"Feedback Page\", icon: \"💬\" },\n  { key: \"cancel\", label: \"Cancel Page\", icon: \"❌\" },\n  { key: \"manage\", label: \"Manage Booking Page\", icon: \"⚙️\" },\n  { key: \"status\", label: \"Status Page\", icon: \"📊\" },\n  { key: \"about\", label: \"About Page\", icon: \"🏢\" },\n  { key: \"terms\", label: \"Terms of Service\", icon: \"📜\" },\n  { key: \"privacy\", label: \"Privacy Policy\", icon: \"🔒\" },\n];\n\ntype EditablePage = keyof CMSConfiguration[\"pages\"];\n\nfunction PagesCMSContent() {\n  const { addToast } = useToast();\n  const [config, setConfig] = useState<CMSConfiguration | null>(null);\n  const [pages, setPages] = useState<CMSConfiguration[\"pages\"]>({} as CMSConfiguration[\"pages\"]);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadPages();\n  }, []);\n\n  const loadPages = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const cmsConfig = await cmsService.getCMSConfiguration();\n      \n      if (!cmsConfig) {\n        setError(\"Failed to load CMS configuration.\");\n        return;\n      }\n      \n      setConfig(cmsConfig);\n      setPages(cmsConfig.pages);\n      addToast('success', 'Pages loaded successfully');\n    } catch {\n      const errorMsg = \"Failed to load CMS content.\";\n      setError(errorMsg);\n      addToast('error', errorMsg);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePageFieldChange = (page: EditablePage, field: string, value: any, subfield?: string) => {\n    setPages((prev) => {\n      const updated = { ...prev };\n      \n      if (!updated[page]) {\n        updated[page] = {} as any;\n      }\n      \n      if (subfield) {\n        (updated[page] as any)[field] = {\n          ...(updated[page] as any)[field],\n          [subfield]: value\n        };\n      } else {\n        (updated[page] as any)[field] = value;\n      }\n      \n      return updated;\n    });\n  };\n\n  const handleHomeSectionChange = (section: string, field: string, value: any) => {\n    setPages((prev) => {\n      const updated = { ...prev };\n      if (!updated.home) updated.home = {} as HomePageContent;\n      \n      (updated.home as any)[section] = {\n        ...(updated.home as any)[section],\n        [field]: value\n      };\n      \n      return updated;\n    });\n  };\n\n  const handleHelpSectionChange = (section: string, value: any) => {\n    setPages((prev) => {\n      const updated = { ...prev };\n      if (!updated.help) updated.help = {} as HelpPageContent;\n      \n      (updated.help as any)[section] = value;\n      \n      return updated;\n    });\n  };\n\n  const handleSavePage = async (page: EditablePage) => {\n    setSaving(true);\n    setError(null);\n    \n    try {\n      await cmsService.updateCMSConfiguration({\n        pages: {\n          ...(config?.pages || {}),\n          [page]: pages[page],\n        } as CMSConfiguration[\"pages\"],\n      });\n      \n      addToast('success', `${PAGE_KEYS.find(p => p.key === page)?.label} saved successfully!`);\n    } catch {\n      const errorMsg = \"Failed to save changes.\";\n      setError(errorMsg);\n      addToast('error', errorMsg);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  // Header actions\n  const headerActions = useMemo(() => [\n    {\n      label: 'Reload Pages',\n      onClick: loadPages,\n      variant: 'outline' as const,\n      icon: '🔄'\n    },\n    {\n      label: 'Export All',\n      onClick: () => addToast('info', 'Export functionality coming soon'),\n      variant: 'secondary' as const,\n      icon: '📤'\n    }\n  ], [addToast]);\n\n  if (loading) {\n    return (\n      <AdminPageWrapper\n        title=\"Manage Page Content\"\n        subtitle=\"Loading page configurations...\"\n        loading={true}\n        loadingMessage=\"Loading CMS page content...\"\n      >\n        <div />\n      </AdminPageWrapper>\n    );\n  }\n\n  return (\n    <AdminPageWrapper\n      title=\"Manage Page Content\"\n      subtitle=\"Edit website content and page configurations\"\n      actions={headerActions}\n      loading={false}\n      error={error}\n      errorTitle=\"CMS Load Error\"\n    >\n      {/* Error Message */}\n      {error && (\n        <StatusMessage \n          type=\"error\" \n          message={error} \n          onDismiss={() => setError(null)} \n        />\n      )}\n\n      <GridSection variant=\"content\" columns={1}>\n        <Container>\n          {PAGE_KEYS.map(({ key, label, icon }) => {\n            const pageData = pages[key as keyof typeof pages];\n            if (!pageData) return null;\n\n            // Special handling for different page types\n            if (key === \"home\") {\n              return (\n                <HomePageEditor\n                  key={key}\n                  pageData={pageData as HomePageContent}\n                  onFieldChange={handleHomeSectionChange}\n                  onSave={() => handleSavePage(\"home\")}\n                  saving={saving}\n                />\n              );\n            }\n\n            if (key === \"help\") {\n              return (\n                <HelpPageEditor\n                  key={key}\n                  pageData={pageData as HelpPageContent}\n                  onFieldChange={handleHelpSectionChange}\n                  onSave={() => handleSavePage(\"help\")}\n                  saving={saving}\n                />\n              );\n            }\n\n            if (key === \"booking\") {\n              return (\n                <BookingPageEditor\n                  key={key}\n                  pageData={pageData as { title: string; subtitle: string; description?: string }}\n                  onFieldChange={(field, value) => handlePageFieldChange(\"booking\", field, value)}\n                  onSave={() => handleSavePage(\"booking\")}\n                  saving={saving}\n                />\n              );\n            }\n\n            // Generic pages (about, terms, privacy, etc.)\n            if (['about', 'terms', 'privacy'].includes(key)) {\n              return (\n                <GenericPageEditor\n                  key={key}\n                  pageData={pageData as PageContent}\n                  onFieldChange={(field, value) => handlePageFieldChange(key as EditablePage, field, value)}\n                  onSave={() => handleSavePage(key as EditablePage)}\n                  saving={saving}\n                  pageTitle={label}\n                />\n              );\n            }\n\n            // For complex pages that need custom editors, show a placeholder for now\n            return (\n              <InfoCard\n                key={key}\n                title={`${icon} ${label}`}\n                description=\"Custom editor for this page type coming soon...\"\n              >\n                <Container>\n                  <Text>\n                    Custom editor for this page type coming soon...\n                  </Text>\n                </Container>\n              </InfoCard>\n            );\n          })}\n        </Container>\n      </GridSection>\n    </AdminPageWrapper>\n  );\n}\n\nexport default function PagesCMS() {\n  return (\n    <ToastProvider>\n      <PagesCMSContent />\n    </ToastProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/cms/pricing/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPricingSettings'. Either include it or remove the dependency array.","line":34,"column":6,"nodeType":"ArrayExpression","endLine":34,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadPricingSettings]","fix":{"range":[736,738],"text":"[loadPricingSettings]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\n\nimport { cmsService } from '@/lib/services/cms-service';\nimport { PricingSettings } from '@/types/cms';\nimport { \n  AdminPageWrapper,\n  GridSection,\n  InfoCard,\n  ActionButtonGroup,\n  ToastProvider,\n  useToast,\n  Input,\n  Label,\n  H4,\n  Text\n} from '@/components/ui';\nimport { \n  MapPin, \n  Trash2,\n  CheckCircle\n} from 'lucide-react';\n\nfunction PricingSettingsContent() {\n  const { addToast } = useToast();\n  const [settings, setSettings] = useState<PricingSettings | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [saved, setSaved] = useState(false);\n\n  useEffect(() => {\n    loadPricingSettings();\n  }, []);\n\n  const loadPricingSettings = async () => {\n    try {\n      setLoading(true);\n      const pricingSettings = await cmsService.getPricingSettings();\n      setSettings(pricingSettings);\n      addToast('success', 'Pricing settings loaded successfully');\n    } catch (error) {\n      console.error('Error loading pricing settings:', error);\n      addToast('error', 'Failed to load pricing settings');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    if (!settings) return;\n    \n    try {\n      setSaving(true);\n      await cmsService.updatePricingSettings(settings);\n      setSaved(true);\n      addToast('success', 'Pricing settings saved successfully!');\n      setTimeout(() => setSaved(false), 3000);\n    } catch (error) {\n      console.error('Error saving pricing settings:', error);\n      addToast('error', 'Failed to save pricing settings');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleBasePricingChange = (field: keyof Omit<PricingSettings, 'cancellation' | 'zones'>, value: number) => {\n    if (!settings) return;\n    \n    setSettings({\n      ...settings,\n      [field]: value\n    });\n  };\n\n  const handleCancellationChange = (field: keyof PricingSettings['cancellation'], value: number) => {\n    if (!settings) return;\n    \n    setSettings({\n      ...settings,\n      cancellation: {\n        ...settings.cancellation,\n        [field]: value\n      }\n    });\n  };\n\n  const addZone = () => {\n    if (!settings) return;\n    \n    const newZone = {\n      name: `Zone ${settings.zones.length + 1}`,\n      baseFare: settings.baseFare,\n      perMile: settings.perMile,\n      perMinute: settings.perMinute\n    };\n    \n    setSettings({\n      ...settings,\n      zones: [...settings.zones, newZone]\n    });\n  };\n\n  const updateZone = (index: number, field: string, value: number | string) => {\n    if (!settings) return;\n    \n    const updatedZones = [...settings.zones];\n    updatedZones[index] = {\n      ...updatedZones[index],\n      [field]: value\n    };\n    \n    setSettings({\n      ...settings,\n      zones: updatedZones\n    });\n  };\n\n  const removeZone = (index: number) => {\n    if (!settings) return;\n    \n    const updatedZones = settings.zones.filter((_, i) => i !== index);\n    setSettings({\n      ...settings,\n      zones: updatedZones\n    });\n  };\n\n  const headerActions = [\n    { \n      label: 'Back to CMS', \n      onClick: () => window.location.href = '/admin/cms', \n      variant: 'outline' as const \n    },\n    { \n      label: saving ? 'Saving...' : 'Save Changes', \n      onClick: handleSave, \n      variant: 'primary' as const,\n      disabled: saving || !settings\n    }\n  ];\n\n  if (loading) {\n    return (\n      <AdminPageWrapper\n        title=\"Pricing Settings\"\n        subtitle=\"Loading pricing configuration...\"\n        loading={true}\n        loadingMessage=\"Loading pricing settings...\"\n      >\n        <div />\n      </AdminPageWrapper>\n    );\n  }\n\n  if (!settings) {\n    return (\n      <AdminPageWrapper\n        title=\"Pricing Settings\"\n        subtitle=\"Failed to load settings\"\n        error=\"Failed to load pricing settings\"\n        errorTitle=\"Load Error\"\n      >\n        <div />\n      </AdminPageWrapper>\n    );\n  }\n\n  return (\n    <AdminPageWrapper\n      title=\"Pricing Settings\"\n      subtitle=\"Manage fare structure, zones, and cancellation policies\"\n      actions={headerActions}\n    >\n      {/* Success Message */}\n      {saved && (\n        <GridSection variant=\"content\" columns={1}>\n          <InfoCard title=\"✅ Settings Saved\" description=\"Pricing settings saved successfully\">\n            <div >\n              <CheckCircle  />\n              <span >Pricing settings saved successfully</span>\n            </div>\n          </InfoCard>\n        </GridSection>\n      )}\n\n      {/* Base Pricing */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title=\"💰 Base Pricing\"\n          description=\"Configure your base fare structure and rates\"\n        >\n          <div >\n            <div >\n              <Label htmlFor=\"baseFare\">Base Fare ($)</Label>\n              <Input\n                id=\"baseFare\"\n                type=\"number\"\n                value={settings.baseFare.toString()}\n                onChange={(e) => handleBasePricingChange('baseFare', parseFloat(e.target.value) || 0)}\n                placeholder=\"10.00\"\n                \n              />\n            </div>\n\n            <div >\n              <Label htmlFor=\"perMile\">Per Mile Rate ($)</Label>\n              <Input\n                id=\"perMile\"\n                type=\"number\"\n                value={settings.perMile.toString()}\n                onChange={(e) => handleBasePricingChange('perMile', parseFloat(e.target.value) || 0)}\n                placeholder=\"3.50\"\n                \n              />\n            </div>\n\n            <div >\n              <Label htmlFor=\"perMinute\">Per Minute Rate ($)</Label>\n              <Input\n                id=\"perMinute\"\n                type=\"number\"\n                value={settings.perMinute.toString()}\n                onChange={(e) => handleBasePricingChange('perMinute', parseFloat(e.target.value) || 0)}\n                placeholder=\"0.50\"\n                \n              />\n            </div>\n\n            <div >\n              <Label htmlFor=\"depositPercent\">Deposit Percentage (%)</Label>\n              <Input\n                id=\"depositPercent\"\n                type=\"number\"\n                value={settings.depositPercent.toString()}\n                onChange={(e) => handleBasePricingChange('depositPercent', parseInt(e.target.value) || 0)}\n                placeholder=\"50\"\n                \n              />\n            </div>\n\n            <div >\n              <Label htmlFor=\"bufferMinutes\">Buffer Minutes</Label>\n              <Input\n                id=\"bufferMinutes\"\n                type=\"number\"\n                value={settings.bufferMinutes.toString()}\n                onChange={(e) => handleBasePricingChange('bufferMinutes', parseInt(e.target.value) || 0)}\n                placeholder=\"60\"\n                \n              />\n            </div>\n          </div>\n        </InfoCard>\n      </GridSection>\n\n      {/* Cancellation Policy */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title=\"⏰ Cancellation Policy\"\n          description=\"Set refund percentages for different cancellation timeframes\"\n        >\n          <div >\n            <div >\n              <Label htmlFor=\"over24hRefund\">Over 24h Refund (%)</Label>\n              <Input\n                id=\"over24hRefund\"\n                type=\"number\"\n                value={settings.cancellation.over24hRefundPercent.toString()}\n                onChange={(e) => handleCancellationChange('over24hRefundPercent', parseInt(e.target.value) || 0)}\n                placeholder=\"100\"\n                \n              />\n            </div>\n\n            <div >\n              <Label htmlFor=\"between3And24hRefund\">3-24h Refund (%)</Label>\n              <Input\n                id=\"between3And24hRefund\"\n                type=\"number\"\n                value={settings.cancellation.between3And24hRefundPercent.toString()}\n                onChange={(e) => handleCancellationChange('between3And24hRefundPercent', parseInt(e.target.value) || 0)}\n                placeholder=\"50\"\n                \n              />\n            </div>\n\n            <div >\n              <Label htmlFor=\"under3hRefund\">Under 3h Refund (%)</Label>\n              <Input\n                id=\"under3hRefund\"\n                type=\"number\"\n                value={settings.cancellation.under3hRefundPercent.toString()}\n                onChange={(e) => handleCancellationChange('under3hRefundPercent', parseInt(e.target.value) || 0)}\n                placeholder=\"0\"\n                \n              />\n            </div>\n          </div>\n        </InfoCard>\n      </GridSection>\n\n      {/* Pricing Zones */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title=\"📍 Pricing Zones\"\n          description=\"Configure custom pricing for different geographic areas\"\n        >\n          <div >\n            <div >\n              <ActionButtonGroup buttons={[\n                {\n                  label: 'Add Zone',\n                  onClick: addZone,\n                  variant: 'outline' as const,\n                  icon: '➕'\n                }\n              ]} />\n            </div>\n\n            {settings.zones.length === 0 ? (\n              <div >\n                <MapPin  />\n                <Text >No pricing zones configured</Text>\n                <Text >Add zones for different areas with custom pricing</Text>\n              </div>\n            ) : (\n              <div >\n                {settings.zones.map((zone, index) => (\n                  <div key={index} >\n                    <div >\n                      <H4 >Zone {index + 1}</H4>\n                      <button\n                        onClick={() => removeZone(index)}\n                        \n                      >\n                        <Trash2  />\n                      </button>\n                    </div>\n                    \n                    <div >\n                      <div >\n                        <Label htmlFor={`zone-name-${index}`}>Zone Name</Label>\n                        <Input\n                          id={`zone-name-${index}`}\n                          value={zone.name}\n                          onChange={(e) => updateZone(index, 'name', e.target.value)}\n                          placeholder=\"Downtown\"\n                          \n                        />\n                      </div>\n                      \n                      <div >\n                        <Label htmlFor={`zone-baseFare-${index}`}>Base Fare ($)</Label>\n                        <Input\n                          id={`zone-baseFare-${index}`}\n                          type=\"number\"\n                          value={zone.baseFare.toString()}\n                          onChange={(e) => updateZone(index, 'baseFare', parseFloat(e.target.value) || 0)}\n                          placeholder=\"10.00\"\n                          \n                        />\n                      </div>\n                      \n                      <div >\n                        <Label htmlFor={`zone-perMile-${index}`}>Per Mile ($)</Label>\n                        <Input\n                          id={`zone-perMile-${index}`}\n                          type=\"number\"\n                          value={zone.perMile.toString()}\n                          onChange={(e) => updateZone(index, 'perMile', parseFloat(e.target.value) || 0)}\n                          placeholder=\"3.50\"\n                          \n                        />\n                      </div>\n                      \n                      <div >\n                        <Label htmlFor={`zone-perMinute-${index}`}>Per Minute ($)</Label>\n                        <Input\n                          id={`zone-perMinute-${index}`}\n                          type=\"number\"\n                          value={zone.perMinute.toString()}\n                          onChange={(e) => updateZone(index, 'perMinute', parseFloat(e.target.value) || 0)}\n                          placeholder=\"0.50\"\n                          \n                        />\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </InfoCard>\n      </GridSection>\n    </AdminPageWrapper>\n  );\n}\n\nexport default function PricingSettingsPage() {\n  return (\n    <ToastProvider>\n      <PricingSettingsContent />\n    </ToastProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/comments/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/costs/manual-entry/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleSubmit' function makes the dependencies of useMemo Hook (at line 119) change on every render. Move it inside the useMemo callback. Alternatively, wrap the definition of 'handleSubmit' in its own useCallback() Hook.","line":39,"column":9,"nodeType":"VariableDeclarator","endLine":83,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleClearForm' function makes the dependencies of useMemo Hook (at line 119) change on every render. Move it inside the useMemo callback. Alternatively, wrap the definition of 'handleClearForm' in its own useCallback() Hook.","line":85,"column":9,"nodeType":"VariableDeclarator","endLine":95,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo } from 'react';\nimport { \n  AdminPageWrapper,\n  SettingSection,\n  SettingInput,\n  ActionButtonGroup,\n  StatusMessage,\n  ToastProvider,\n  useToast,\n  GridSection,\n  HelpCard,\n  Container\n} from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\nimport { realCostTrackingService } from '@/lib/business/real-cost-tracking';\n\ninterface CostEntry {\n  date: string;\n  category: string;\n  description: string;\n  amount: number;\n  notes?: string;\n}\n\nfunction ManualCostEntryPageContent() {\n  const { addToast } = useToast();\n  const [formData, setFormData] = useState<CostEntry>({\n    date: new Date().toISOString().split('T')[0],\n    category: '',\n    description: '',\n    amount: 0,\n    notes: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleSubmit = async () => {\n    if (!formData.category || !formData.description || formData.amount <= 0) {\n      setError('Please fill in all required fields with valid values');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      await realCostTrackingService.addCost({\n        service: formData.category,\n        category: formData.category,\n        description: formData.description,\n        actualMonthlyCost: formData.amount,\n        projectedMonthlyCost: formData.amount,\n        lastBillingDate: formData.date,\n        nextBillingDate: formData.date,\n        billingCycle: 'monthly',\n        provider: 'Manual Entry',\n        accountId: 'manual',\n        plan: 'Manual',\n        dataSource: 'manual',\n        notes: formData.notes || undefined\n      });\n\n      addToast('success', 'Cost entry added successfully!');\n      \n      // Reset form\n      setFormData({\n        date: new Date().toISOString().split('T')[0],\n        category: '',\n        description: '',\n        amount: 0,\n        notes: ''\n      });\n    } catch (error) {\n      console.error('Error adding cost entry:', error);\n      const errorMsg = 'Failed to add cost entry. Please try again.';\n      setError(errorMsg);\n      addToast('error', errorMsg);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClearForm = () => {\n    setFormData({\n      date: new Date().toISOString().split('T')[0],\n      category: '',\n      description: '',\n      amount: 0,\n      notes: ''\n    });\n    setError(null);\n    addToast('info', 'Form cleared');\n  };\n\n  const handleInputChange = (field: keyof CostEntry, value: string | number) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  // Header actions\n  const headerActions = useMemo(() => [\n    {\n      label: 'Clear Form',\n      onClick: handleClearForm,\n      variant: 'outline' as const,\n      icon: '🗑️'\n    },\n    {\n      label: loading ? 'Adding...' : 'Add Cost Entry',\n      onClick: handleSubmit,\n      variant: 'primary' as const,\n      disabled: loading,\n      icon: '💰'\n    }\n  ], [loading, handleSubmit, handleClearForm]);\n\n  // Cost category help cards\n  const costCategories = useMemo(() => [\n    {\n      icon: '🚗',\n      title: 'Vehicle Costs',\n      description: 'Fuel, Maintenance & Repairs, Insurance, Registration & Licensing, Vehicle Purchase/Lease'\n    },\n    {\n      icon: '⚙️',\n      title: 'Operational Costs',\n      description: 'Driver Wages, Office Rent, Utilities, Software & Technology, Marketing & Advertising'\n    },\n    {\n      icon: '📊',\n      title: 'Administrative',\n      description: 'Legal Fees, Accounting, Business License, Professional Services, Banking Fees'\n    },\n    {\n      icon: '🛡️',\n      title: 'Safety & Compliance',\n      description: 'Safety Equipment, Training, Compliance Audits, Background Checks, Drug Testing'\n    }\n  ], []);\n\n  return (\n    <AdminPageWrapper\n      title=\"Manual Cost Entry\"\n      subtitle=\"Add new operational costs to track your business expenses\"\n      actions={headerActions}\n      loading={false}\n      error={error}\n      errorTitle=\"Cost Entry Error\"\n    >\n      {/* Error Message */}\n      {error && (\n        <StatusMessage \n          type=\"error\" \n          message={error} \n          onDismiss={() => setError(null)} \n        />\n      )}\n\n      <GridSection variant=\"content\" columns={1}>\n        <Container>\n          {/* Cost Entry Form */}\n          <SettingSection\n            title=\"Add New Cost Entry\"\n            description=\"Enter details for your business expense\"\n            icon=\"💰\"\n          >\n            <Stack spacing=\"md\">\n              <SettingInput\n                id=\"cost-date\"\n                label=\"Date\"\n                description=\"When this cost was incurred\"\n                type=\"text\"\n                value={formData.date}\n                onChange={(value) => handleInputChange('date', value)}\n                icon=\"📅\"\n              />\n              \n              <SettingInput\n                id=\"cost-category\"\n                label=\"Category *\"\n                description=\"Type of expense (e.g., Fuel, Maintenance)\"\n                value={formData.category}\n                onChange={(value) => handleInputChange('category', value)}\n                placeholder=\"e.g., Fuel, Maintenance, Insurance\"\n                icon=\"🏷️\"\n              />\n            </Stack>\n\n            <SettingInput\n              id=\"cost-description\"\n              label=\"Description *\"\n              description=\"Brief description of the expense\"\n              value={formData.description}\n              onChange={(value) => handleInputChange('description', value)}\n              placeholder=\"Brief description of the cost\"\n              icon=\"📝\"\n            />\n\n            <SettingInput\n              id=\"cost-amount\"\n              label=\"Amount ($) *\"\n              description=\"Cost amount in dollars\"\n              type=\"number\"\n              value={formData.amount.toString()}\n              onChange={(value) => handleInputChange('amount', parseFloat(value) || 0)}\n              placeholder=\"0.00\"\n              icon=\"💲\"\n            />\n\n            <SettingInput\n              id=\"cost-notes\"\n              label=\"Notes (Optional)\"\n              description=\"Additional details or context\"\n              type=\"text\"\n              value={formData.notes || ''}\n              onChange={(value) => handleInputChange('notes', value)}\n              placeholder=\"Additional notes or details\"\n              icon=\"📋\"\n            />\n          </SettingSection>\n\n          {/* Cost Categories Guide */}\n          <SettingSection\n            title=\"Cost Categories\"\n            description=\"Common expense categories to help organize your costs\"\n            icon=\"📊\"\n          >\n            <Stack spacing=\"md\">\n              {costCategories.map((category, index) => (\n                <HelpCard\n                  key={index}\n                  icon={category.icon}\n                  title={category.title}\n                  description={category.description}\n                />\n              ))}\n            </Stack>\n          </SettingSection>\n\n          {/* Quick Add Actions */}\n          <SettingSection\n            title=\"Quick Actions\"\n            description=\"Common cost entry shortcuts\"\n            icon=\"⚡\"\n          >\n            <Container>\n              <ActionButtonGroup\n                buttons={[\n                  {\n                    label: 'Add Fuel Cost',\n                    onClick: () => {\n                      setFormData(prev => ({ ...prev, category: 'Fuel', description: 'Vehicle fuel expense' }));\n                      addToast('info', 'Fuel cost template applied');\n                    },\n                    variant: 'outline',\n                    size: 'sm'\n                  },\n                  {\n                    label: 'Add Maintenance',\n                    onClick: () => {\n                      setFormData(prev => ({ ...prev, category: 'Maintenance', description: 'Vehicle maintenance and repairs' }));\n                      addToast('info', 'Maintenance template applied');\n                    },\n                    variant: 'outline',\n                    size: 'sm'\n                  },\n                  {\n                    label: 'Add Insurance',\n                    onClick: () => {\n                      setFormData(prev => ({ ...prev, category: 'Insurance', description: 'Vehicle insurance payment' }));\n                      addToast('info', 'Insurance template applied');\n                    },\n                    variant: 'outline',\n                    size: 'sm'\n                  }\n                ]}\n                orientation=\"horizontal\"\n                spacing=\"sm\"\n              />\n            </Container>\n          </SettingSection>\n        </Container>\n      </GridSection>\n    </AdminPageWrapper>\n  );\n}\n\nconst ManualCostEntryPage = () => {\n  return (\n    <ToastProvider>\n      <ManualCostEntryPageContent />\n    </ToastProvider>\n  );\n};\n\nexport default ManualCostEntryPage; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/costs/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stack' is defined but never used.","line":19,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'statusClass' is assigned a value but never used.","line":102,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'varianceClass' is assigned a value but never used.","line":179,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":179,"endColumn":24}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { realCostTrackingService, type RealCostItem } from '@/lib/business/real-cost-tracking';\nimport { \n  AdminPageWrapper,\n  GridSection, \n  StatCard, \n  InfoCard, \n  ActionGrid,\n  DataTable,\n  DataTableColumn,\n  DataTableAction,\n  ToastProvider,\n  useToast,\n  Container,\n  Text\n} from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\n\nfunction CostsPageContent() {\n  const { addToast } = useToast();\n  const [costs, setCosts] = useState<RealCostItem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [summary, setSummary] = useState<any>(null);\n\n  useEffect(() => {\n    loadCosts();\n  }, []);\n\n  const loadCosts = async () => {\n    try {\n      setError(null);\n      setLoading(true);\n      console.log('💰 Loading costs data...');\n      \n      const costsData = await realCostTrackingService.getCosts();\n      setCosts(costsData);\n      \n      const summaryData = await realCostTrackingService.getRealCostSummary();\n      setSummary(summaryData);\n      \n      console.log('✅ Costs loaded:', costsData.length, 'categories');\n    } catch (err) {\n      console.error('❌ Error loading costs:', err);\n      setError('Failed to load costs data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(amount);\n  };\n\n  const getStatusIcon = (cost: RealCostItem) => {\n    if (cost.actualMonthlyCost === 0) return '⏱️';\n    if (cost.actualMonthlyCost > cost.projectedMonthlyCost) return '❌';\n    return '✅';\n  };\n\n  const getVariance = (actual: number, projected: number) => {\n    if (projected === 0) return 0;\n    return ((actual - projected) / projected) * 100;\n  };\n\n  const getStatusClass = (cost: RealCostItem) => {\n    const variance = getVariance(cost.actualMonthlyCost, cost.projectedMonthlyCost);\n    \n    if (cost.actualMonthlyCost === 0) {\n      return 'cost-status-pending';\n    } else if (variance > 10) {\n      return 'cost-status-over-budget';\n    } else if (variance > 0) {\n      return 'cost-status-slightly-over';\n    } else {\n      return 'cost-status-on-track';\n    }\n  };\n\n  const getStatusText = (cost: RealCostItem) => {\n    const variance = getVariance(cost.actualMonthlyCost, cost.projectedMonthlyCost);\n    \n    if (cost.actualMonthlyCost === 0) {\n      return 'Pending';\n    } else if (variance > 10) {\n      return 'Over Budget';\n    } else if (variance > 0) {\n      return 'Slightly Over';\n    } else {\n      return 'On Track';\n    }\n  };\n\n  const renderStatus = (cost: RealCostItem) => {\n    const icon = getStatusIcon(cost);\n    const statusText = getStatusText(cost);\n    const statusClass = getStatusClass(cost);\n    \n    return (\n      <span>\n        {icon} {statusText}\n      </span>\n    );\n  };\n\n  const headerActions = [\n    { \n      label: 'Refresh', \n      onClick: loadCosts, \n      variant: 'outline' as const,\n      disabled: loading\n    },\n    { \n      label: 'Export Report', \n      onClick: () => addToast('info', 'Export functionality coming soon'), \n      variant: 'outline' as const \n    },\n    { \n      label: 'Add Cost', \n      href: '/admin/costs/manual-entry', \n      variant: 'primary' as const \n    }\n  ];\n\n  // Table columns\n  const columns: DataTableColumn<RealCostItem>[] = [\n    {\n      key: 'category',\n      label: 'Category',\n      sortable: true,\n      render: (_, cost) => (\n        <Container>\n          <Text>{cost.category}</Text>\n          <Text size=\"sm\">{cost.description}</Text>\n        </Container>\n      )\n    },\n    {\n      key: 'projectedMonthlyCost',\n      label: 'Projected',\n      sortable: true,\n      render: (value) => (\n        <Container>\n          {formatCurrency(value)}\n        </Container>\n      )\n    },\n    {\n      key: 'actualMonthlyCost',\n      label: 'Actual',\n      sortable: true,\n      render: (value) => (\n        <Container>\n          {formatCurrency(value)}\n        </Container>\n      )\n    },\n    {\n      key: 'actions',\n      label: 'Variance',\n      sortable: false,\n      render: (_, cost) => {\n        const variance = getVariance(cost.actualMonthlyCost, cost.projectedMonthlyCost);\n        const isPositive = variance >= 0;\n        \n        let varianceClass = 'cost-variance-neutral';\n        if (cost.actualMonthlyCost === 0) {\n          varianceClass = 'cost-variance-pending';\n        } else if (variance > 10) {\n          varianceClass = 'cost-variance-over';\n        } else if (variance > 0) {\n          varianceClass = 'cost-variance-slightly-over';\n        } else {\n          varianceClass = 'cost-variance-under';\n        }\n        \n        return (\n          <Container>\n            {cost.actualMonthlyCost === 0 ? 'N/A' : \n             `${isPositive ? '+' : ''}${variance.toFixed(1)}%`}\n          </Container>\n        );\n      }\n    },\n    {\n      key: 'actions',\n      label: 'Status',\n      sortable: false,\n      render: (_, cost) => renderStatus(cost)\n    }\n  ];\n\n  // Table actions\n  const actions: DataTableAction<RealCostItem>[] = [\n    {\n      label: 'View Details',\n      icon: '👁️',\n      onClick: (cost) => addToast('info', `Detailed cost breakdown for ${cost.category} coming soon`),\n      variant: 'outline'\n    },\n    {\n      label: 'Update Cost',\n      icon: '✏️',\n      onClick: (cost) => addToast('info', `Cost updating for ${cost.category} coming soon`),\n      variant: 'primary'\n    },\n    {\n      label: 'View History',\n      icon: '📊',\n      onClick: (cost) => addToast('info', `Cost history for ${cost.category} coming soon`),\n      variant: 'outline'\n    }\n  ];\n\n  const quickActions = [\n    {\n      id: 1,\n      icon: \"📊\",\n      label: \"Cost Analytics\",\n      onClick: () => addToast('info', 'Analytics dashboard coming soon')\n    },\n    {\n      id: 2,\n      icon: \"📋\",\n      label: \"Export Report\",\n      onClick: () => addToast('info', 'Export functionality coming soon')\n    },\n    {\n      id: 3,\n      icon: \"⚙️\",\n      label: \"Cost Settings\",\n      href: \"/admin/cms/business\"\n    },\n    {\n      id: 4,\n      icon: \"📅\",\n      label: \"Monthly Reports\",\n      onClick: () => addToast('info', 'Monthly reports coming soon')\n    }\n  ];\n\n  const overBudgetItems = costs.filter(c => c.actualMonthlyCost > c.projectedMonthlyCost).length;\n  const pendingItems = costs.filter(c => c.actualMonthlyCost === 0).length;\n\n  return (\n    <AdminPageWrapper\n      title=\"Cost Tracking\"\n      subtitle=\"Monitor and manage your business costs and expenses\"\n      actions={headerActions}\n      loading={loading}\n      error={error}\n      loadingMessage=\"Loading cost data...\"\n      errorTitle=\"Cost Loading Error\"\n    >\n      {/* Stats Overview */}\n      <GridSection variant=\"stats\" columns={4}>\n        <StatCard\n          title=\"Total Monthly Cost\"\n          icon=\"💰\"\n          statNumber={summary ? formatCurrency(summary.totalActualCost) : '$0'}\n          statChange={summary && summary.totalProjectedCost > 0 \n            ? `${((summary.totalActualCost / summary.totalProjectedCost - 1) * 100).toFixed(1)}% vs projected`\n            : 'No projection'\n          }\n          changeType={summary && summary.totalActualCost > summary.totalProjectedCost ? 'negative' : 'positive'}\n        />\n        \n        <StatCard\n          title=\"Projected Monthly\"\n          icon=\"📊\"\n          statNumber={summary ? formatCurrency(summary.totalProjectedCost) : '$0'}\n          statChange={`${costs.length} cost categories`}\n          changeType=\"neutral\"\n        />\n        \n        <StatCard\n          title=\"Over Budget Items\"\n          icon=\"⚠️\"\n          statNumber={overBudgetItems.toString()}\n          statChange={`${pendingItems} pending updates`}\n          changeType={overBudgetItems > 0 ? 'negative' : 'positive'}\n        />\n        \n        <StatCard\n          title=\"Cost Categories\"\n          icon=\"📋\"\n          statNumber={costs.length.toString()}\n          statChange=\"Active tracking\"\n          changeType=\"neutral\"\n        />\n      </GridSection>\n\n      {/* Cost Breakdown Table */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title=\"💰 Cost Breakdown\"\n          description=\"Search, sort, and manage your business cost categories\"\n        >\n          <DataTable\n            data={costs}\n            columns={columns}\n            actions={actions}\n            loading={loading}\n            searchPlaceholder=\"Search by cost category or description...\"\n            emptyMessage=\"No cost data available. Add some manual cost entries to get started.\"\n            emptyIcon=\"💰\"\n            pageSize={15}\n            rowClassName={(cost) => \n              cost.actualMonthlyCost > cost.projectedMonthlyCost ? 'cost-row-over-budget' : \n              cost.actualMonthlyCost === 0 ? 'cost-row-pending' : 'cost-row-normal'\n            }\n            onRowClick={(cost) => console.log('Clicked cost category:', cost.category)}\n          />\n        </InfoCard>\n      </GridSection>\n\n      {/* Quick Actions */}\n      <GridSection variant=\"actions\" columns={1}>\n        <InfoCard\n          title=\"⚡ Quick Actions\"\n          description=\"Manage your cost tracking and generate reports\"\n        >\n          <ActionGrid actions={quickActions} columns={4} />\n        </InfoCard>\n      </GridSection>\n    </AdminPageWrapper>\n  );\n}\n\nexport default function CostsPage() {\n  return (\n    <ToastProvider>\n      <CostsPageContent />\n    </ToastProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/drivers/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stack' is defined but never used.","line":19,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { \n  AdminPageWrapper,\n  GridSection, \n  StatCard, \n  InfoCard, \n  ActionGrid,\n  DataTable,\n  DataTableColumn,\n  DataTableAction,\n  ToastProvider,\n  useToast,\n  Container,\n  Text,\n  Span\n} from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\n\ninterface Driver {\n  id: string;\n  name: string;\n  phone: string;\n  email: string;\n  status: 'available' | 'on-trip' | 'offline';\n  vehicle: {\n    make: string;\n    model: string;\n    year: number;\n    color: string;\n    licensePlate: string;\n  };\n  rating: number;\n  totalRides: number;\n  location?: {\n    lat: number;\n    lng: number;\n    timestamp: Date;\n  };\n  createdAt: Date;\n}\n\nfunction DriversPageContent() {\n  const { addToast } = useToast();\n  const [drivers, setDrivers] = useState<Driver[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchDrivers();\n  }, []);\n\n  const fetchDrivers = async () => {\n    try {\n      setError(null);\n      setLoading(true);\n      console.log('🚗 Loading drivers...');\n\n      // Mock data for now - will be replaced with real API call\n      const mockDrivers: Driver[] = [\n        {\n          id: '1',\n          name: 'John Smith',\n          phone: '(203) 555-0123',\n          email: 'john@fairfieldairportcars.com',\n          status: 'available',\n          vehicle: {\n            make: 'Toyota',\n            model: 'Camry',\n            year: 2022,\n            color: 'Silver',\n            licensePlate: 'CT-ABC123'\n          },\n          rating: 4.8,\n          totalRides: 156,\n          location: {\n            lat: 41.1408,\n            lng: -73.2613,\n            timestamp: new Date()\n          },\n          createdAt: new Date('2024-01-01')\n        },\n        {\n          id: '2',\n          name: 'Sarah Johnson',\n          phone: '(203) 555-0456',\n          email: 'sarah@fairfieldairportcars.com',\n          status: 'on-trip',\n          vehicle: {\n            make: 'Honda',\n            model: 'Accord',\n            year: 2021,\n            color: 'Black',\n            licensePlate: 'CT-DEF456'\n          },\n          rating: 4.9,\n          totalRides: 203,\n          createdAt: new Date('2024-01-15')\n        },\n        {\n          id: '3',\n          name: 'Mike Davis',\n          phone: '(203) 555-0789',\n          email: 'mike@fairfieldairportcars.com',\n          status: 'offline',\n          vehicle: {\n            make: 'BMW',\n            model: '3 Series',\n            year: 2023,\n            color: 'White',\n            licensePlate: 'CT-GHI789'\n          },\n          rating: 4.7,\n          totalRides: 98,\n          createdAt: new Date('2024-02-01')\n        },\n        {\n          id: '4',\n          name: 'Emily Chen',\n          phone: '(203) 555-0321',\n          email: 'emily@fairfieldairportcars.com',\n          status: 'available',\n          vehicle: {\n            make: 'Mercedes',\n            model: 'E-Class',\n            year: 2023,\n            color: 'Blue',\n            licensePlate: 'CT-JKL012'\n          },\n          rating: 4.6,\n          totalRides: 87,\n          createdAt: new Date('2024-02-15')\n        }\n      ];\n      \n      console.log('✅ Drivers loaded:', mockDrivers.length, 'drivers');\n      setDrivers(mockDrivers);\n    } catch (err) {\n      console.error('❌ Error loading drivers:', err);\n      setError('Failed to load drivers. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const renderStatus = (status: string) => {\n    const getStatusIcon = (status: string) => {\n      switch (status) {\n        case 'available':\n          return '✅';\n        case 'on-trip':\n          return '🚗';\n        case 'offline':\n          return '⏸️';\n        default:\n          return '❓';\n      }\n    };\n\n    return (\n      <Span>\n        {getStatusIcon(status)} {status}\n      </Span>\n    );\n  };\n\n  // Calculate driver stats\n  const totalDrivers = drivers.length;\n  const availableDrivers = drivers.filter(d => d.status === 'available').length;\n  const onTripDrivers = drivers.filter(d => d.status === 'on-trip').length;\n  const averageRating = drivers.length > 0 \n    ? (drivers.reduce((sum, d) => sum + d.rating, 0) / drivers.length).toFixed(1)\n    : '0.0';\n\n  // Table columns\n  const columns: DataTableColumn<Driver>[] = [\n    {\n      key: 'name',\n      label: 'Driver',\n      sortable: true,\n      render: (_, driver) => (\n        <Container>\n          <Text>\n            {driver.name}\n          </Text>\n          <Text size=\"sm\">\n            📞 {driver.phone}\n          </Text>\n          <Text size=\"sm\">\n            📧 {driver.email}\n          </Text>\n        </Container>\n      )\n    },\n    {\n      key: 'vehicle',\n      label: 'Vehicle',\n      sortable: false,\n      render: (_, driver) => (\n        <Container>\n          <Text>\n            🚗 {driver.vehicle.year} {driver.vehicle.make} {driver.vehicle.model}\n          </Text>\n          <Text size=\"sm\">\n            Color: {driver.vehicle.color}\n          </Text>\n          <Text size=\"sm\">\n            Plate: {driver.vehicle.licensePlate}\n          </Text>\n        </Container>\n      )\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      sortable: true,\n      render: (value) => renderStatus(value)\n    },\n    {\n      key: 'rating',\n      label: 'Rating',\n      sortable: true,\n      render: (_, driver) => (\n        <Container>\n          <Text>\n            ⭐ {driver.rating.toFixed(1)}\n          </Text>\n          <Text size=\"sm\">\n            {driver.totalRides} rides\n          </Text>\n        </Container>\n      )\n    }\n  ];\n\n  // Table actions\n  const actions: DataTableAction<Driver>[] = [\n    {\n      label: 'View',\n      icon: '👁️',\n      onClick: (driver) => addToast('info', `Viewing driver profile for ${driver.name}`),\n      variant: 'outline'\n    },\n    {\n      label: 'Assign Ride',\n      icon: '🚗',\n      onClick: (driver) => addToast('success', `Ride assignment feature for ${driver.name} coming soon`),\n      variant: 'primary',\n      condition: (driver) => driver.status === 'available'\n    },\n    {\n      label: 'Location',\n      icon: '📍',\n      onClick: (driver) => addToast('info', `Live location tracking for ${driver.name} coming soon`),\n      variant: 'outline',\n      condition: (driver) => driver.status !== 'offline'\n    },\n    {\n      label: 'Edit',\n      icon: '✏️',\n      onClick: (driver) => addToast('info', `Driver editing for ${driver.name} coming soon`),\n      variant: 'outline'\n    }\n  ];\n\n  // Quick actions\n  const quickActions = [\n    {\n      id: 1,\n      icon: \"👤\",\n      label: \"Add New Driver\",\n      href: \"/admin/drivers/new\"\n    },\n    {\n      id: 2,\n      icon: \"📍\",\n      label: \"Live Driver Map\",\n      href: \"/admin/drivers/map\"\n    },\n    {\n      id: 3,\n      icon: \"📊\",\n      label: \"Driver Analytics\",\n      href: \"/admin/drivers/analytics\"\n    },\n    {\n      id: 4,\n      icon: \"⚙️\",\n      label: \"Driver Settings\",\n      href: \"/admin/drivers/settings\"\n    }\n  ];\n\n  return (\n    <AdminPageWrapper\n      title=\"Driver Management\"\n      subtitle=\"Manage your fleet of professional drivers\"\n      loading={loading}\n      error={error}\n      loadingMessage=\"Loading driver data...\"\n      errorTitle=\"Driver Load Error\"\n    >\n      {/* Driver Statistics */}\n      <GridSection variant=\"stats\" columns={4}>\n        <StatCard\n          title=\"Total Drivers\"\n          icon=\"👥\"\n          statNumber={totalDrivers.toString()}\n          statChange=\"Active fleet\"\n          changeType=\"neutral\"\n        />\n        <StatCard\n          title=\"Available\"\n          icon=\"✅\"\n          statNumber={availableDrivers.toString()}\n          statChange=\"Ready for rides\"\n          changeType=\"positive\"\n        />\n        <StatCard\n          title=\"On Trip\"\n          icon=\"🚗\"\n          statNumber={onTripDrivers.toString()}\n          statChange=\"Currently driving\"\n          changeType=\"neutral\"\n        />\n        <StatCard\n          title=\"Average Rating\"\n          icon=\"⭐\"\n          statNumber={averageRating}\n          statChange=\"Customer satisfaction\"\n          changeType=\"positive\"\n        />\n      </GridSection>\n\n      {/* Quick Actions */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title=\"🚀 Quick Actions\"\n          description=\"Common driver management tasks\"\n        >\n          <ActionGrid actions={quickActions} />\n        </InfoCard>\n      </GridSection>\n\n      {/* Drivers Table */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title=\"👥 All Drivers\"\n          description=\"View and manage your complete driver roster\"\n        >\n          <DataTable\n            data={drivers}\n            columns={columns}\n            actions={actions}\n            loading={loading}\n            searchPlaceholder=\"Search by driver name, phone, or vehicle...\"\n            emptyMessage=\"No drivers found. Add your first driver to get started.\"\n            emptyIcon=\"👤\"\n            pageSize={10}\n            rowClassName={(driver) => \n              driver.status === 'offline' ? 'opacity-60' : ''\n            }\n            onRowClick={(driver) => console.log('Clicked driver:', driver.name)}\n          />\n        </InfoCard>\n      </GridSection>\n    </AdminPageWrapper>\n  );\n}\n\nconst DriversPage = () => {\n  return (\n    <ToastProvider>\n      <DriversPageContent />\n    </ToastProvider>\n  );\n};\n\nexport default DriversPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/feedback/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/help/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/login/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/login/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/promos/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Text' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { PromoCode } from '@/types/promo';\nimport { \n  AdminPageWrapper,\n  GridSection, \n  InfoCard,\n  StatCard,\n  DataTable,\n  DataTableColumn,\n  DataTableAction,\n  FormSection,\n  ToastProvider,\n  useToast,\n  ActionButtonGroup,\n  Input,\n  Label,\n  Select,\n  Option,\n  Container,\n  Text,\n  Span\n} from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\n\nfunction PromosPageContent() {\n  const { addToast } = useToast();\n  const [promos, setPromos] = useState<PromoCode[]>([]);\n  const [form, setForm] = useState({ \n    code: '', \n    type: 'percent', \n    value: '', \n    expiresAt: '', \n    usageLimit: '' \n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [submitting, setSubmitting] = useState(false);\n\n  const fetchPromos = async () => {\n    try {\n      setError(null);\n      setLoading(true);\n      console.log('🎟️ Loading promo codes...');\n      \n      const res = await fetch('/api/promos');\n      if (res.ok) {\n        const promoData = await res.json();\n        console.log('✅ Promos loaded:', promoData.length, 'codes');\n        setPromos(promoData);\n      } else {\n        throw new Error('Failed to fetch promo codes');\n      }\n    } catch (err) {\n      console.error('❌ Error loading promos:', err);\n      setError('Failed to load promo codes. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPromos();\n  }, []);\n\n  const addPromo = async () => {\n    if (!form.code || !form.value) {\n      addToast('error', 'Please fill in required fields');\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n      const body = { \n        ...form, \n        value: Number(form.value), \n        usageLimit: form.usageLimit ? Number(form.usageLimit) : undefined \n      };\n      \n      const res = await fetch('/api/promos', { \n        method: 'POST', \n        headers: { 'Content-Type': 'application/json' }, \n        body: JSON.stringify(body) \n      });\n\n      if (res.ok) {\n        setForm({ code: '', type: 'percent', value: '', expiresAt: '', usageLimit: '' });\n        await fetchPromos();\n        addToast('success', 'Promo code created successfully!');\n      } else {\n        throw new Error('Failed to create promo code');\n      }\n    } catch (err) {\n      console.error('❌ Error creating promo:', err);\n      addToast('error', 'Failed to create promo code. Please try again.');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const deletePromo = async (id: string) => {\n    if (!confirm('Are you sure you want to delete this promo code?')) return;\n\n    try {\n      const res = await fetch(`/api/promos/${id}`, { method: 'DELETE' });\n      if (res.ok) {\n        await fetchPromos();\n        addToast('success', 'Promo code deleted successfully!');\n      } else {\n        throw new Error('Failed to delete promo code');\n      }\n    } catch (err) {\n      console.error('❌ Error deleting promo:', err);\n      addToast('error', 'Failed to delete promo code. Please try again.');\n    }\n  };\n\n  const formatPromoValue = (promo: PromoCode) => {\n    return promo.type === 'percent' ? `${promo.value}%` : `$${promo.value}`;\n  };\n\n  const getPromoStatus = (promo: PromoCode) => {\n    if (promo.expiresAt && new Date(promo.expiresAt) < new Date()) return 'Expired';\n    if (promo.usageLimit && (promo.usageCount || 0) >= promo.usageLimit) return 'Limit Reached';\n    if (promo.expiresAt && new Date(promo.expiresAt) < new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)) return 'Expiring Soon';\n    return 'Active';\n  };\n\n  const renderStatus = (promo: PromoCode) => {\n    const status = getPromoStatus(promo);\n\n    return (\n      <Span>\n        {status}\n      </Span>\n    );\n  };\n\n  const headerActions = [\n    { \n      label: 'Refresh', \n      onClick: fetchPromos, \n      variant: 'outline' as const,\n      disabled: loading\n    },\n    { \n      label: 'Export Report', \n      onClick: () => alert('Export functionality coming soon'), \n      variant: 'outline' as const \n    },\n    { \n      label: 'Analytics', \n      onClick: () => alert('Promo analytics dashboard coming soon'), \n      variant: 'primary' as const \n    }\n  ];\n\n  // Table columns\n  const columns: DataTableColumn<PromoCode>[] = [\n    {\n      key: 'code',\n      label: 'Promo Code',\n      sortable: true,\n      render: (value) => (\n        <Span>\n          {value}\n        </Span>\n      )\n    },\n    {\n      key: 'type',\n      label: 'Type',\n      sortable: true,\n      render: (value) => (\n        <Span>\n          {value === 'percent' ? 'Percentage' : 'Fixed Amount'}\n        </Span>\n      )\n    },\n    {\n      key: 'value',\n      label: 'Discount',\n      sortable: true,\n      render: (_, promo) => (\n        <Span>\n          {formatPromoValue(promo)}\n        </Span>\n      )\n    },\n    {\n      key: 'expiresAt',\n      label: 'Expiry',\n      sortable: true,\n      render: (value) => value ? new Date(value).toLocaleDateString() : 'No expiry'\n    },\n    {\n      key: 'usageCount',\n      label: 'Usage',\n      sortable: true,\n      render: (_, promo) => (\n        <Container>\n          <Span>\n            {promo.usageCount || 0}\n          </Span>\n          <Span>\n            /{promo.usageLimit || '∞'}\n          </Span>\n        </Container>\n      )\n    },\n    {\n      key: 'actions',\n      label: 'Status',\n      sortable: false,\n      render: (_, promo) => renderStatus(promo)\n    }\n  ];\n\n  // Table actions\n  const actions: DataTableAction<PromoCode>[] = [\n    {\n      label: 'Copy Code',\n      icon: '📋',\n      onClick: (promo) => {\n        navigator.clipboard.writeText(promo.code);\n        alert(`Promo code \"${promo.code}\" copied to clipboard!`);\n      },\n      variant: 'outline'\n    },\n    {\n      label: 'View Usage',\n      icon: '📊',\n      onClick: (promo) => alert(`Usage statistics for ${promo.code} coming soon`),\n      variant: 'outline'\n    },\n    {\n      label: 'Edit',\n      icon: '✏️',\n      onClick: (promo) => alert(`Edit functionality for ${promo.code} coming soon`),\n      variant: 'primary'\n    },\n    {\n      label: 'Delete',\n      icon: '🗑️',\n      onClick: (promo) => promo.id && deletePromo(promo.id),\n      variant: 'outline'\n    }\n  ];\n\n  // Calculate stats\n  const activePromos = promos.filter(p => getPromoStatus(p) === 'Active').length;\n  const totalUsage = promos.reduce((sum, p) => sum + (p.usageCount || 0), 0);\n  const expiringPromos = promos.filter(p => getPromoStatus(p) === 'Expiring Soon').length;\n\n  return (\n    <AdminPageWrapper\n      title=\"Promo Codes\"\n      subtitle=\"Create and manage promotional discount codes\"\n      actions={headerActions}\n      loading={loading}\n      error={error}\n      loadingMessage=\"Loading promo codes...\"\n      errorTitle=\"Promo Load Error\"\n    >\n      {/* Promo Statistics */}\n      <GridSection variant=\"stats\" columns={4}>\n        <StatCard\n          title=\"Total Promos\"\n          icon=\"🎟️\"\n          statNumber={promos.length.toString()}\n          statChange=\"Created codes\"\n          changeType=\"neutral\"\n        />\n        <StatCard\n          title=\"Active Promos\"\n          icon=\"✅\"\n          statNumber={activePromos.toString()}\n          statChange=\"Currently usable\"\n          changeType=\"positive\"\n        />\n        <StatCard\n          title=\"Total Usage\"\n          icon=\"📊\"\n          statNumber={totalUsage.toString()}\n          statChange=\"Times used\"\n          changeType=\"positive\"\n        />\n        <StatCard\n          title=\"Expiring Soon\"\n          icon=\"⏰\"\n          statNumber={expiringPromos.toString()}\n          statChange=\"Within 7 days\"\n          changeType={expiringPromos > 0 ? 'negative' : 'neutral'}\n        />\n      </GridSection>\n\n      {/* Add New Promo Form */}\n      <GridSection variant=\"content\" columns={1}>\n        <FormSection\n          title=\"🎟️ Create New Promo Code\"\n          description=\"Add a new promotional discount code for your customers\"\n          icon=\"🎟️\"\n        >\n          <Stack spacing=\"md\">\n            <Container>\n              <Label>\n                Code (uppercase) *\n              </Label>\n              <input\n                type=\"text\"\n                value={form.code}\n                onChange={(e) => setForm({...form, code: e.target.value.toUpperCase()})}\n                placeholder=\"SAVE20\"\n                required\n              />\n            </Container>\n            \n            <Container>\n              <Label>\n                Type *\n              </Label>\n              <Select \n                value={form.type} \n                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setForm({...form, type: e.target.value})}\n              >\n                <Option value=\"percent\">Percentage %</Option>\n                <Option value=\"flat\">Fixed Amount $</Option>\n              </Select>\n            </Container>\n            \n            <Container>\n              <Label>\n                Value *\n              </Label>\n              <Input\n                type=\"number\"\n                value={form.value}\n                onChange={(e) => setForm({...form, value: e.target.value})}\n                placeholder=\"20\"\n                required\n              />\n            </Container>\n            \n            <Container>\n              <Label>\n                Expires At\n              </Label>\n              <Input\n                type=\"date\"\n                value={form.expiresAt}\n                onChange={(e) => setForm({...form, expiresAt: e.target.value})}\n              />\n            </Container>\n            \n            <Container>\n              <Label>\n                Usage Limit\n              </Label>\n              <Input\n                type=\"number\"\n                value={form.usageLimit}\n                onChange={(e) => setForm({...form, usageLimit: e.target.value})}\n                placeholder=\"100\"\n              />\n            </Container>\n          </Stack>\n          \n          <Container>\n            <ActionButtonGroup\n              buttons={[{\n                label: submitting ? 'Creating...' : 'Create Promo Code',\n                onClick: addPromo,\n                variant: 'primary' as const,\n                disabled: !form.code || !form.value || submitting,\n                icon: '💳'\n              }]}\n            />\n          </Container>\n        </FormSection>\n      </GridSection>\n\n      {/* Promo Codes Table */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title=\"🎟️ All Promo Codes\"\n          description=\"Search, sort, and manage your promotional discount codes\"\n        >\n          <DataTable\n            data={promos}\n            columns={columns}\n            actions={actions}\n            loading={loading}\n            searchPlaceholder=\"Search by promo code or type...\"\n            emptyMessage=\"No promo codes created yet. Create your first promotional discount code above.\"\n            emptyIcon=\"🎟️\"\n            pageSize={10}\n            rowClassName={(promo) => \n              getPromoStatus(promo) === 'Expired' || getPromoStatus(promo) === 'Limit Reached' \n                ? 'opacity-60' : \n              getPromoStatus(promo) === 'Expiring Soon' \n                ? 'border-l-4 border-yellow-500' : ''\n            }\n            onRowClick={(promo) => console.log('Clicked promo:', promo.code)}\n          />\n        </InfoCard>\n      </GridSection>\n    </AdminPageWrapper>\n  );\n}\n\nconst PromosPage = () => {\n  return (\n    <ToastProvider>\n      <PromosPageContent />\n    </ToastProvider>\n  );\n};\n\nexport default PromosPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/admin/withAuth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/admin/ai-assistant-disabled/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/admin/analytics/error/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/admin/analytics/interaction/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/admin/analytics/summary/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/admin/cms/pages/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/admin/init-cms/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/admin/promos/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/admin/promos/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/booking/cancel-booking/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/booking/check-time-slot/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/booking/estimate-fare/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/booking/get-booking/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/booking/get-bookings-simple/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/bookings/[id]/eta/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/drivers/availability/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/health/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/notifications/send-confirmation/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/notifications/send-feedback-request/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/payment/complete-payment/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/payment/create-checkout-session/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/payment/square-webhook/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/places-autocomplete/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/api/ws/bookings/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/book/booking-form.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":195,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":195,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":241,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":241,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { \n  Form,\n  Input,\n  Select,\n  Option,\n  Textarea,\n  Button,\n  SettingSection,\n  SettingInput,\n  StatusMessage,\n  ToastProvider,\n  Text,\n  Span,\n  Container,\n  Grid,\n  GridItem,\n  H3\n} from '@/components/ui';\nimport { Booking } from '@/types/booking';\n\ninterface BookingFormProps {\n  booking?: Booking;\n}\n\nconst useGoogleMapsScript = (apiKey: string) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    if (!apiKey) {\n      setIsError(true);\n      return;\n    }\n\n    const script = document.createElement('script');\n    script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;\n    script.async = true;\n    script.defer = true;\n\n    const checkPlaces = () => {\n      if (window.google && window.google.maps && window.google.maps.places) {\n        setIsLoaded(true);\n      } else {\n        setTimeout(checkPlaces, 100);\n      }\n    };\n\n    script.onload = () => {\n      checkPlaces();\n    };\n\n    script.onerror = () => {\n      setIsError(true);\n    };\n\n    document.head.appendChild(script);\n\n    return () => {\n      document.head.removeChild(script);\n    };\n  }, [apiKey]);\n\n  return { isLoaded, isError };\n};\n\nfunction BookingFormContent({ booking }: BookingFormProps) {\n  const [name, setName] = useState(booking?.name || '');\n  const [email, setEmail] = useState(booking?.email || '');\n  const [phone, setPhone] = useState(booking?.phone || '');\n  const [pickupLocation, setPickupLocation] = useState(booking?.pickupLocation || '');\n  const [dropoffLocation, setDropoffLocation] = useState(booking?.dropoffLocation || '');\n  const [pickupDateTime, setPickupDateTime] = useState(booking?.pickupDateTime ? new Date(booking.pickupDateTime).toISOString().slice(0, 16) : '');\n  const [passengers, setPassengers] = useState(booking?.passengers || 1);\n  const [flightNumber, setFlightNumber] = useState(booking?.flightNumber || '');\n  const [notes, setNotes] = useState(booking?.notes || '');\n  const [fare, setFare] = useState<number | null>(null);\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [pickupSuggestions, setPickupSuggestions] = useState<google.maps.places.AutocompletePrediction[]>([]);\n  const [dropoffSuggestions, setDropoffSuggestions] = useState<google.maps.places.AutocompletePrediction[]>([]);\n  const [showPickupSuggestions, setShowPickupSuggestions] = useState(false);\n  const [showDropoffSuggestions, setShowDropoffSuggestions] = useState(false);\n\n  const { isLoaded: mapsLoaded, isError: mapsError } = useGoogleMapsScript(process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || '');\n\n  const getPlacePredictions = async (input: string, callback: (predictions: google.maps.places.AutocompletePrediction[]) => void) => {\n    if (!mapsLoaded || !window.google) {\n      callback([]);\n      return;\n    }\n\n    const service = new window.google.maps.places.AutocompleteService();\n    service.getPlacePredictions(\n      {\n        input,\n        componentRestrictions: { country: 'us' },\n        types: ['establishment', 'geocode']\n      },\n      (predictions, status) => {\n        if (status === window.google.maps.places.PlacesServiceStatus.OK && predictions) {\n          callback(predictions);\n        } else {\n          callback([]);\n        }\n      }\n    );\n  };\n\n  function debounce<T extends (...args: Parameters<T>) => void>(func: T, delay: number) {\n    let timeoutId: NodeJS.Timeout;\n    return (...args: Parameters<T>) => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => func(...args), delay);\n    };\n  }\n\n  const handlePickupInputChange = (value: string) => {\n    setPickupLocation(value);\n    setShowPickupSuggestions(true);\n    \n    if (value.length > 2) {\n      debounce(() => {\n        getPlacePredictions(value, (predictions) => {\n          setPickupSuggestions(predictions);\n        });\n      }, 300)();\n    } else {\n      setPickupSuggestions([]);\n    }\n  };\n\n  const handleDropoffInputChange = (value: string) => {\n    setDropoffLocation(value);\n    setShowDropoffSuggestions(true);\n    \n    if (value.length > 2) {\n      debounce(() => {\n        getPlacePredictions(value, (predictions) => {\n          setDropoffSuggestions(predictions);\n        });\n      }, 300)();\n    } else {\n      setDropoffSuggestions([]);\n    }\n  };\n\n  const handlePickupSuggestionSelect = (prediction: google.maps.places.AutocompletePrediction) => {\n    setPickupLocation(prediction.description);\n    setPickupSuggestions([]);\n    setShowPickupSuggestions(false);\n  };\n\n  const handleDropoffSuggestionSelect = (prediction: google.maps.places.AutocompletePrediction) => {\n    setDropoffLocation(prediction.description);\n    setDropoffSuggestions([]);\n    setShowDropoffSuggestions(false);\n  };\n\n  const handleCalculateFare = async () => {\n    if (!pickupLocation || !dropoffLocation || !pickupDateTime) {\n      setError('Please fill in all required fields');\n      return;\n    }\n\n    setIsCalculating(true);\n    setError(null);\n\n    try {\n      const response = await fetch('/api/estimate-fare', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          pickupLocation,\n          dropoffLocation,\n          pickupDateTime,\n          passengers,\n          flightNumber\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setFare(data.fare);\n        setSuccess('Fare calculated successfully');\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || 'Failed to calculate fare');\n      }\n    } catch (error) {\n       \n      setError('Network error. Please try again.');\n    } finally {\n      setIsCalculating(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!fare) {\n      setError('Please calculate fare before booking');\n      return;\n    }\n\n    setError(null);\n    setSuccess(null);\n\n    try {\n      const response = await fetch('/api/booking', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          phone,\n          pickupLocation,\n          dropoffLocation,\n          pickupDateTime,\n          passengers,\n          flightNumber,\n          notes,\n          fare\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        window.location.href = `/success?bookingId=${data.bookingId}`;\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || 'Failed to create booking');\n      }\n    } catch (error) {\n       \n      setError('Network error. Please try again.');\n    }\n  };\n\n  return (\n    <Container>\n      {/* Google Maps Error */}\n      {mapsError && (\n        <Container>\n          <Container>\n            <Container>\n              <svg fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n              </svg>\n            </Container>\n            <Container>\n              <H3>\n                Location autocomplete temporarily unavailable\n              </H3>\n              <Container>\n                <Text>You can still fill out the form manually. Location suggestions will be restored shortly.</Text>\n              </Container>\n            </Container>\n          </Container>\n        </Container>\n      )}\n\n      <Form onSubmit={handleSubmit}>\n        {/* Personal Information */}\n        <SettingSection\n          title=\"Personal Information\"\n          description=\"Please provide your contact details for the booking\"\n          icon=\"👤\"\n        >\n          <Grid columns={2} spacing=\"md\">\n            <GridItem>\n              <SettingInput\n                id=\"name\"\n                label=\"Full Name\"\n                description=\"Your complete name as it appears on ID\"\n                value={name}\n                onChange={setName}\n                placeholder=\"Enter your full name\"\n                icon=\"👤\"\n              />\n            </GridItem>\n            \n            <GridItem>\n              <SettingInput\n                id=\"email\"\n                label=\"Email Address\"\n                description=\"We'll send your booking confirmation here\"\n                type=\"email\"\n                value={email}\n                onChange={setEmail}\n                placeholder=\"Enter your email\"\n                icon=\"✉️\"\n              />\n            </GridItem>\n          </Grid>\n          \n          <SettingInput\n            id=\"phone\"\n            label=\"Phone Number\"\n            description=\"Your driver will contact you on this number\"\n            value={phone}\n            onChange={setPhone}\n            placeholder=\"(123) 456-7890\"\n            icon=\"📞\"\n          />\n        </SettingSection>\n\n        {/* Trip Details */}\n        <SettingSection\n          title=\"Trip Details\"\n          description=\"Tell us where you need to go and when\"\n          icon=\"🚗\"\n        >\n          {/* Location Fields - Improved Layout */}\n          <Grid columns={2} spacing=\"md\">\n            <GridItem>\n              <SettingInput\n                id=\"pickupLocation\"\n                label=\"Pickup Location\"\n                description=\"Where should we pick you up?\"\n                value={pickupLocation}\n                onChange={handlePickupInputChange}\n                placeholder=\"Enter pickup address\"\n                icon=\"📍\"\n              />\n              {showPickupSuggestions && pickupSuggestions.length > 0 && (\n                <div >\n                  {pickupSuggestions.map((prediction) => (\n                    <div\n                      key={prediction.place_id}\n                      \n                      onClick={() => handlePickupSuggestionSelect(prediction)}\n                    >\n                      <div >\n                        {prediction.structured_formatting?.main_text || prediction.description}\n                      </div>\n                      <div >\n                        {prediction.structured_formatting?.secondary_text || ''}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </GridItem>\n            \n            <GridItem>\n              <SettingInput\n                id=\"dropoffLocation\"\n                label=\"Destination\"\n                description=\"Where are you going?\"\n                value={dropoffLocation}\n                onChange={handleDropoffInputChange}\n                placeholder=\"Enter destination address\"\n                icon=\"🎯\"\n              />\n              {showDropoffSuggestions && dropoffSuggestions.length > 0 && (\n                <div >\n                  {dropoffSuggestions.map((prediction) => (\n                    <div\n                      key={prediction.place_id}\n                      \n                      onClick={() => handleDropoffSuggestionSelect(prediction)}\n                    >\n                      <div >\n                        {prediction.structured_formatting?.main_text || prediction.description}\n                      </div>\n                      <div >\n                        {prediction.structured_formatting?.secondary_text || ''}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </GridItem>\n          </Grid>\n          \n          {/* Pickup Date and Time - Styled like SettingInput */}\n          <div >\n            <div >\n              <Span >📅</Span>\n              <label \n                htmlFor=\"pickupDateTime\"\n                \n              >\n                Pickup Date and Time\n              </label>\n            </div>\n            \n            <Text >\n              When do you need to be picked up?\n            </Text>\n            \n            <Input\n              id=\"pickupDateTime\"\n              name=\"pickupDateTime\"\n              type=\"datetime-local\"\n              value={pickupDateTime}\n              onChange={(e) => setPickupDateTime(e.target.value)}\n              required\n              \n            />\n          </div>\n        </SettingSection>\n\n        {/* Additional Details */}\n        <SettingSection\n          title=\"Additional Details\"\n          description=\"Help us provide the best service for your trip\"\n          icon=\"⚙️\"\n        >\n          <Grid columns={2} spacing=\"md\">\n            <GridItem>\n              {/* Passengers - Styled like SettingInput */}\n              <div >\n                <div >\n                  <Span >👥</Span>\n                  <label \n                    htmlFor=\"passengers\"\n                    \n                  >\n                    Passengers\n                  </label>\n                </div>\n                \n                <Text >\n                  Number of people traveling\n                </Text>\n                \n                <Select\n                  id=\"passengers\"\n                  name=\"passengers\"\n                  value={passengers}\n                  onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setPassengers(Number(e.target.value))}\n                  \n                >\n                  {[1, 2, 3, 4, 5, 6, 7, 8].map(num => (\n                    <Option key={num} value={num}>{num} passenger{num > 1 ? 's' : ''}</Option>\n                  ))}\n                </Select>\n              </div>\n            </GridItem>\n            \n            <GridItem>\n              <SettingInput\n                id=\"flightNumber\"\n                label=\"Flight Number (Optional)\"\n                description=\"We'll track your flight for delays\"\n                value={flightNumber}\n                onChange={setFlightNumber}\n                placeholder=\"AA1234\"\n                icon=\"✈️\"\n              />\n            </GridItem>\n          </Grid>\n            \n            {/* Special Instructions - Styled like SettingInput */}\n            <div>\n              <div>\n                <Span>📝</Span>\n                                  <label \n                    htmlFor=\"notes\"\n                  >\n                  Special Instructions (Optional)\n                </label>\n              </div>\n              \n              <Text>\n                Let us know about any special requirements\n              </Text>\n              \n              <Textarea\n                id=\"notes\"\n                name=\"notes\"\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n                rows={4}\n                placeholder=\"Any special instructions or requests?\"\n\n              />\n            </div>\n        </SettingSection>\n\n        {/* Action Buttons */}\n        <SettingSection\n          title=\"Book Your Ride\"\n          description=\"Calculate your fare and complete your booking\"\n          icon=\"💳\"\n        >\n          <div>\n            <Button\n              type=\"button\"\n              onClick={handleCalculateFare}\n              disabled={isCalculating}\n              loading={isCalculating}\n              fullWidth\n              size=\"lg\"\n            >\n              {isCalculating ? (\n                <>\n                  <Span>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                      <path fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                  </Span>\n                  Calculating...\n                </>\n              ) : (\n                'Calculate Fare'\n              )}\n            </Button>\n            {fare && (\n              <div>\n                <Text>\n                  Estimated Fare: <Span>${fare}</Span>\n                </Text>\n              </div>\n            )}\n          </div>\n          \n          {fare && (\n            <Button\n              type=\"submit\"\n              disabled={!fare}\n              loading={false} // isSubmitting is not defined in this component, so it's always false for now\n              fullWidth\n              size=\"lg\"\n              variant=\"primary\"\n            >\n              🚗 Book Now - ${fare}\n            </Button>\n          )}\n        </SettingSection>\n        \n        {error && (\n          <StatusMessage \n            type=\"error\" \n            message={error} \n            onDismiss={() => setError(null)}\n          />\n        )}\n        \n        {success && (\n          <StatusMessage \n            type=\"success\" \n            message={success} \n            onDismiss={() => setSuccess(null)}\n          />\n        )}\n      </Form>\n    </Container>\n  );\n}\n\nexport default function BookingForm(props: BookingFormProps) {\n  return (\n    <ToastProvider>\n      <BookingFormContent {...props} />\n    </ToastProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/book/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/booking/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/booking/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getStatusClass' is assigned a value but never used.","line":58,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'next/navigation';\nimport { UnifiedLayout } from '@/components/layout/UnifiedLayout';\nimport { \n  GridSection, \n  InfoCard, \n  ActionButtonGroup,\n  Container,\n  H3,\n  Text,\n  Span,\n  LoadingSpinner\n} from '@/components/ui';\nimport { Booking } from '@/types/booking';\n\nfunction BookingDetailsContent() {\n  const params = useParams();\n  const [booking, setBooking] = useState<Booking | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchBooking = async () => {\n      try {\n        const response = await fetch(`/api/booking/get-booking/${params.id}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch booking');\n        }\n        const data = await response.json();\n        setBooking(data);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'An error occurred');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (params.id) {\n      fetchBooking();\n    }\n  }, [params.id]);\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n        return '✅';\n      case 'cancelled':\n        return '❌';\n      case 'completed':\n        return '✅';\n      default:\n        return '⏰';\n    }\n  };\n\n  const getStatusClass = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n        return 'booking-status-confirmed';\n      case 'cancelled':\n        return 'booking-status-cancelled';\n      case 'completed':\n        return 'booking-status-completed';\n      default:\n        return 'booking-status-pending';\n    }\n  };\n\n  const formatDateTime = (dateTime: Date) => {\n    return dateTime.toLocaleString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  if (loading) {\n    return (\n      <UnifiedLayout \n        layoutType=\"standard\"\n        title=\"Loading Booking Details\"\n        subtitle=\"Please wait while we fetch your booking information\"\n      >\n        <GridSection variant=\"content\" columns={1}>\n          <InfoCard title=\"Loading...\" description=\"Fetching booking details\">\n            <Container>\n              <LoadingSpinner text=\"Loading booking details...\" />\n            </Container>\n          </InfoCard>\n        </GridSection>\n      </UnifiedLayout>\n    );\n  }\n\n  if (error || !booking) {\n    return (\n      <UnifiedLayout \n        layoutType=\"standard\"\n        title=\"Booking Not Found\"\n        subtitle=\"We couldn't find the booking you're looking for\"\n      >\n        <GridSection variant=\"content\" columns={1}>\n          <InfoCard title=\"❌ Booking Not Found\" description=\"The booking could not be found\">\n            <Container>\n              <Text>\n                {error || 'The booking you are looking for could not be found.'}\n              </Text>\n              <ActionButtonGroup buttons={[\n                {\n                  label: 'Book a New Ride',\n                  onClick: () => window.location.href = '/book',\n                  variant: 'primary' as const,\n                  icon: '🚗'\n                }\n              ]} />\n            </Container>\n          </InfoCard>\n        </GridSection>\n      </UnifiedLayout>\n    );\n  }\n\n  const actionButtons = [\n    {\n      label: 'Manage Booking',\n      onClick: () => window.location.href = `/manage/${booking.id}`,\n      variant: 'outline' as const,\n      icon: '⚙️'\n    },\n    {\n      label: 'Check Status',\n      onClick: () => window.location.href = `/status/${booking.id}`,\n      variant: 'outline' as const,\n      icon: '📊'\n    },\n    {\n      label: 'Book Another Ride',\n      onClick: () => window.location.href = '/book',\n      variant: 'primary' as const,\n      icon: '🚗'\n    }\n  ];\n\n  return (\n    <UnifiedLayout \n      layoutType=\"standard\"\n      title=\"Booking Details\"\n      subtitle={`Booking #${booking.id}`}\n    >\n      {/* Booking Status */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard \n          title={`${getStatusIcon(booking.status)} Booking Status`}\n          description={`Your booking is currently ${booking.status}`}\n        >\n          <Container>\n            {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}\n          </Container>\n        </InfoCard>\n      </GridSection>\n\n      {/* Trip Details */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard \n          title=\"📍 Trip Details\"\n          description=\"Your pickup and dropoff information\"\n        >\n          <Container>\n            <Container >\n              <Span >📍</Span>\n              <Container >\n                <H3 >Pickup Location</H3>\n                <Text >{booking.pickupLocation}</Text>\n              </Container>\n            </Container>\n            <Container >\n              <Span >🎯</Span>\n              <Container >\n                <H3 >Dropoff Location</H3>\n                <Text >{booking.dropoffLocation}</Text>\n              </Container>\n            </Container>\n            <Container >\n              <Span >📅</Span>\n              <Container >\n                <H3 >Pickup Date & Time</H3>\n                <Text >{formatDateTime(booking.pickupDateTime)}</Text>\n              </Container>\n            </Container>\n          </Container>\n        </InfoCard>\n      </GridSection>\n\n      {/* Passenger Information */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard \n          title=\"👤 Passenger Information\"\n          description=\"Your contact details for this booking\"\n        >\n          <Container>\n            <Container >\n              <Span >👤</Span>\n              <Container >\n                <H3 >Passenger</H3>\n                <Text >{booking.name}</Text>\n              </Container>\n            </Container>\n            <Container >\n              <Span >📞</Span>\n              <Container >\n                <H3 >Phone</H3>\n                <Text >{booking.phone}</Text>\n              </Container>\n            </Container>\n            <Container >\n              <Span >✉️</Span>\n              <Container >\n                <H3 >Email</H3>\n                <Text >{booking.email}</Text>\n              </Container>\n            </Container>\n          </Container>\n        </InfoCard>\n      </GridSection>\n\n      {/* Fare Information */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard \n          title=\"💰 Fare Information\"\n          description=\"Payment details for your trip\"\n        >\n          <Container>\n            <Container>\n              <Span>💳</Span>\n              <Container>\n                <H3>Total Fare</H3>\n                <Text>Includes all fees and taxes</Text>\n              </Container>\n              <Container>\n                ${booking.fare?.toFixed(2)}\n              </Container>\n            </Container>\n          </Container>\n        </InfoCard>\n      </GridSection>\n\n      {/* Actions */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard \n          title=\"🎯 Quick Actions\"\n          description=\"Manage your booking or book another ride\"\n        >\n          <ActionButtonGroup buttons={actionButtons} />\n        </InfoCard>\n      </GridSection>\n    </UnifiedLayout>\n  );\n}\n\nexport default function BookingDetailsPage() {\n  return <BookingDetailsContent />;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/cancel/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/driver/location/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/feedback/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Container' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stack' is defined but never used.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":15}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { useParams } from 'next/navigation';\nimport { UnifiedLayout } from '@/components/layout';\nimport { \n  GridSection,\n  InfoCard,\n  ActionButtonGroup,\n  Form,\n  Label,\n  Textarea,\n  Button,\n  ToastProvider,\n  Text,\n  Container\n} from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\nimport { Star } from 'lucide-react';\n\nfunction FeedbackPageContent() {\n  const params = useParams();\n  const bookingId = params.id as string;\n  const [rating, setRating] = useState(0);\n  const [comment, setComment] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (rating === 0) return;\n\n    setLoading(true);\n    try {\n      const response = await fetch('/api/feedback', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          bookingId,\n          rating,\n          comment,\n        }),\n      });\n\n      if (response.ok) {\n        setSubmitted(true);\n      } else {\n        throw new Error('Failed to submit feedback');\n      }\n    } catch (error) {\n      console.error('Error submitting feedback:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const homeActions = [\n    {\n      label: 'Book Another Ride',\n      onClick: () => window.location.href = '/book',\n      variant: 'primary' as const,\n      icon: '🚗'\n    },\n    {\n      label: 'Go Home',\n      onClick: () => window.location.href = '/',\n      variant: 'secondary' as const,\n      icon: '🏠'\n    }\n  ];\n\n  if (submitted) {\n    return (\n      <UnifiedLayout \n        layoutType=\"standard\"\n        title=\"🎉 Thank You!\"\n        subtitle=\"Your feedback has been submitted successfully\"\n      >\n        <GridSection variant=\"content\" columns={1}>\n          <InfoCard\n            title=\"✅ Feedback Submitted\"\n            description=\"We appreciate you taking the time to share your experience\"\n          >\n            <Text>Your rating and comments help us improve our service and provide the best possible experience for all our customers.</Text>\n            <ActionButtonGroup buttons={homeActions} />\n          </InfoCard>\n        </GridSection>\n      </UnifiedLayout>\n    );\n  }\n\n  return (\n    <UnifiedLayout \n      layoutType=\"standard\"\n      title=\"Leave Feedback\"\n      subtitle=\"Help us improve by sharing your experience\"\n    >\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title=\"⭐ Rate Your Experience\"\n          description=\"How was your ride with Fairfield Airport Cars?\"\n        >\n          <Form onSubmit={handleSubmit}>\n            <Text>\n              <Label htmlFor=\"rating\">\n                How was your ride?\n              </Label>\n            </Text>\n            <Text>\n              {[1, 2, 3, 4, 5].map((star) => (\n                <Button\n                  key={star}\n                  type=\"button\"\n                  onClick={() => setRating(star)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                >\n                  <Star />\n                </Button>\n              ))}\n            </Text>\n            <Text>\n              {rating === 0 && 'Click a star to rate'}\n              {rating === 1 && 'Poor'}\n              {rating === 2 && 'Fair'}\n              {rating === 3 && 'Good'}\n              {rating === 4 && 'Very Good'}\n              {rating === 5 && 'Excellent'}\n            </Text>\n\n            <Text>\n              <Label htmlFor=\"comment\">\n                Additional Comments (Optional)\n              </Label>\n            </Text>\n            <Text>\n              <Textarea\n                id=\"comment\"\n                value={comment}\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setComment(e.target.value)}\n                placeholder=\"Tell us about your experience...\"\n                rows={4}\n              />\n            </Text>\n\n            <Text>\n              <Button\n                type=\"submit\"\n                disabled={loading || rating === 0}\n                variant=\"primary\"\n                size=\"lg\"\n              >\n                {loading ? 'Submitting...' : '⭐ Submit Feedback'}\n              </Button>\n            </Text>\n          </Form>\n        </InfoCard>\n      </GridSection>\n    </UnifiedLayout>\n  );\n}\n\nexport default function FeedbackPage() {\n  return (\n    <ToastProvider>\n      <FeedbackPageContent />\n    </ToastProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/help/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/manage/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":54,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":92,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":127,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":151,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":19}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useParams, useRouter } from 'next/navigation';\nimport { UnifiedLayout } from '@/components/layout';\nimport { \n  GridSection,\n  InfoCard,\n  ActionButtonGroup,\n  ToastProvider,\n  useToast,\n  Text,\n  Span,\n  Container\n} from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\nimport { EditableInput } from '@/components/forms';\n\nfunction ManageBookingPageContent() {\n  const params = useParams();\n  const router = useRouter();\n  const { addToast } = useToast();\n  const bookingId = params.id as string;\n  \n  const [booking, setBooking] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [actionMsg, setActionMsg] = useState<string | null>(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [editMode, setEditMode] = useState(false);\n  const [localContent, setLocalContent] = useState<any>(null);\n\n  useEffect(() => {\n    const checkAdminStatus = async () => {\n      try {\n        const response = await fetch('/api/admin/check-auth');\n        if (response.ok) {\n          setIsAdmin(true);\n        }\n      } catch (error) {\n        console.error('Error checking admin status:', error);\n      }\n    };\n\n    const fetchBooking = async () => {\n      try {\n        const response = await fetch(`/api/booking/${bookingId}`);\n        if (response.ok) {\n          const data = await response.json();\n          setBooking(data);\n        } else {\n          setError('Booking not found');\n        }\n      } catch (error) {\n         \n        setError('Failed to load booking');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAdminStatus();\n    fetchBooking();\n  }, [bookingId]);\n\n  const handleFieldChange = (field: string, value: string) => {\n    setLocalContent((prev: any) => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleSave = async () => {\n    try {\n      const response = await fetch('/api/admin/cms/pages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          page: 'manage',\n          content: localContent\n        }),\n      });\n\n      if (response.ok) {\n        addToast('success', 'Content saved successfully');\n        setEditMode(false);\n      } else {\n        addToast('error', 'Failed to save content');\n      }\n    } catch (error) {\n       \n      addToast('error', 'Failed to save content');\n    }\n  };\n\n  const handleCancel = () => {\n    setEditMode(false);\n    setLocalContent(null);\n  };\n\n  const handleCancelBooking = async () => {\n    if (!confirm('Are you sure you want to cancel this booking?')) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/cancel-booking`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ bookingId: booking.id }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setBooking(data);\n        setActionMsg('Booking cancelled successfully');\n        addToast('success', 'Booking cancelled successfully');\n      } else {\n        const errorData = await response.json();\n        setActionMsg(errorData.message || 'Failed to cancel booking');\n        addToast('error', errorData.message || 'Failed to cancel booking');\n      }\n    } catch (error) {\n       \n      setActionMsg('Failed to cancel booking');\n      addToast('error', 'Failed to cancel booking');\n    }\n  };\n\n  const handleResend = async () => {\n    try {\n      const response = await fetch('/api/send-confirmation', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ bookingId: booking.id }),\n      });\n\n      if (response.ok) {\n        setActionMsg('Confirmation email sent successfully');\n        addToast('success', 'Confirmation email sent successfully');\n      } else {\n        setActionMsg('Failed to send confirmation email');\n        addToast('error', 'Failed to send confirmation email');\n      }\n    } catch (error) {\n       \n      setActionMsg('Failed to send confirmation email');\n      addToast('error', 'Failed to send confirmation email');\n    }\n  };\n\n  if (loading) {\n    return (\n      <UnifiedLayout \n        layoutType=\"standard\"\n        title=\"Loading...\"\n        subtitle=\"Please wait while we load your booking details\"\n      >\n        <GridSection variant=\"content\" columns={1}>\n          <InfoCard title=\"⏳ Loading\" description=\"Loading your booking information\">\n            <Container>\n              Loading...\n            </Container>\n          </InfoCard>\n        </GridSection>\n      </UnifiedLayout>\n    );\n  }\n\n  if (error || !booking) {\n    return (\n      <UnifiedLayout \n        layoutType=\"standard\"\n        title=\"Manage Booking\"\n        subtitle=\"Booking not found\"\n      >\n        <GridSection variant=\"content\" columns={1}>\n          <InfoCard title=\"❌ Error\" description=\"Booking could not be found\">\n            <Container>\n              <Text>\n                {error || localContent?.notFoundMessage || 'Booking not found'}\n              </Text>\n              <ActionButtonGroup buttons={[\n                {\n                  label: 'Book a New Ride',\n                  onClick: () => window.location.href = '/book',\n                  variant: 'primary' as const,\n                  icon: '🚗'\n                }\n              ]} />\n            </Container>\n          </InfoCard>\n        </GridSection>\n      </UnifiedLayout>\n    );\n  }\n\n  const actionButtons = [\n    {\n      label: localContent?.resendButton || \"Re-send Confirmation\",\n      onClick: handleResend,\n      variant: 'outline' as const,\n      icon: '📧'\n    },\n    {\n      label: localContent?.viewStatusButton || \"View Status\",\n      onClick: () => router.push(`/status/${booking.id}`),\n      variant: 'outline' as const,\n      icon: '📊'\n    }\n  ];\n\n  // Add cancel button if booking is not cancelled\n  if (booking.status !== 'cancelled') {\n    actionButtons.push({\n      label: localContent?.cancelButton || \"Cancel Ride\",\n      onClick: handleCancelBooking,\n      variant: 'outline' as const,\n      icon: '❌'\n    });\n  }\n\n  // Add pay balance button if there's a balance due\n  if (booking.balanceDue > 0 && booking.status === 'completed') {\n    actionButtons.push({\n      label: `${localContent?.payBalanceButton || \"Pay Balance\"} ($${booking.balanceDue.toFixed(2)})`,\n      onClick: async () => {\n        const res = await fetch('/api/complete-payment', { \n          method: 'POST', \n          headers: { 'Content-Type':'application/json' }, \n          body: JSON.stringify({ bookingId: booking.id })\n        });\n        if (res.ok) {\n          const { paymentLinkUrl } = await res.json();\n          window.location.href = paymentLinkUrl;\n        } else {\n          const errorMsg = localContent?.payBalanceErrorMessage || 'Failed to create balance payment link';\n          setActionMsg(errorMsg);\n          addToast('error', errorMsg);\n        }\n      },\n      variant: 'outline' as const,\n      icon: '💳'\n    });\n  }\n\n  return (\n    <UnifiedLayout \n      layoutType=\"standard\"\n      title={localContent?.title || \"Manage Your Booking\"}\n      subtitle={typeof localContent?.subtitle === 'string' && typeof booking?.id === 'string' ? localContent.subtitle.replace('{bookingId}', booking.id) : `Reference: ${booking?.id ?? ''}`}\n    >\n      {/* Admin Edit Mode Toggle */}\n      {isAdmin && (\n        <GridSection variant=\"content\" columns={1}>\n          <InfoCard title=\"🔧 Admin Controls\" description=\"Edit page content\">\n            <Container>\n              {!editMode ? (\n                <ActionButtonGroup buttons={[\n                  {\n                    label: 'Edit Mode',\n                    onClick: () => setEditMode(true),\n                    variant: 'primary' as const,\n                    icon: '✏️'\n                  }\n                ]} />\n              ) : (\n                <Container>\n                  <ActionButtonGroup buttons={[\n                    {\n                      label: 'Save Changes',\n                      onClick: handleSave,\n                      variant: 'primary' as const,\n                      icon: '💾'\n                    },\n                    {\n                      label: 'Cancel',\n                      onClick: handleCancel,\n                      variant: 'outline' as const,\n                      icon: '❌'\n                    }\n                  ]} />\n                  <Stack spacing=\"md\">\n                    <EditableInput\n                      label=\"Page Title\"\n                      value={localContent?.title || ''}\n                      onChange={(e) => handleFieldChange('title', e.target.value)}\n                    />\n                    <EditableInput\n                      label=\"Page Subtitle\"\n                      value={localContent?.subtitle || ''}\n                      onChange={(e) => handleFieldChange('subtitle', e.target.value)}\n                    />\n                    <EditableInput\n                      label=\"Resend Button Text\"\n                      value={localContent?.resendButton || ''}\n                      onChange={(e) => handleFieldChange('resendButton', e.target.value)}\n                    />\n                    <EditableInput\n                      label=\"View Status Button Text\"\n                      value={localContent?.viewStatusButton || ''}\n                      onChange={(e) => handleFieldChange('viewStatusButton', e.target.value)}\n                    />\n                    <EditableInput\n                      label=\"Cancel Button Text\"\n                      value={localContent?.cancelButton || ''}\n                      onChange={(e) => handleFieldChange('cancelButton', e.target.value)}\n                    />\n                    <EditableInput\n                      label=\"Pay Balance Button Text\"\n                      value={localContent?.payBalanceButton || ''}\n                      onChange={(e) => handleFieldChange('payBalanceButton', e.target.value)}\n                    />\n                    <EditableInput\n                      label=\"Resend Error Message\"\n                      value={localContent?.resendErrorMessage || ''}\n                      onChange={(e) => handleFieldChange('resendErrorMessage', e.target.value)}\n                    />\n                    <EditableInput\n                      label=\"Pay Balance Error Message\"\n                      value={localContent?.payBalanceErrorMessage || ''}\n                      onChange={(e) => handleFieldChange('payBalanceErrorMessage', e.target.value)}\n                    />\n                    <EditableInput\n                      label=\"Not Found Message\"\n                      value={localContent?.notFoundMessage || ''}\n                      onChange={(e) => handleFieldChange('notFoundMessage', e.target.value)}\n                    />\n                    <EditableInput\n                      label=\"Loading Message\"\n                      value={localContent?.loadingMessage || ''}\n                      onChange={(e) => handleFieldChange('loadingMessage', e.target.value)}\n                    />\n                  </Stack>\n                </Container>\n              )}\n            </Container>\n          </InfoCard>\n        </GridSection>\n      )}\n\n      {/* Booking Information */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard \n          title=\"📋 Booking Information\"\n          description=\"Your booking details and current status\"\n        >\n          <Container>\n            <Container>\n              <Span>Booking ID:</Span>\n              <Span>{booking.id}</Span>\n            </Container>\n            <Container>\n              <Span>Status:</Span>\n              <Span>\n                {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}\n              </Span>\n            </Container>\n            <Container>\n              <Span>Passenger:</Span>\n              <Span>{booking.name}</Span>\n            </Container>\n            <Container>\n              <Span>Route:</Span>\n              <Span>{booking.pickupLocation} → {booking.dropoffLocation}</Span>\n            </Container>\n            <Container>\n              <Span>Pickup Time:</Span>\n              <Span>{new Date(booking.pickupDateTime).toLocaleString()}</Span>\n            </Container>\n            <Container>\n              <Span>Total Fare:</Span>\n              <Span>${booking.fare?.toFixed(2)}</Span>\n            </Container>\n            {booking.balanceDue > 0 && (\n              <Container>\n                <Span>Balance Due:</Span>\n                <Span>${booking.balanceDue.toFixed(2)}</Span>\n              </Container>\n            )}\n          </Container>\n        </InfoCard>\n      </GridSection>\n\n      {/* Action Buttons */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard \n          title=\"🎯 Quick Actions\"\n          description=\"Manage your booking or view status\"\n        >\n          <ActionButtonGroup buttons={actionButtons} />\n        </InfoCard>\n      </GridSection>\n\n      {/* Action Messages */}\n      {actionMsg && (\n        <GridSection variant=\"content\" columns={1}>\n          <InfoCard title=\"📢 Action Result\" description=\"Result of your recent action\">\n            <Container>\n              {actionMsg}\n            </Container>\n          </InfoCard>\n        </GridSection>\n      )}\n    </UnifiedLayout>\n  );\n}\n\nexport default function ManageBookingPage() {\n  return (\n    <ToastProvider>\n      <ManageBookingPageContent />\n    </ToastProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/portal/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/privacy/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/status/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":63,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'next/navigation';\nimport { UnifiedLayout } from '@/components/layout';\nimport { \n  GridSection,\n  InfoCard,\n  ActionButtonGroup,\n  LoadingSpinner,\n  ToastProvider,\n  useToast,\n  Text,\n  Span\n} from '@/components/ui';\n\nfunction BookingStatusPageContent() {\n  const params = useParams();\n  const { addToast } = useToast();\n  const bookingId = params.id as string;\n  \n  const [status, setStatus] = useState<string>('loading');\n  const [estimatedArrival, setEstimatedArrival] = useState<Date | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showDetails, setShowDetails] = useState(false);\n\n  const getStatusText = (status: any) => {\n    const statusMap: { [key: string]: string } = {\n      'confirmed': 'Confirmed',\n      'en-route': 'En Route',\n      'arrived': 'Arrived',\n      'completed': 'Completed',\n      'cancelled': 'Cancelled',\n      'loading': 'Loading'\n    };\n    return statusMap[status] || 'Unknown';\n  };\n\n  const getStatusIcon = (status: any) => {\n    const iconMap: { [key: string]: string } = {\n      'confirmed': '✅',\n      'en-route': '🚗',\n      'arrived': '📍',\n      'completed': '🏁',\n      'cancelled': '❌',\n      'loading': '⏳'\n    };\n    return iconMap[status] || '❓';\n  };\n\n  useEffect(() => {\n    const fetchStatus = async () => {\n      try {\n        const response = await fetch(`/api/booking/${bookingId}/status`);\n        if (response.ok) {\n          const data = await response.json();\n          setStatus(data.status);\n          setEstimatedArrival(data.estimatedArrival ? new Date(data.estimatedArrival) : null);\n        } else {\n          setError('Failed to load booking status');\n        }\n      } catch (error) {\n         \n        setError('Network error');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchStatus();\n  }, [bookingId]);\n\n  const quickActions = [\n    {\n      label: 'Manage Booking',\n      onClick: () => window.location.href = `/manage/${bookingId}`,\n      variant: 'primary' as const,\n      icon: '📋'\n    },\n    {\n      label: 'Contact Driver',\n      onClick: () => addToast('info', 'Driver contact feature coming soon'),\n      variant: 'outline' as const,\n      icon: '📞'\n    },\n    {\n      label: 'Get Support',\n      onClick: () => addToast('info', 'Support: (203) 555-0123'),\n      variant: 'outline' as const,\n      icon: '🆘'\n    }\n  ];\n\n  if (loading) {\n    return (\n      <UnifiedLayout \n        layoutType=\"status\"\n        title=\"Booking Status\"\n        subtitle=\"Track your ride\"\n      >\n        <GridSection variant=\"content\" columns={1}>\n          <InfoCard\n            title=\"📋 Loading Booking Status\"\n            description=\"Retrieving your booking information...\"\n          >\n            <LoadingSpinner />\n            <Text>Please wait while we fetch your booking details...</Text>\n          </InfoCard>\n        </GridSection>\n      </UnifiedLayout>\n    );\n  }\n\n  if (error) {\n    return (\n      <UnifiedLayout \n        layoutType=\"status\"\n        title=\"Booking Status\"\n        subtitle=\"Track your ride\"\n      >\n        <GridSection variant=\"content\" columns={1}>\n          <InfoCard\n            title=\"❌ Unable to Load Booking\"\n            description=\"We couldn't retrieve your booking information\"\n          >\n            <Text>This could be due to an invalid booking ID or a temporary system issue.</Text>\n            <ActionButtonGroup buttons={[\n              {\n                label: 'Try Again',\n                onClick: () => window.location.reload(),\n                variant: 'primary',\n                icon: '🔄'\n              },\n              {\n                label: 'Contact Support',\n                onClick: () => addToast('info', 'Support: (203) 555-0123'),\n                variant: 'outline',\n                icon: '📞'\n              }\n            ]} />\n          </InfoCard>\n        </GridSection>\n      </UnifiedLayout>\n    );\n  }\n\n  return (\n    <UnifiedLayout \n      layoutType=\"status\"\n      title=\"Booking Status\"\n      subtitle={`Tracking booking #${bookingId}`}\n    >\n      {/* Current Status */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title={`${getStatusIcon(status)} Current Status: ${getStatusText(status)}`}\n          description=\"Live tracking of your airport transportation\"\n        >\n          <Text>\n            {getStatusText(status) === 'confirmed' && 'Your ride is confirmed and driver assigned'}\n            {getStatusText(status) === 'en-route' && 'Your driver is on the way to pick you up'}\n            {getStatusText(status) === 'arrived' && 'Your driver has arrived at the pickup location'}\n            {getStatusText(status) === 'completed' && 'Your ride has been completed successfully'}\n            {getStatusText(status) === 'cancelled' && 'This booking has been cancelled'}\n            {getStatusText(status) === 'Unknown' && 'We are processing your booking request'}\n          </Text>\n\n          {estimatedArrival && (\n            <Text>\n              <strong>⏰ Estimated Arrival:</strong> {estimatedArrival ? estimatedArrival.toString() : 'Calculating...'}\n            </Text>\n          )}\n        </InfoCard>\n      </GridSection>\n\n      {/* Quick Actions */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title=\"🎯 Quick Actions\"\n          description=\"Manage your booking and get assistance\"\n        >\n          <ActionButtonGroup buttons={quickActions} />\n        </InfoCard>\n      </GridSection>\n\n      {/* Booking Details Toggle */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title=\"📋 Booking Information\"\n          description=\"View complete booking details and timeline\"\n        >\n          <Text>\n            <button\n              onClick={() => setShowDetails(!showDetails)}\n              \n            >\n              {showDetails ? 'Hide' : 'Show'} Booking Details\n            </button>\n          </Text>\n\n          {showDetails && (\n            <Text>\n              <strong>Booking ID:</strong> {bookingId}<br />\n              <strong>Status:</strong> {getStatusText(status)}<br />\n              {estimatedArrival && (\n                <>\n                  <strong>Estimated Arrival:</strong> {estimatedArrival ? estimatedArrival.toString() : 'Calculating...'}<br />\n                </>\n              )}\n              <strong>Support:</strong> (203) 555-0123\n            </Text>\n          )}\n        </InfoCard>\n      </GridSection>\n\n      {/* Status Timeline */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title=\"📈 Booking Timeline\"\n          description=\"Track the progress of your ride\"\n        >\n          <Text>\n            {[\n              { status: 'confirmed', label: 'Booking Confirmed', icon: '✅' },\n              { status: 'en-route', label: 'Driver En Route', icon: '🚗' },\n              { status: 'arrived', label: 'Driver Arrived', icon: '📍' },\n              { status: 'completed', label: 'Trip Completed', icon: '🏁' }\n            ].map((step) => (\n              <Span key={step.status}>\n                {step.icon} {step.label}\n                {getStatusText(status) === step.status && ' (Current)'}\n                <br />\n              </Span>\n            ))}\n          </Text>\n        </InfoCard>\n      </GridSection>\n    </UnifiedLayout>\n  );\n}\n\nexport default function BookingStatusPage() {\n  return (\n    <ToastProvider>\n      <BookingStatusPageContent />\n    </ToastProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/success/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchBookingDetails'. Either include it or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [bookingId, fetchBookingDetails]","fix":{"range":[1207,1218],"text":"[bookingId, fetchBookingDetails]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport { UnifiedLayout } from '@/components/layout';\nimport { \n  GridSection,\n  InfoCard,\n  ActionButtonGroup,\n  LoadingSpinner,\n  Text\n} from '@/components/ui';\nimport { Booking } from '@/types/booking';\n\nfunction SuccessPageContent() {\n  const searchParams = useSearchParams();\n  const bookingId = searchParams.get('bookingId');\n  const [booking, setBooking] = useState<Booking | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchBookingDetails = async () => {\n    if (!bookingId) {\n      setError('No booking ID provided');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/booking/${bookingId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch booking details');\n      }\n      const data = await response.json();\n      setBooking(data);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load booking');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchBookingDetails();\n  }, [bookingId]);\n\n  const successActions = [\n    {\n      label: 'Book Another Ride',\n      onClick: () => window.location.href = '/book',\n      variant: 'primary' as const,\n      icon: '🚗'\n    },\n    {\n      label: 'View My Booking',\n      onClick: () => window.location.href = `/booking/${bookingId}`,\n      variant: 'secondary' as const,\n      icon: '📋'\n    },\n    {\n      label: 'Contact Support',\n      onClick: () => window.location.href = '/help',\n      variant: 'outline' as const,\n      icon: '💬'\n    }\n  ];\n\n  if (loading) {\n    return (\n      <UnifiedLayout \n        layoutType=\"status\"\n        title=\"Loading...\"\n        subtitle=\"Please wait while we load your booking details\"\n      >\n        <GridSection variant=\"content\" columns={1}>\n          <InfoCard\n            title=\"Loading...\"\n            description=\"Loading your booking details...\"\n          >\n            <LoadingSpinner size=\"lg\" />\n          </InfoCard>\n        </GridSection>\n      </UnifiedLayout>\n    );\n  }\n\n  return (\n    <UnifiedLayout \n      layoutType=\"status\"\n      title=\"🎉 Booking Confirmed!\"\n      subtitle={booking?.depositPaid ? \"Payment successful - You're all set!\" : \"Your booking is confirmed\"}\n    >\n      {error && (\n        <GridSection variant=\"content\" columns={1}>\n          <InfoCard\n            title=\"⚠️ Error Loading Booking\"\n            description={error}\n          >\n            <Text>Please try refreshing the page or contact support if the problem persists.</Text>\n          </InfoCard>\n        </GridSection>\n      )}\n\n      {/* Success Message */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title={booking?.depositPaid ? \"✅ Payment Successful!\" : \"📝 Booking Created!\"}\n          description={booking?.depositPaid \n            ? \"Your deposit has been processed and your ride is confirmed\"\n            : \"Your booking has been created. Payment can be completed before your ride\"\n          }\n        >\n          <ActionButtonGroup buttons={successActions} />\n        </InfoCard>\n      </GridSection>\n\n      {/* Booking Details */}\n      {booking && (\n        <GridSection variant=\"content\" columns={2}>\n          <InfoCard\n            title=\"🚗 Trip Details\"\n            description=\"Your journey information\"\n          >\n            <Text><strong>From:</strong> {booking.pickupLocation}</Text>\n            <Text><strong>To:</strong> {booking.dropoffLocation}</Text>\n            <Text><strong>When:</strong> {new Date(booking.pickupDateTime).toLocaleString()}</Text>\n            <Text><strong>Passengers:</strong> {booking.passengers}</Text>\n          </InfoCard>\n          \n          <InfoCard\n            title=\"💰 Payment Status\"\n            description=\"Your payment information\"\n          >\n            <Text><strong>Total Fare:</strong> ${booking.fare}</Text>\n            <Text><strong>Deposit:</strong> ${booking.depositAmount} {booking.depositPaid ? '✅ Paid' : '⏳ Pending'}</Text>\n            <Text><strong>Balance Due:</strong> ${booking.balanceDue || 0}</Text>\n          </InfoCard>\n        </GridSection>\n      )}\n\n      {/* Next Steps */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title=\"📋 What Happens Next?\"\n          description=\"Here's what you can expect from us\"\n        >\n          <ul>\n            <li>📧 You&apos;ll receive a confirmation email with all booking details</li>\n            <li>📱 We&apos;ll send you SMS updates about your driver and pickup time</li>\n            <li>👨‍💼 Your driver will contact you 30 minutes before pickup</li>\n            <li>✈️ We monitor your flight for any delays or changes</li>\n          </ul>\n\n          <ActionButtonGroup buttons={successActions} />\n        </InfoCard>\n      </GridSection>\n\n      {/* Emergency Contact */}\n      <GridSection variant=\"content\" columns={1}>\n        <InfoCard\n          title=\"🆘 Need Help?\"\n          description=\"Contact us anytime if you have questions or need to make changes\"\n        >\n          <Text>📞 (203) 555-0123</Text>\n          <Text>Save this number! Our drivers are available to assist you.</Text>\n        </InfoCard>\n      </GridSection>\n    </UnifiedLayout>\n  );\n}\n\nexport default SuccessPageContent;\n","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/app/terms/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/Logo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/admin/AdminHamburgerMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/admin/AdminNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/admin/AdminProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/admin/CommentIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/admin/CommentWidgetWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/admin/CommentWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/admin/CommentableSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/admin/DraggableCommentSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/admin/EditModeProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/admin/EditModeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/admin/EditableField.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'size' is assigned a value but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sizeClasses' is assigned a value but never used.","line":31,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'inputSizeClasses' is assigned a value but never used.","line":38,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":25}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Input, Label } from '@/components/ui';\nimport { Textarea } from '@/components/ui';\nimport { useEditMode } from './EditModeProvider';\n\ninterface EditableFieldProps {\n  value: string;\n  onChange: (value: string) => void;\n  label?: string;\n  placeholder?: string;\n  className?: string;\n  type?: 'input' | 'textarea';\n  rows?: number;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n}\n\nexport const EditableField: React.FC<EditableFieldProps> = ({\n  value,\n  onChange,\n  label,\n  placeholder,\n  className = '',\n  type = 'input',\n  rows = 3,\n  size = 'md'\n}) => {\n  const { editMode } = useEditMode();\n\n  const sizeClasses = {\n    sm: 'text-sm',\n    md: 'text-base',\n    lg: 'text-lg',\n    xl: 'text-xl'\n  };\n\n  const inputSizeClasses = {\n    sm: 'h-8 px-3',\n    md: 'h-10 px-4',\n    lg: 'h-12 px-4',\n    xl: 'h-14 px-4'\n  };\n\n  if (editMode) {\n    return (\n      <div>\n        {label && (\n          <Label>\n            {label}\n          </Label>\n        )}\n        {type === 'textarea' ? (\n          <Textarea\n            value={value}\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => onChange(e.target.value)}\n            placeholder={placeholder}\n            className={className}\n            rows={rows}\n          />\n        ) : (\n          <Input\n            value={value}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => onChange(e.target.value)}\n            placeholder={placeholder}\n            className={className}\n          />\n        )}\n      </div>\n    );\n  }\n\n  // Display mode\n  if (type === 'textarea') {\n    // Check if the content contains HTML tags\n    const containsHTML = /<[^>]*>/.test(value);\n    \n    if (containsHTML) {\n      return (\n        <div \n          className={className}\n          dangerouslySetInnerHTML={{ __html: value || placeholder || '' }}\n        />\n      );\n    }\n    \n    return (\n      <div className={className}>\n        {value || placeholder}\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      {value || placeholder}\n    </div>\n  );\n};\n\n// Specialized components for common use cases\nexport const EditableTitle: React.FC<Omit<EditableFieldProps, 'type' | 'size'>> = (props) => (\n  <EditableField {...props} type=\"input\" size=\"xl\" />\n);\n\nexport const EditableSubtitle: React.FC<Omit<EditableFieldProps, 'type' | 'size'>> = (props) => (\n  <EditableField {...props} type=\"input\" size=\"lg\" />\n);\n\nexport const EditableContent: React.FC<Omit<EditableFieldProps, 'type' | 'size'> & { rows?: number }> = (props) => (\n  <EditableField {...props} type=\"textarea\" size=\"md\" />\n);\n\nexport const EditableLabel: React.FC<Omit<EditableFieldProps, 'type' | 'size'>> = (props) => (\n  <EditableField {...props} type=\"input\" size=\"md\" />\n); ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/admin/GlobalCommentWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/admin/PageCommentWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'H3' is defined but never used.","line":9,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'H4' is defined but never used.","line":9,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getPriorityColor' is assigned a value but never used.","line":118,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":118,"endColumn":25}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardBody, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Textarea } from '@/components/ui';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui';\nimport { Container, Text, H3, H4 } from '@/components/ui';\nimport { feedbackService, type PageComment } from '@/lib/services/feedback-service';\nimport { MessageSquare, X, CheckCircle, AlertCircle, Star } from 'lucide-react';\n\ninterface PageCommentWidgetProps {\n  pageUrl: string;\n  pageTitle: string;\n  isAdmin?: boolean;\n}\n\nconst PageCommentWidget = ({ pageUrl, pageTitle, isAdmin = false }: PageCommentWidgetProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [comment, setComment] = useState('');\n  const [category, setCategory] = useState<PageComment['category']>('general');\n  const [priority, setPriority] = useState<PageComment['priority']>('medium');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [selectedElement, setSelectedElement] = useState<string>('');\n  const [isElementSelectMode, setIsElementSelectMode] = useState(false);\n  const widgetRef = useRef<HTMLDivElement>(null);\n\n  // Handle element selection mode\n  useEffect(() => {\n    if (isElementSelectMode) {\n      const handleClick = (e: MouseEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        \n        const target = e.target as HTMLElement;\n        if (target && target !== widgetRef.current && !widgetRef.current?.contains(target)) {\n          const selector = generateSelector(target);\n          setSelectedElement(selector);\n          setIsElementSelectMode(false);\n          \n          // Remove highlight\n          document.querySelectorAll('.comment-highlight').forEach(el => {\n            el.classList.remove('comment-highlight');\n          });\n        }\n      };\n\n      document.addEventListener('click', handleClick);\n      return () => document.removeEventListener('click', handleClick);\n    }\n  }, [isElementSelectMode]);\n\n  const generateSelector = (element: HTMLElement): string => {\n    if (element.id) {\n      return `#${element.id}`;\n    }\n    if (element.className) {\n      const classes = element.className.split(' ').filter(c => c).join('.');\n      return `.${classes}`;\n    }\n    return element.tagName.toLowerCase();\n  };\n\n  const handleElementSelect = () => {\n    setIsElementSelectMode(true);\n    // Add highlight class to all clickable elements\n    document.querySelectorAll('*').forEach(el => {\n      if (el instanceof HTMLElement && el.offsetWidth > 0 && el.offsetHeight > 0) {\n        el.classList.add('comment-highlight');\n      }\n    });\n  };\n\n  const handleSubmit = async () => {\n    if (!comment.trim()) return;\n\n    setIsSubmitting(true);\n    try {\n      await feedbackService.addComment({\n        pageUrl,\n        pageTitle,\n        elementSelector: selectedElement,\n        comment: comment.trim(),\n        category,\n        priority,\n        status: 'open',\n        createdBy: 'admin@fairfieldairportcars.com', // Gregg's email\n        userAgent: navigator.userAgent\n      });\n\n      setComment('');\n      setCategory('general');\n      setPriority('medium');\n      setSelectedElement('');\n      setShowSuccess(true);\n      setIsOpen(false);\n\n      setTimeout(() => setShowSuccess(false), 3000);\n    } catch (error) {\n      console.error('Error submitting comment:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const getCategoryIcon = (cat: string) => {\n    switch (cat) {\n      case 'bug': return <AlertCircle  />;\n      case 'design': return <Star  />;\n      case 'copy': return <MessageSquare  />;\n      case 'feature': return <CheckCircle  />;\n      default: return <MessageSquare  />;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'bg-red-100 text-red-800';\n      case 'high': return 'bg-orange-100 text-orange-800';\n      case 'medium': return 'bg-warning text-warning-dark';\n      case 'low': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (!isAdmin) return null;\n\n  return (\n    <>\n      {/* Floating Comment Button */}\n      <Container>\n        <Button\n          onClick={() => setIsOpen(!isOpen)}\n          aria-label=\"Add page comment\"\n        >\n          <MessageSquare />\n        </Button>\n      </Container>\n\n      {/* Comment Widget */}\n      {isOpen && (\n        <Container>\n          <Container>\n            <Card>\n              <CardHeader>\n                <CardTitle>Add Page Comment</CardTitle>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsOpen(false)}\n                >\n                  <X />\n                </Button>\n              </CardHeader>\n              <CardBody>\n                <Container>\n                  <Text size=\"sm\">\n                    Page: {pageTitle}\n                  </Text>\n                </Container>\n\n                {/* Element Selection */}\n                <Container>\n                  <Text size=\"sm\">\n                    Element (Optional)\n                  </Text>\n                  <Container>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={handleElementSelect}\n                      disabled={isElementSelectMode}\n                    >\n                      {selectedElement ? 'Change Element' : 'Select Element'}\n                    </Button>\n                    {selectedElement && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setSelectedElement('')}\n                      >\n                        Clear\n                      </Button>\n                    )}\n                  </Container>\n                  {selectedElement && (\n                    <Text size=\"sm\">\n                      Selected: {selectedElement}\n                    </Text>\n                  )}\n                  {isElementSelectMode && (\n                    <Text size=\"sm\">\n                      Click on any element to select it\n                    </Text>\n                  )}\n                </Container>\n\n                {/* Category */}\n                <Container>\n                  <Text size=\"sm\">\n                    Category\n                  </Text>\n                  <Select value={category} onValueChange={(value: PageComment['category']) => setCategory(value)}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"general\">\n                        <Container>\n                          <MessageSquare />\n                          <Text>General</Text>\n                        </Container>\n                      </SelectItem>\n                      <SelectItem value=\"bug\">\n                        <Container>\n                          <AlertCircle />\n                          <Text>Bug</Text>\n                        </Container>\n                      </SelectItem>\n                      <SelectItem value=\"design\">\n                        <Container>\n                          <Star />\n                          <Text>Design</Text>\n                        </Container>\n                      </SelectItem>\n                      <SelectItem value=\"copy\">\n                        <Container>\n                          <MessageSquare />\n                          <Text>Copy/Text</Text>\n                        </Container>\n                      </SelectItem>\n                      <SelectItem value=\"feature\">\n                        <Container>\n                          <CheckCircle />\n                          <Text>Feature Request</Text>\n                        </Container>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </Container>\n\n                {/* Priority */}\n                <Container>\n                  <Text size=\"sm\">\n                    Priority\n                  </Text>\n                  <Select value={priority} onValueChange={(value: PageComment['priority']) => setPriority(value)}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </Container>\n\n                {/* Comment */}\n                <Container>\n                  <Text size=\"sm\">\n                    Comment\n                  </Text>\n                  <Textarea\n                    value={comment}\n                    onChange={(e) => setComment(e.target.value)}\n                    placeholder=\"Describe what you'd like to change or improve...\"\n                    rows={4}\n                  />\n                </Container>\n\n                {/* Preview */}\n                {comment && (\n                  <Container>\n                    <Container>\n                      {getCategoryIcon(category)}\n                      <Badge>\n                        {priority}\n                      </Badge>\n                    </Container>\n                    <Text>{comment}</Text>\n                  </Container>\n                )}\n\n                {/* Submit Button */}\n                <Container>\n                  <Button\n                    onClick={handleSubmit}\n                    disabled={!comment.trim() || isSubmitting}\n                  >\n                    {isSubmitting ? 'Submitting...' : 'Submit Comment'}\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setIsOpen(false)}\n                    disabled={isSubmitting}\n                  >\n                    Cancel\n                  </Button>\n                </Container>\n              </CardBody>\n            </Card>\n          </Container>\n        </Container>\n      )}\n\n      {/* Success Message */}\n      {showSuccess && (\n        <div>\n          <div>\n            <CheckCircle />\n            <span>Comment submitted successfully!</span>\n          </div>\n        </div>\n      )}\n      \n\n      {/* Element Selection Styles */}\n      <style jsx global>{`\n        .comment-highlight {\n          cursor: pointer !important;\n          outline: 2px solid #3b82f6 !important;\n          outline-offset: 2px !important;\n          transition: outline 0.2s ease !important;\n        }\n        .comment-highlight:hover {\n          outline: 2px solid #1d4ed8 !important;\n          background-color: rgba(59, 130, 246, 0.1) !important;\n        }\n      `}</style>\n    </>\n  );\n};\n\nexport default PageCommentWidget; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/admin/SimpleCommentSystem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getStatusColor' is assigned a value but never used.","line":195,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":195,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect, useRef, ReactNode } from 'react';\nimport { X, CheckCircle, Clock } from 'lucide-react';\nimport { useAdmin } from './AdminProvider';\nimport { confluenceCommentsService, type ConfluenceComment } from '@/lib/business/confluence-comments';\nimport { Textarea, Select, Option, Container } from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\n\ninterface SimpleCommentSystemProps {\n  children: ReactNode;\n}\n\nconst SimpleCommentSystem = ({ children }: SimpleCommentSystemProps) => {\n  const { isAdmin, commentMode } = useAdmin();\n  const [comments, setComments] = useState<ConfluenceComment[]>([]);\n  const [activeCommentBox, setActiveCommentBox] = useState<string | null>(null);\n  const [commentText, setCommentText] = useState('');\n  const [selectedElement, setSelectedElement] = useState<HTMLElement | null>(null);\n  const commentBoxRef = useRef<HTMLDivElement>(null);\n\n  // Load comments from Firebase\n  useEffect(() => {\n    if (isAdmin) {\n      loadComments();\n    }\n  }, [isAdmin]);\n\n  const loadComments = async () => {\n    try {\n      const commentsData = await confluenceCommentsService.getComments();\n      setComments(commentsData);\n    } catch (error) {\n      console.error('Error loading comments:', error);\n    }\n  };\n\n  // Handle left-click on any element (Confluence-style)\n  useEffect(() => {\n    if (!isAdmin || !commentMode) return;\n\n    const handleClick = (e: MouseEvent) => {\n      // Prevent default behavior when comment mode is active\n      e.preventDefault();\n      e.stopPropagation();\n\n      const target = e.target as HTMLElement;\n      if (!target) return;\n\n      // Comprehensive exclusion of comment-related elements\n      const isCommentElement = \n        target.closest('.comment-box') ||\n        target.closest('.comment-icon') ||\n        target.closest('.simple-comment-icon') ||\n        target.closest('.comment-highlight') ||\n        target.closest('.commentable-section') ||\n        target.closest('[data-comment-id]') ||\n        target.closest('.comment-mode-active') ||\n        target.closest('[class*=\"comment\"]') || // Any class containing \"comment\"\n        target.closest('button') || // Exclude all buttons\n        target.closest('a') || // Exclude all links\n        target.closest('input') || // Exclude all inputs\n        target.closest('textarea') || // Exclude all textareas\n        target.closest('select') || // Exclude all selects\n        target.closest('form'); // Exclude all forms\n\n      if (isCommentElement) {\n        console.log('🔒 CommentSystem - Skipping comment element:', target.tagName, target.className);\n        return;\n      }\n\n      // Generate unique ID for the element\n      const elementId = generateElementId(target);\n      const elementText = target.textContent?.trim() || target.tagName.toLowerCase();\n      \n      console.log('💬 CommentSystem - Adding comment to element:', elementText);\n      \n      setSelectedElement(target);\n      setActiveCommentBox(elementId);\n      setCommentText('');\n    };\n\n    document.addEventListener('click', handleClick);\n    return () => document.removeEventListener('click', handleClick);\n  }, [isAdmin, commentMode]);\n\n  // Close comment box when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (e: MouseEvent) => {\n      if (commentBoxRef.current && !commentBoxRef.current.contains(e.target as Node)) {\n        setActiveCommentBox(null);\n        setSelectedElement(null);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const generateElementId = (element: HTMLElement): string => {\n    // Create a unique ID based on element properties\n    const tagName = element.tagName.toLowerCase();\n    const className = element.className || '';\n    const textContent = element.textContent?.slice(0, 20) || '';\n    const hash = btoa(`${tagName}-${className}-${textContent}`).replace(/[^a-zA-Z0-9]/g, '');\n    return `comment-${hash}`;\n  };\n\n  const generateElementSelector = (element: HTMLElement): string => {\n    // Generate a CSS selector for the element\n    if (element.id) {\n      return `#${element.id}`;\n    }\n    if (element.className && typeof element.className === 'string') {\n      const classes = element.className.split(' ').filter(c => c).join('.');\n      return `.${classes}`;\n    }\n    return element.tagName.toLowerCase();\n  };\n\n  const handleAddComment = async () => {\n    if (!commentText.trim() || !selectedElement) return;\n\n    const elementId = generateElementId(selectedElement);\n    const elementText = selectedElement.textContent?.trim() || selectedElement.tagName.toLowerCase();\n    const elementSelector = generateElementSelector(selectedElement);\n    \n    try {\n      await confluenceCommentsService.addComment({\n        elementId,\n        elementText,\n        elementSelector,\n        pageUrl: window.location.pathname,\n        pageTitle: document.title,\n        comment: commentText.trim(),\n        status: 'open',\n        createdBy: 'admin@fairfieldairportcar.com'\n      });\n\n      await loadComments(); // Reload comments from Firebase\n      setActiveCommentBox(null);\n      setSelectedElement(null);\n      setCommentText('');\n    } catch (error) {\n      console.error('Error adding comment:', error);\n    }\n  };\n\n  const handleEditComment = async (commentId: string, newText: string) => {\n    try {\n      await confluenceCommentsService.updateComment(commentId, { comment: newText });\n      await loadComments(); // Reload comments from Firebase\n    } catch (error) {\n      console.error('Error updating comment:', error);\n    }\n  };\n\n  const handleStatusChange = async (commentId: string, newStatus: ConfluenceComment['status']) => {\n    try {\n      await confluenceCommentsService.updateComment(commentId, { status: newStatus });\n      await loadComments(); // Reload comments from Firebase\n    } catch (error) {\n      console.error('Error updating comment status:', error);\n    }\n  };\n\n  const handleDeleteComment = async (commentId: string) => {\n    try {\n      await confluenceCommentsService.deleteComment(commentId);\n      await loadComments(); // Reload comments from Firebase\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n    }\n  };\n\n  const getExistingComments = (elementId: string) => {\n    return comments.filter(comment => comment.elementId === elementId);\n  };\n\n  const existingComments = selectedElement ? getExistingComments(generateElementId(selectedElement)) : [];\n\n  const getStatusIcon = (status: ConfluenceComment['status']) => {\n    switch (status) {\n      case 'open':\n        return <Clock  />;\n      case 'in-progress':\n        return <Clock  />;\n      case 'resolved':\n        return <CheckCircle  />;\n      default:\n        return <Clock  />;\n    }\n  };\n\n  const getStatusColor = (status: ConfluenceComment['status']) => {\n    switch (status) {\n      case 'open':\n        return 'bg-orange-100 text-orange-800';\n      case 'in-progress':\n        return 'bg-blue-100 text-blue-800';\n      case 'resolved':\n        return 'bg-green-100 text-green-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  // Add comment icons to elements with comments\n  useEffect(() => {\n    if (!isAdmin) return;\n\n    // Remove existing comment icons\n    document.querySelectorAll('.simple-comment-icon').forEach(el => el.remove());\n\n    // Add comment icons for elements with comments\n    comments.forEach(comment => {\n      // Try to find the element by various selectors\n      let targetElement: HTMLElement | null = null;\n      \n      // First try to find by data attribute\n      targetElement = document.querySelector(`[data-comment-id=\"${comment.elementId}\"]`) as HTMLElement;\n      \n      // If not found, try to find by text content (approximate match)\n      if (!targetElement) {\n        const allElements = document.querySelectorAll('*');\n        for (const element of allElements) {\n          if (element instanceof HTMLElement && \n              element.textContent?.trim() === comment.elementText) {\n            targetElement = element;\n            break;\n          }\n        }\n      }\n      \n      // If still not found, try to find by partial text match\n      if (!targetElement) {\n        const allElements = document.querySelectorAll('*');\n        for (const element of allElements) {\n          if (element instanceof HTMLElement && \n              element.textContent?.includes(comment.elementText.slice(0, 10))) {\n            targetElement = element;\n            break;\n          }\n        }\n      }\n\n      if (targetElement) {\n        // Add data attribute for future reference\n        targetElement.setAttribute('data-comment-id', comment.elementId);\n        \n        // Ensure the element has relative positioning\n        if (getComputedStyle(targetElement).position === 'static') {\n          targetElement.style.position = 'relative';\n        }\n\n        const icon = document.createElement('div');\n        icon.className = 'simple-comment-icon absolute top-1 right-1 z-50 cursor-pointer';\n        \n        // Determine icon color based on comment status\n        const commentStatuses = comments.filter(c => c.elementId === comment.elementId).map(c => c.status);\n        const hasOpen = commentStatuses.includes('open');\n        const hasInProgress = commentStatuses.includes('in-progress');\n        const hasResolved = commentStatuses.includes('resolved');\n        \n        let iconColor = 'bg-blue-500 hover:bg-blue-600';\n        if (hasOpen) {\n          iconColor = 'bg-red-500 hover:bg-red-600';\n        } else if (hasInProgress) {\n          iconColor = 'bg-yellow-500 hover:bg-yellow-600';\n        } else if (hasResolved) {\n          iconColor = 'bg-green-500 hover:bg-green-600';\n        }\n        \n        icon.innerHTML = `\n          <div class=\"${iconColor} text-white rounded-full w-5 h-5 flex items-center justify-center text-xs shadow-lg transition-colors\">\n            💬\n          </div>\n        `;\n        icon.onclick = (e) => {\n          e.stopPropagation();\n          setSelectedElement(targetElement);\n          setActiveCommentBox(comment.elementId);\n          setCommentText('');\n        };\n        \n        // Remove any existing icon for this element\n        targetElement.querySelectorAll('.simple-comment-icon').forEach(el => el.remove());\n        targetElement.appendChild(icon);\n      }\n    });\n  }, [comments, isAdmin]);\n\n  if (!isAdmin) {\n    return <>{children}</>;\n  }\n\n  return (\n    <>\n      {children}\n\n      {/* Comment Box */}\n      {activeCommentBox && selectedElement && (\n        <Container\n          ref={commentBoxRef}\n          style={{\n            top: selectedElement.getBoundingClientRect().top - 10,\n            left: selectedElement.getBoundingClientRect().right + 10,\n          }}\n        >\n          <Stack direction=\"horizontal\" align=\"center\" justify=\"between\">\n            <h4>\n              {existingComments.length > 0 ? `Comments (${existingComments.length})` : 'Add Comment'}\n            </h4>\n            <button\n              onClick={() => {\n                setActiveCommentBox(null);\n                setSelectedElement(null);\n              }}\n            >\n              <X />\n            </button>\n          </Stack>\n          \n          <Container>\n            <strong>Element:</strong> {selectedElement.textContent?.slice(0, 50) || selectedElement.tagName.toLowerCase()}\n          </Container>\n          \n          {/* Existing Comments */}\n          {existingComments.length > 0 && (\n            <Stack spacing=\"md\">\n              {existingComments.map(comment => (\n                <Container key={comment.id}>\n                  <Stack direction=\"horizontal\" align=\"center\" justify=\"between\">\n                    <Container>\n                      {getStatusIcon(comment.status)}\n                      <span>\n                        {comment.status}\n                      </span>\n                    </Container>\n                    <button\n                      onClick={() => handleDeleteComment(comment.id)}\n                    >\n                      <X />\n                    </button>\n                  </Stack>\n                  \n                  <Textarea\n                    value={comment.comment}\n                    onChange={(e) => handleEditComment(comment.id, e.target.value)}\n                    rows={2}\n                  />\n                  \n                  <Container>\n                    <Select\n                      value={comment.status}\n                      onChange={(e: React.ChangeEvent<HTMLSelectElement>) => handleStatusChange(comment.id, e.target.value as ConfluenceComment['status'])}\n                    >\n                      <Option value=\"open\">Open</Option>\n                      <Option value=\"in-progress\">In Progress</Option>\n                      <Option value=\"resolved\">Resolved</Option>\n                    </Select>\n                  </Container>\n                </Container>\n              ))}\n            </Stack>\n          )}\n          \n          {/* New Comment Input */}\n          <Container>\n            <Textarea\n              value={commentText}\n              onChange={(e) => setCommentText(e.target.value)}\n              placeholder=\"Add a new comment...\"\n              rows={3}\n              autoFocus\n            />\n            \n            <Stack direction=\"horizontal\" spacing=\"sm\">\n              <button\n                onClick={handleAddComment}\n                disabled={!commentText.trim()}\n              >\n                Add Comment\n              </button>\n              <button\n                onClick={() => {\n                  setActiveCommentBox(null);\n                  setSelectedElement(null);\n                }}\n              >\n                Close\n              </button>\n            </Stack>\n          </Container>\n        </Container>\n      )}\n\n      {/* Global Styles */}\n      <style jsx global>{`\n        .simple-comment-icon {\n          transition: all 0.2s ease;\n        }\n        \n        .simple-comment-icon:hover {\n          transform: scale(1.1);\n        }\n        \n        .comment-mode-active * {\n          cursor: pointer !important;\n        }\n        \n        .comment-mode-active *:hover {\n          outline: 2px dashed #3b82f6 !important;\n          outline-offset: 1px !important;\n          background-color: rgba(59, 130, 246, 0.05) !important;\n        }\n        \n        .comment-mode-active *:hover::after {\n          content: \"💬\";\n          position: absolute;\n          top: 2px;\n          right: 2px;\n          background: #3b82f6;\n          color: white;\n          border-radius: 50%;\n          width: 16px;\n          height: 16px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 8px;\n          z-index: 50;\n        }\n      `}</style>\n    </>\n  );\n};\n\nexport default SimpleCommentSystem; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/admin/TestCommentWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/admin/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/booking/BookingCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Span' is defined but never used.","line":7,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getStatusColor' is assigned a value but never used.","line":23,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":23}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Calendar, Clock, MapPin, DollarSign } from 'lucide-react';\nimport { Booking } from '@/types/booking';\nimport { Badge } from '@/components/ui';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils/utils';\nimport { Container, H3, Text, Span } from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\n\ninterface BookingCardProps {\n  booking: Booking;\n  className?: string;\n  showActions?: boolean;\n  onAction?: (action: 'edit' | 'cancel' | 'view') => void;\n}\n\nconst BookingCard: React.FC<BookingCardProps> = ({\n  booking,\n  className,\n  showActions = false,\n  onAction\n}) => {\n  const getStatusColor = (status: Booking['status']) => {\n    switch (status) {\n      case 'confirmed':\n        return 'bg-success text-text-inverse';\n      case 'pending':\n        return 'bg-warning text-text-inverse';\n      case 'completed':\n        return 'bg-info text-text-inverse';\n      case 'cancelled':\n        return 'bg-error text-text-inverse';\n      default:\n        return 'bg-gray-100';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      weekday: 'short',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  return (\n    <Container className={className}>\n      {/* Header */}\n      <Stack direction=\"horizontal\" align=\"center\" justify=\"between\" spacing=\"md\">\n        <Container>\n          <H3>\n            {booking.name}\n          </H3>\n          <Text>\n            Booking #{booking.id}\n          </Text>\n        </Container>\n        <Badge>\n          {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}\n        </Badge>\n      </Stack>\n\n      {/* Date and Time */}\n      <Stack direction=\"horizontal\" spacing=\"md\">\n        <Container>\n          <Calendar />\n          <Text size=\"sm\">{formatDate(booking.pickupDateTime.toString())}</Text>\n        </Container>\n        <Container>\n          <Clock />\n          <Text size=\"sm\">{formatTime(booking.pickupDateTime.toString())}</Text>\n        </Container>\n      </Stack>\n\n      {/* Locations */}\n      <Stack spacing=\"md\">\n        <Container>\n          <MapPin />\n          <Container>\n            <Text size=\"xs\">Pickup:</Text>\n            <Text size=\"sm\">{booking.pickupLocation}</Text>\n          </Container>\n        </Container>\n        <Container>\n          <MapPin />\n          <Container>\n            <Text size=\"xs\">Drop-off:</Text>\n            <Text size=\"sm\">{booking.dropoffLocation}</Text>\n          </Container>\n        </Container>\n      </Stack>\n\n      {/* Passenger Info */}\n      <Container>\n        <Text size=\"sm\">\n          Passengers: {booking.passengers}\n        </Text>\n        {booking.notes && (\n          <Container>\n            <Text size=\"xs\">Notes:</Text>\n            <Text size=\"sm\">{booking.notes}</Text>\n          </Container>\n        )}\n      </Container>\n\n      {/* Price */}\n      <Stack direction=\"horizontal\" align=\"center\" spacing=\"sm\">\n        <DollarSign />\n        <Text size=\"sm\">Total Fare:</Text>\n        <Text size=\"lg\">\n          ${booking.fare}\n        </Text>\n      </Stack>\n\n      {/* Actions */}\n      {showActions && onAction && (\n        <Stack direction=\"horizontal\" spacing=\"sm\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => onAction('view')}\n          >\n            View Details\n          </Button>\n          {booking.status === 'pending' && (\n            <>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onAction('edit')}\n              >\n                Edit\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onAction('cancel')}\n              >\n                Cancel\n              </Button>\n            </>\n          )}\n        </Stack>\n      )}\n    </Container>\n  );\n};\n\nexport { BookingCard }; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/booking/LocationAutocomplete.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { MapPin, Loader2 } from 'lucide-react';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils/utils';\nimport { Container, Text, Span } from '@/components/ui';\n\ninterface LocationAutocompleteProps {\n  value: string;\n  onChange: (value: string) => void;\n  onSelect?: (place: any) => void;\n  placeholder?: string;\n  label?: string;\n  required?: boolean;\n  error?: string;\n  helperText?: string;\n  className?: string;\n  fieldId?: string;\n}\n\nconst LocationAutocomplete: React.FC<LocationAutocompleteProps> = ({\n  value,\n  onChange,\n  onSelect,\n  placeholder = 'Enter location...',\n  label,\n  required = false,\n  error,\n  helperText,\n  className,\n  fieldId\n}) => {\n  const [suggestions, setSuggestions] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const suggestionsRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        suggestionsRef.current &&\n        !suggestionsRef.current.contains(event.target as Node) &&\n        inputRef.current &&\n        !inputRef.current.contains(event.target as Node)\n      ) {\n        setShowSuggestions(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const searchPlaces = async (query: string) => {\n    if (!query.trim()) {\n      setSuggestions([]);\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch(`/api/places-autocomplete?query=${encodeURIComponent(query)}`);\n      if (response.ok) {\n        const data = await response.json();\n        setSuggestions(data.predictions || []);\n      }\n    } catch (error) {\n      console.error('Error fetching places:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    onChange(newValue);\n    \n    if (newValue.length > 2) {\n      searchPlaces(newValue);\n      setShowSuggestions(true);\n    } else {\n      setSuggestions([]);\n      setShowSuggestions(false);\n    }\n  };\n\n  const handleSuggestionClick = (suggestion: any) => {\n    onChange(suggestion.description);\n    if (onSelect) {\n      onSelect(suggestion);\n    }\n    setShowSuggestions(false);\n    setSuggestions([]);\n  };\n\n  const handleInputFocus = () => {\n    if (suggestions.length > 0) {\n      setShowSuggestions(true);\n    }\n  };\n\n  return (\n    <Container className={className}>\n      {label && (\n        <Label htmlFor={fieldId}>\n          {label}\n          {required && <Span>*</Span>}\n        </Label>\n      )}\n      \n      <Container>\n        <div>\n          {isLoading && (\n            <Loader2 />\n          )}\n          <input\n            ref={inputRef}\n            id={fieldId}\n            type=\"text\"\n            value={value}\n            onChange={handleInputChange}\n            onFocus={handleInputFocus}\n            placeholder={placeholder}\n          />\n          {!isLoading && (\n            <MapPin />\n          )}\n        </div>\n        \n        {error && (\n          <Text size=\"sm\">{error}</Text>\n        )}\n        \n        {helperText && !error && (\n          <Text size=\"sm\">{helperText}</Text>\n        )}\n      </Container>\n\n      {showSuggestions && suggestions.length > 0 && (\n        <div ref={suggestionsRef}>\n          {suggestions.map((suggestion, index) => (\n            <Button\n              key={index}\n              variant=\"ghost\"\n              onClick={() => handleSuggestionClick(suggestion)}\n            >\n              <div>\n                <MapPin />\n                <div>\n                  <div>\n                    {suggestion.structured_formatting?.main_text || suggestion.description}\n                  </div>\n                  {suggestion.structured_formatting?.secondary_text && (\n                    <Text size=\"sm\">\n                      {suggestion.structured_formatting.secondary_text}\n                    </Text>\n                  )}\n                </div>\n              </div>\n            </Button>\n          ))}\n        </div>\n      )}\n    </Container>\n  );\n};\n\nexport { LocationAutocomplete }; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/booking/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/cms/PageEditors.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/data/DataTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'H3' is defined but never used.","line":12,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'className' is defined but never used.","line":96,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":71},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'className' is defined but never used.","line":116,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hoverable' is assigned a value but never used.","line":130,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":12}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { cn } from '@/lib/utils/utils';\nimport { ErrorBoundary } from '@/components/ui/ErrorBoundary';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Container, Text, H3 } from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\n\n/**\n * Column configuration for the data table\n */\ninterface Column<T> {\n  /** Unique key for the column */\n  key: string;\n  /** Display label for the column header */\n  label: string;\n  /** Custom render function for the column content */\n  render?: (item: T) => React.ReactNode;\n  /** Whether the column is sortable */\n  sortable?: boolean;\n  /** CSS width for the column */\n  width?: string;\n  /** Whether the column should be hidden on mobile */\n  hideOnMobile?: boolean;\n}\n\n/**\n * A flexible data table component with sorting, loading states, and error handling\n * \n * @example\n * ```tsx\n * // Basic usage\n * <DataTable\n *   data={users}\n *   columns={[\n *     { key: 'name', label: 'Name' },\n *     { key: 'email', label: 'Email' },\n *     { key: 'role', label: 'Role' }\n *   ]}\n * />\n * \n * // With custom rendering\n * <DataTable\n *   data={bookings}\n *   columns={[\n *     { key: 'name', label: 'Name' },\n *     { \n *       key: 'status', \n *       label: 'Status',\n *       render: (booking) => <StatusBadge status={booking.status} />\n *     },\n *     { key: 'amount', label: 'Amount' }\n *   ]}\n *   onRowClick={(booking) => navigate(`/booking/${booking.id}`)}\n * />\n * \n * // With loading state\n * <DataTable\n *   data={data}\n *   columns={columns}\n *   loading={isLoading}\n *   emptyMessage=\"No bookings found\"\n * />\n * ```\n */\ninterface DataTableProps<T> {\n  /** Array of data items to display */\n  data: T[];\n  /** Column configuration */\n  columns: Column<T>[];\n  /** Callback when a row is clicked */\n  onRowClick?: (item: T) => void;\n  /** Whether the table is in a loading state */\n  loading?: boolean;\n  /** Custom message to display when no data is available */\n  emptyMessage?: React.ReactNode;\n  /** Additional CSS classes */\n  className?: string;\n  /** Custom error boundary fallback */\n  errorFallback?: React.ComponentType<{ error?: Error; resetError: () => void }>;\n  /** Whether to show row hover effects */\n  hoverable?: boolean;\n  /** Custom loading component */\n  loadingComponent?: React.ReactNode;\n}\n\n/**\n * Default loading skeleton component\n */\nconst LoadingSkeleton: React.FC<{ className?: string }> = ({ className }) => (\n      <Container>\n      <Stack spacing=\"md\">\n        <Container>\n          <span>Loading...</span>\n        </Container>\n        {[...Array(5)].map((_, i) => (\n          <Container key={i}>\n            <span>Loading row {i + 1}...</span>\n          </Container>\n        ))}\n      </Stack>\n    </Container>\n);\n\n/**\n * Default empty state component\n */\nconst EmptyState: React.FC<{ message: React.ReactNode; className?: string }> = ({ \n  message, \n  className \n}) => (\n  <Container>\n    <Text>{message}</Text>\n  </Container>\n);\n\nfunction DataTableComponent<T extends { id?: string }>({\n  data,\n  columns,\n  onRowClick,\n  loading = false,\n  emptyMessage = 'No data available',\n  className,\n  hoverable = true,\n  loadingComponent,\n}: DataTableProps<T>) {\n  // Memoize the filtered columns to prevent unnecessary re-renders\n  const visibleColumns = React.useMemo(() => {\n    return columns.filter(column => !column.hideOnMobile || window.innerWidth >= 768);\n  }, [columns]);\n\n  if (loading) {\n    return loadingComponent || <LoadingSkeleton className={className} />;\n  }\n\n  if (data.length === 0) {\n    return <EmptyState message={emptyMessage} className={className} />;\n  }\n\n  return (\n    <Container className={className}>\n      <Table>\n        <TableHeader>\n          <TableRow>\n            {visibleColumns.map((column) => (\n              <TableHead\n                key={column.key}\n                style={{ width: column.width }}\n              >\n                {column.label}\n              </TableHead>\n            ))}\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {data.map((item, index) => (\n            <TableRow\n              key={item.id || index}\n              onClick={() => onRowClick?.(item)}\n              role={onRowClick ? 'button' : undefined}\n              tabIndex={onRowClick ? 0 : undefined}\n              onKeyDown={(e) => {\n                if (onRowClick && (e.key === 'Enter' || e.key === ' ')) {\n                  e.preventDefault();\n                  onRowClick(item);\n                }\n              }}\n            >\n              {visibleColumns.map((column) => (\n                <TableCell \n                  key={column.key}\n                >\n                  {column.render\n                    ? column.render(item)\n                    : String((item as Record<string, unknown>)[column.key] || '')}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Container>\n  );\n}\n\n// Memoize the component for better performance\nconst DataTable = React.memo(DataTableComponent) as typeof DataTableComponent;\n\n// Wrap with error boundary\nconst DataTableWithErrorBoundary = <T extends { id?: string }>(\n  props: DataTableProps<T>\n) => (\n  <ErrorBoundary fallback={props.errorFallback}>\n    <DataTable {...props} />\n  </ErrorBoundary>\n);\n\nexport { DataTableWithErrorBoundary as DataTable }; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/data/EmptyState.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ref' is defined but never used.","line":14,"column":76,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":79}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { cn } from '@/lib/utils/utils';\nimport { Container, H3, Text } from '@/components/ui';\n\ninterface EmptyStateProps extends React.HTMLAttributes<HTMLDivElement> {\n  icon?: React.ReactNode;\n  title?: string;\n  description?: string;\n  action?: React.ReactNode;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst EmptyState = React.forwardRef<HTMLDivElement, EmptyStateProps>(\n  ({ className, icon, title, description, action, size = 'md', ...props }, ref) => {\n    const sizeClasses = {\n      sm: {\n        container: 'py-8',\n        icon: 'w-8 h-8',\n        title: 'text-lg',\n        description: 'text-sm',\n      },\n      md: {\n        container: 'py-12',\n        icon: 'w-12 h-12',\n        title: 'text-xl',\n        description: 'text-base',\n      },\n      lg: {\n        container: 'py-16',\n        icon: 'w-16 h-16',\n        title: 'text-2xl',\n        description: 'text-lg',\n      },\n    };\n\n    return (\n      <Container\n        className={cn(\n          'flex flex-col items-center justify-center text-center',\n          sizeClasses[size].container,\n          className\n        )}\n        {...props}\n      >\n                {icon && (\n          <Container>\n            {icon}\n          </Container>\n        )}\n        {title && (\n          <H3>\n            {title}\n          </H3>\n        )}\n        {description && (\n          <Text>\n            {description}\n          </Text>\n        )}\n        {action && (\n          <Container>\n            {action}\n          </Container>\n        )}\n      </Container>\n    );\n  }\n);\nEmptyState.displayName = 'EmptyState';\n\nexport { EmptyState }; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/data/StatusBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/data/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/feedback/Alert.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'variant' is assigned a value but never used.","line":18,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ref' is defined but never used.","line":24,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'variantClasses' is assigned a value but never used.","line":25,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'iconClasses' is assigned a value but never used.","line":32,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":22}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { X } from 'lucide-react';\nimport { cn } from '@/lib/utils/utils';\nimport { Button } from '@/components/ui/button';\nimport { Container, H4, Text } from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\n\nexport interface AlertProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: 'success' | 'error' | 'warning' | 'info';\n  title?: string;\n  dismissible?: boolean;\n  onClose?: () => void;\n}\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(\n  ({ \n    className, \n    variant = 'info', \n    title, \n    children, \n    onClose,\n    dismissible = false,\n    ...props \n  }, ref) => {\n    const variantClasses = {\n      success: 'bg-bg-success border-border-success text-text-success',\n      error: 'bg-bg-error border-border-error text-text-error',\n      warning: 'bg-bg-warning border-border-warning text-text-warning',\n      info: 'bg-bg-info border-border-info text-text-info',\n    };\n\n    const iconClasses = {\n      success: 'text-success',\n      error: 'text-error',\n      warning: 'text-warning',\n      info: 'text-info',\n    };\n\n    return (\n      <Container\n        className={className}\n        {...props}\n      >\n        <Stack direction=\"horizontal\" align=\"center\" justify=\"between\">\n          <Container>\n            {title && (\n              <H4>{title}</H4>\n            )}\n            <Text size=\"sm\">\n              {children}\n            </Text>\n          </Container>\n          {dismissible && onClose && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n            >\n              <X />\n            </Button>\n          )}\n        </Stack>\n      </Container>\n    );\n  }\n);\nAlert.displayName = 'Alert';\n\nexport { Alert }; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/feedback/Modal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'size' is assigned a value but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sizeClasses' is assigned a value but never used.","line":25,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":20}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { X } from 'lucide-react';\nimport { cn } from '@/lib/utils/utils';\nimport { Button } from '@/components/ui/button';\nimport { Container, H2 } from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  children: React.ReactNode;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n}\n\nconst Modal: React.FC<ModalProps> = ({\n  isOpen,\n  onClose,\n  title,\n  children,\n  size = 'md'\n}) => {\n  if (!isOpen) return null;\n\n  const sizeClasses = {\n    sm: 'max-w-sm',\n    md: 'max-w-md',\n    lg: 'max-w-lg',\n    xl: 'max-w-xl'\n  };\n\n  return (\n    <Container>\n      <Container>\n        <div \n          onClick={onClose}\n        />\n        \n        <Container>\n          <Stack direction=\"horizontal\" align=\"center\" justify=\"between\">\n            <H2>\n              {title}\n            </H2>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n            >\n              <X />\n            </Button>\n          </Stack>\n          \n          <Container>\n            {children}\n          </Container>\n        </Container>\n      </Container>\n    </Container>\n  );\n};\n\nexport { Modal }; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/feedback/StarRating.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Container' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'size' is assigned a value but never used.","line":21,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ref' is defined but never used.","line":26,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sizeClasses' is assigned a value but never used.","line":29,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isFilled' is assigned a value but never used.","line":57,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":25}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { cn } from '@/lib/utils/utils';\nimport { Button } from '@/components/ui/button';\nimport { Container, Span } from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\n\ninterface StarRatingProps extends React.HTMLAttributes<HTMLDivElement> {\n  rating: number;\n  maxRating?: number;\n  size?: 'sm' | 'md' | 'lg';\n  interactive?: boolean;\n  onRatingChange?: (rating: number) => void;\n  showValue?: boolean;\n}\n\nconst StarRating = React.forwardRef<HTMLDivElement, StarRatingProps>(\n  ({ \n    className, \n    rating, \n    maxRating = 5, \n    size = 'md',\n    interactive = false,\n    onRatingChange,\n    showValue = false,\n    ...props \n  }, ref) => {\n    const [hoverRating, setHoverRating] = React.useState(0);\n\n    const sizeClasses = {\n      sm: 'w-4 h-4',\n      md: 'w-6 h-6',\n      lg: 'w-8 h-8',\n    };\n\n    const handleStarClick = (starValue: number) => {\n      if (interactive && onRatingChange) {\n        onRatingChange(starValue);\n      }\n    };\n\n    const handleStarHover = (starValue: number) => {\n      if (interactive) {\n        setHoverRating(starValue);\n      }\n    };\n\n    const handleMouseLeave = () => {\n      if (interactive) {\n        setHoverRating(0);\n      }\n    };\n\n    return (\n      <Stack direction=\"horizontal\" align=\"center\" spacing=\"sm\" className={className} onMouseLeave={handleMouseLeave} {...props}>\n        {[...Array(maxRating)].map((_, index) => {\n          const starValue = index + 1;\n          const isFilled = starValue <= (hoverRating || rating);\n          \n          return (\n            <button\n              key={starValue}\n              type=\"button\"\n              onClick={() => handleStarClick(starValue)}\n              onMouseEnter={() => handleStarHover(starValue)}\n              disabled={!interactive}\n            >\n              <svg\n                fill=\"currentColor\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.957a1 1 0 00.95.69h4.162c.969 0 1.371 1.24.588 1.81l-3.368 2.448a1 1 0 00-.364 1.118l1.287 3.957c.3.921-.755 1.688-1.54 1.118l-3.368-2.448a1 1 0 00-1.175 0l-3.368 2.448c-.784.57-1.838-.197-1.539-1.118l1.287-3.957a1 1 0 00-.364-1.118L2.24 9.384c-.783-.57-.38-1.81.588-1.81h4.162a1 1 0 00.95-.69L9.049 2.927z\" />\n              </svg>\n            </button>\n          );\n        })}\n        {showValue && (\n          <Span>\n            {rating}/{maxRating}\n          </Span>\n        )}\n      </Stack>\n    );\n  }\n);\nStarRating.displayName = 'StarRating';\n\nexport { StarRating }; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/feedback/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/forms/EditableField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/forms/EditableInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/forms/EditableTextarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/forms/FormActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/forms/FormField.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'helperText' is defined but never used.","line":58,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ref' is defined but never used.","line":64,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":9}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { cn } from '@/lib/utils/utils';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui';\nimport { ErrorBoundary } from '@/components/ui/ErrorBoundary';\nimport { Container, Span } from '@/components/ui';\n\n/**\n * A form field component that combines label, input, validation, and error handling\n * with enhanced accessibility and performance optimizations\n * \n * @example\n * ```tsx\n * // Basic usage\n * <FormField\n *   label=\"Email\"\n *   type=\"email\"\n *   placeholder=\"Enter your email\"\n * />\n * \n * // With validation\n * <FormField\n *   label=\"Password\"\n *   type=\"password\"\n *   required\n *   error=\"Password must be at least 8 characters\"\n *   helperText=\"Use a strong password\"\n * />\n * \n * // With custom validation\n * <FormField\n *   label=\"Age\"\n *   type=\"number\"\n *   min={18}\n *   max={100}\n *   error={ageError}\n * />\n * ```\n */\ninterface FormFieldProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  /** The label text for the field */\n  label: string;\n  /** Error message to display below the field */\n  error?: string;\n  /** Helper text to display below the field */\n  helperText?: string;\n  /** Whether the field is required */\n  required?: boolean;\n  /** Custom error boundary fallback */\n  errorFallback?: React.ComponentType<{ error?: Error; resetError: () => void }>;\n}\n\nconst FormFieldComponent = React.forwardRef<HTMLInputElement, FormFieldProps>(\n  ({ \n    className, \n    label, \n    error, \n    helperText, \n    required = false, \n    id, \n    errorFallback,\n    type,\n    ...props \n  }, ref) => {\n    const fieldId = id || `field-${label.toLowerCase().replace(/\\s+/g, '-')}`;\n\n    return (\n      <ErrorBoundary fallback={errorFallback}>\n        <Container >\n          <Label htmlFor={fieldId} >\n            {label}\n            {required && <Span >*</Span>}\n          </Label>\n          <Input\n            id={fieldId}\n            className={cn(\n              error && 'border-error focus-visible:ring-error',\n              className\n            )}\n            required={required}\n            type={type as any}\n            placeholder={props.placeholder}\n            value={props.value as string}\n            onChange={props.onChange}\n            onBlur={props.onBlur}\n            onFocus={props.onFocus}\n            disabled={props.disabled}\n            name={props.name}\n          />\n        </Container>\n      </ErrorBoundary>\n    );\n  }\n);\nFormFieldComponent.displayName = 'FormField';\n\n// Memoize the component for better performance\nconst FormField = React.memo(FormFieldComponent);\n\nexport { FormField }; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/forms/FormSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ref' is defined but never used.","line":14,"column":68,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":71}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { cn } from '@/lib/utils/utils';\nimport { Container, H3, Text, Grid } from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\n\ninterface FormSectionProps extends React.HTMLAttributes<HTMLDivElement> {\n  title: string;\n  description?: string;\n  columns?: number;\n  children: React.ReactNode;\n}\n\nconst FormSection = React.forwardRef<HTMLDivElement, FormSectionProps>(\n  ({ className, title, description, columns, children, ...props }, ref) => {\n    return (\n      <Container\n        className={className}\n        {...props}\n      >\n        <Stack spacing=\"md\">\n          <Container>\n            <H3>{title}</H3>\n            {description && (\n              <Text>{description}</Text>\n            )}\n          </Container>\n          <Grid \n            columns={(columns as 1 | 2 | 3 | 4 | 6) || 1} \n            spacing=\"md\"\n          >\n            {children}\n          </Grid>\n        </Stack>\n      </Container>\n    );\n  }\n);\nFormSection.displayName = 'FormSection';\n\nexport { FormSection }; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/forms/SelectField.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { cn } from '@/lib/utils/utils';\nimport { Label } from '@/components/ui/label';\nimport { Select, Option, Text, Container } from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\n\ninterface SelectOption {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\ninterface SelectFieldProps extends React.SelectHTMLAttributes<HTMLSelectElement> {\n  label: string;\n  options: SelectOption[];\n  error?: string;\n  helperText?: string;\n  required?: boolean;\n}\n\nconst SelectField = React.forwardRef<HTMLSelectElement, SelectFieldProps>(\n  ({ className, label, options, error, helperText, required, id, ...props }, ref) => {\n    const fieldId = id || (typeof label === 'string' ? `select-${label.toLowerCase().replace(/\\s+/g, '-')}` : 'select-unknown');\n\n    return (\n      <Container>\n        <Stack spacing=\"sm\">\n          <Label htmlFor={fieldId}>\n            {label}\n            {required && <span>*</span>}\n          </Label>\n          <Select\n            ref={ref}\n            id={fieldId}\n            className={className}\n            {...props}\n          >\n            {options.map((option) => (\n              <Option\n                key={option.value}\n                value={option.value}\n                disabled={option.disabled}\n              >\n                {option.label}\n              </Option>\n            ))}\n          </Select>\n          {error && (\n            <Text>{error}</Text>\n          )}\n          {helperText && !error && (\n            <Text>{helperText}</Text>\n          )}\n        </Stack>\n      </Container>\n    );\n  }\n);\nSelectField.displayName = 'SelectField';\n\nexport { SelectField }; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/forms/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/CMSContentPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isEditable' is assigned a value but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleFieldChange' is assigned a value but never used.","line":40,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { CMSConfiguration } from '@/types/cms';\nimport { CMSLayout } from '@/components/ui/layout/CMSLayout';\nimport { PageHeader } from '@/components/ui/layout/PageHeader';\nimport { Section, Container, H1, H2, H3, Lead } from '@/components/ui';\nimport { Card } from '@/components/ui/containers';\nimport { CardBody } from '@/components/ui/card';\n\ninterface CMSContentPageProps {\n  cmsConfig: CMSConfiguration;\n  pageType: keyof CMSConfiguration['pages'];\n  children: React.ReactNode;\n  title?: string;\n  subtitle?: string;\n  description?: string;\n  showTableOfContents?: boolean;\n  showRelatedLinks?: boolean;\n  containerMaxWidth?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full';\n  className?: string;\n  isEditable?: boolean;\n  onFieldChange?: (field: string, value: string) => void;\n}\n\nexport const CMSContentPage: React.FC<CMSContentPageProps> = ({\n  cmsConfig,\n  pageType,\n  children,\n  title,\n  subtitle,\n  description,\n  showTableOfContents = false,\n  showRelatedLinks = false,\n  containerMaxWidth = 'xl',\n  className,\n  isEditable = false,\n  onFieldChange\n}) => {\n  const pageContent = cmsConfig.pages[pageType];\n  \n  const handleFieldChange = (field: string, value: string) => {\n    if (onFieldChange) {\n      onFieldChange(field, value);\n    }\n  };\n\n  // Get page-specific content\n  const pageTitle = title || (pageContent && 'title' in pageContent ? pageContent.title : '');\n  const pageSubtitle = subtitle || (pageContent && 'subtitle' in pageContent ? pageContent.subtitle : '');\n  const pageDescription = description || (pageContent && 'description' in pageContent ? pageContent.description : '');\n  \n  return (\n    <CMSLayout \n      cmsConfig={cmsConfig} \n      pageType={pageType} \n      variant=\"content\"\n      className={className}\n    >\n      {/* Hero Section */}\n      <Section variant=\"muted\" padding=\"xl\">\n        <Container maxWidth={containerMaxWidth}>\n          <PageHeader align=\"center\" padding=\"lg\" margin=\"none\">\n            {pageTitle && (\n              <H1 >\n                {pageTitle}\n              </H1>\n            )}\n            {pageSubtitle && (\n              <H2 >\n                {pageSubtitle}\n              </H2>\n            )}\n            {pageDescription && (\n              <Lead >\n                {pageDescription}\n              </Lead>\n            )}\n          </PageHeader>\n        </Container>\n      </Section>\n\n      {/* Main Content */}\n      <Section padding=\"xl\">\n        <Container maxWidth={containerMaxWidth}>\n          <div >\n            {/* Table of Contents */}\n            {showTableOfContents && (\n              <div >\n                <div >\n                  <Card variant=\"outlined\" padding=\"lg\">\n                    <CardBody>\n                      <H3 >On This Page</H3>\n                      <nav >\n                        <a href=\"#overview\" >\n                          Overview\n                        </a>\n                        <a href=\"#details\" >\n                          Details\n                        </a>\n                        <a href=\"#contact\" >\n                          Contact\n                        </a>\n                      </nav>\n                    </CardBody>\n                  </Card>\n                </div>\n              </div>\n            )}\n\n            {/* Main Content */}\n            <div className={showTableOfContents ? 'lg:col-span-3' : 'lg:col-span-4'}>\n              <div >\n                {children}\n              </div>\n            </div>\n          </div>\n        </Container>\n      </Section>\n\n      {/* Related Links Section */}\n      {showRelatedLinks && (\n        <Section variant=\"muted\" padding=\"xl\">\n          <Container maxWidth={containerMaxWidth}>\n            <div >\n              <H2>Related Information</H2>\n              <Lead>Find more helpful resources and information</Lead>\n            </div>\n            \n            <div >\n              <Card variant=\"outlined\" padding=\"lg\">\n                <CardBody>\n                  <H3 >Booking Information</H3>\n                  <p >\n                    Learn about our booking process, policies, and what to expect.\n                  </p>\n                  <a href=\"/book\" >\n                    Book Your Ride →\n                  </a>\n                </CardBody>\n              </Card>\n              \n              <Card variant=\"outlined\" padding=\"lg\">\n                <CardBody>\n                  <H3 >Service Areas</H3>\n                  <p >\n                    See all the airports and areas we serve in the region.\n                  </p>\n                  <a href=\"/about\" >\n                    View Service Areas →\n                  </a>\n                </CardBody>\n              </Card>\n              \n              <Card variant=\"outlined\" padding=\"lg\">\n                <CardBody>\n                  <H3 >Contact Support</H3>\n                  <p >\n                    Need help? Our support team is available 24/7.\n                  </p>\n                  <a href=\"/help\" >\n                    Get Help →\n                  </a>\n                </CardBody>\n              </Card>\n            </div>\n          </Container>\n        </Section>\n      )}\n    </CMSLayout>\n  );\n};\n\nCMSContentPage.displayName = 'CMSContentPage'; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/CMSConversionPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentStep' is assigned a value but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isEditable' is assigned a value but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleFieldChange' is assigned a value but never used.","line":46,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":26}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { CMSConfiguration } from '@/types/cms';\nimport { CMSLayout } from '@/components/ui/layout/CMSLayout';\nimport { PageHeader } from '@/components/ui/layout/PageHeader';\nimport { Section, Container, H1, H2, Lead } from '@/components/ui';\nimport { Card } from '@/components/ui/containers';\nimport { CardBody } from '@/components/ui/card';\nimport { Stack } from '@/components/ui/containers';\nimport { Text, Span } from '@/components/ui';\n\ninterface CMSConversionPageProps {\n  cmsConfig: CMSConfiguration;\n  pageType: keyof CMSConfiguration['pages'];\n  children: React.ReactNode;\n  title?: string;\n  subtitle?: string;\n  description?: string;\n  showTrustSignals?: boolean;\n  showProgressIndicator?: boolean;\n  currentStep?: number;\n  totalSteps?: number;\n  containerMaxWidth?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full';\n  className?: string;\n  isEditable?: boolean;\n  onFieldChange?: (field: string, value: string) => void;\n}\n\nexport const CMSConversionPage: React.FC<CMSConversionPageProps> = ({\n  cmsConfig,\n  pageType,\n  children,\n  title,\n  subtitle,\n  description,\n  showTrustSignals = true,\n  showProgressIndicator = false,\n  currentStep = 1,\n  totalSteps = 3,\n  containerMaxWidth = 'lg',\n  className,\n  isEditable = false,\n  onFieldChange\n}) => {\n  const pageContent = cmsConfig.pages[pageType];\n  \n  const handleFieldChange = (field: string, value: string) => {\n    if (onFieldChange) {\n      onFieldChange(field, value);\n    }\n  };\n\n  // Get page-specific content\n  const pageTitle = title || (pageContent && 'title' in pageContent ? pageContent.title : '');\n  const pageSubtitle = subtitle || (pageContent && 'subtitle' in pageContent ? pageContent.subtitle : '');\n  const pageDescription = description || (pageContent && 'description' in pageContent ? pageContent.description : '');\n  \n  return (\n    <CMSLayout \n      cmsConfig={cmsConfig} \n      pageType={pageType} \n      variant=\"conversion\"\n      className={className}\n    >\n      {/* Progress Indicator */}\n      {showProgressIndicator && (\n        <Section variant=\"muted\" padding=\"md\">\n          <Container maxWidth={containerMaxWidth}>\n            <Stack direction=\"horizontal\" align=\"center\" spacing=\"sm\">\n              {Array.from({ length: totalSteps }, (_, index) => (\n                <Container key={index}>\n                  <Container>\n                    {index + 1}\n                  </Container>\n                  {index < totalSteps - 1 && (\n                    <Container>\n                      <span>-</span>\n                    </Container>\n                  )}\n                </Container>\n              ))}\n            </Stack>\n          </Container>\n        </Section>\n      )}\n\n      {/* Main Content */}\n      <Section padding=\"xl\">\n        <Container maxWidth={containerMaxWidth}>\n          {/* Header */}\n          <PageHeader align=\"center\" padding=\"lg\" margin=\"none\">\n            {pageTitle && (\n              <H1>\n                {pageTitle}\n              </H1>\n            )}\n            {pageSubtitle && (\n              <H2>\n                {pageSubtitle}\n              </H2>\n            )}\n            {pageDescription && (\n              <Lead>\n                {pageDescription}\n              </Lead>\n            )}\n          </PageHeader>\n\n          {/* Conversion Content */}\n          <Stack direction=\"horizontal\" spacing=\"lg\">\n            {/* Main Form/Content */}\n            <Container>\n              <Card variant=\"elevated\" padding=\"xl\">\n                <CardBody>\n                  {children}\n                </CardBody>\n              </Card>\n            </Container>\n\n            {/* Trust Signals Sidebar */}\n            {showTrustSignals && (\n              <Stack spacing=\"lg\">\n                <Card variant=\"outlined\" padding=\"lg\">\n                  <CardBody>\n                    <H2>Why Choose Us?</H2>\n                    <Stack spacing=\"md\">\n                      <Stack direction=\"horizontal\" align=\"center\" spacing=\"sm\">\n                        <Container>\n                          <Span>✓</Span>\n                        </Container>\n                        <Container>\n                          <Text>Professional Drivers</Text>\n                          <Text size=\"sm\">Background checked & licensed</Text>\n                        </Container>\n                      </Stack>\n                      <Stack direction=\"horizontal\" align=\"center\" spacing=\"sm\">\n                        <Container>\n                          <Span>✓</Span>\n                        </Container>\n                        <Container>\n                          <Text>Reliable Service</Text>\n                          <Text size=\"sm\">On-time pickups guaranteed</Text>\n                        </Container>\n                      </Stack>\n                      <Stack direction=\"horizontal\" align=\"center\" spacing=\"sm\">\n                        <Container>\n                          <Span>✓</Span>\n                        </Container>\n                        <Container>\n                          <Text>Clean Vehicles</Text>\n                          <Text size=\"sm\">Well-maintained luxury SUVs</Text>\n                        </Container>\n                      </Stack>\n                    </Stack>\n                  </CardBody>\n                </Card>\n\n                <Card variant=\"outlined\" padding=\"lg\">\n                  <CardBody>\n                    <H2>Need Help?</H2>\n                    <Text>\n                      Our team is here to assist you with your booking.\n                    </Text>\n                    <Stack spacing=\"sm\">\n                      <Text>\n                        <Span>Phone:</Span> (203) 555-0123\n                      </Text>\n                      <Text>\n                        <Span>Email:</Span> info@fairfieldairportcar.com\n                      </Text>\n                      <Text>\n                        <Span>Hours:</Span> 24/7 Service\n                      </Text>\n                    </Stack>\n                  </CardBody>\n                </Card>\n              </Stack>\n            )}\n          </Stack>\n        </Container>\n      </Section>\n    </CMSLayout>\n  );\n};\n\nCMSConversionPage.displayName = 'CMSConversionPage'; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/CMSLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'pageType' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":11}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { CMSConfiguration } from '@/types/cms';\nimport { generateCSSVariables } from '@/lib/design';\nimport { cn } from '@/lib/utils/utils';\n\ninterface CMSLayoutProps {\n  cmsConfig: CMSConfiguration;\n  pageType: keyof CMSConfiguration['pages'];\n  children: React.ReactNode;\n  variant?: 'standard' | 'marketing' | 'portal' | 'admin';\n  className?: string;\n}\n\nexport const CMSLayout: React.FC<CMSLayoutProps> = ({\n  cmsConfig,\n  pageType,\n  children,\n  variant = 'standard',\n  className\n}) => {\n  const cssVars = generateCSSVariables(cmsConfig);\n  \n  return (\n    <div \n      className={cn(\n        'min-h-screen flex flex-col',\n        variant === 'marketing' && 'bg-bg-primary',\n        variant === 'portal' && 'bg-bg-secondary',\n        variant === 'admin' && 'bg-bg-muted',\n        className\n      )}\n      style={cssVars}\n    >\n      {/* Header will be added here */}\n      <main >\n        {children}\n      </main>\n      {/* Footer will be added here */}\n    </div>\n  );\n};\n\nCMSLayout.displayName = 'CMSLayout'; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/CMSMarketingPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isEditable' is assigned a value but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleFieldChange' is assigned a value but never used.","line":35,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { CMSConfiguration, HomePageContent } from '@/types/cms';\nimport { CMSLayout } from '@/components/ui/layout/CMSLayout';\nimport { PageHeader } from '@/components/ui/layout/PageHeader';\nimport { PageContent } from '@/components/ui/layout/PageContent';\nimport { Container, Section, H1, H2, Lead } from '@/components/ui/design-system';\n\ninterface CMSMarketingPageProps {\n  cmsConfig: CMSConfiguration;\n  pageType: keyof CMSConfiguration['pages'];\n  children: React.ReactNode;\n  showHero?: boolean;\n  heroVariant?: 'default' | 'brand' | 'alternate' | 'muted';\n  headerAlign?: 'left' | 'center' | 'right';\n  containerMaxWidth?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full';\n  className?: string;\n  isEditable?: boolean;\n  onFieldChange?: (field: string, value: string) => void;\n}\n\nexport const CMSMarketingPage: React.FC<CMSMarketingPageProps> = ({\n  cmsConfig,\n  pageType,\n  children,\n  showHero = true,\n  heroVariant = 'brand',\n  headerAlign = 'center',\n  containerMaxWidth = 'xl',\n  className,\n  isEditable = false,\n  onFieldChange\n}) => {\n  const pageContent = cmsConfig.pages[pageType];\n  \n  const handleFieldChange = (field: string, value: string) => {\n    if (onFieldChange) {\n      onFieldChange(field, value);\n    }\n  };\n  \n  // Check if this is a HomePageContent with hero section\n  const hasHero = pageType === 'home' && pageContent && 'hero' in pageContent;\n  const homeContent = hasHero ? pageContent as HomePageContent : null;\n  \n  return (\n    <CMSLayout \n      cmsConfig={cmsConfig} \n      pageType={pageType} \n      variant=\"marketing\"\n      className={className}\n    >\n      {/* Hero Section */}\n      {showHero && hasHero && homeContent && (\n        <Section variant={heroVariant} padding=\"xl\">\n          <Container maxWidth={containerMaxWidth}>\n            <PageHeader align={headerAlign} padding=\"none\" margin=\"none\">\n              {homeContent.hero?.title && (\n                <H1>\n                  {homeContent.hero.title}\n                </H1>\n              )}\n              {homeContent.hero?.subtitle && (\n                <H2 >\n                  {homeContent.hero.subtitle}\n                </H2>\n              )}\n              {homeContent.hero?.ctaText && (\n                <Lead>\n                  {homeContent.hero.ctaText}\n                </Lead>\n              )}\n            </PageHeader>\n          </Container>\n        </Section>\n      )}\n      \n      {/* Main Content */}\n      <Section padding=\"xl\">\n        <Container maxWidth={containerMaxWidth}>\n          <PageContent padding=\"none\" margin=\"none\">\n            {children}\n          </PageContent>\n        </Container>\n      </Section>\n    </CMSLayout>\n  );\n};\n\nCMSMarketingPage.displayName = 'CMSMarketingPage'; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/CMSStandardPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PageContent' is defined but never used.","line":2,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isEditable' is assigned a value but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleFieldChange' is assigned a value but never used.","line":35,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":26}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { CMSConfiguration, PageContent } from '@/types/cms';\nimport { CMSLayout } from '@/components/ui/layout/CMSLayout';\nimport { PageHeader } from '@/components/ui/layout/PageHeader';\nimport { PageContent as LayoutPageContent } from '@/components/ui/layout/PageContent';\nimport { Container, H1, H2, Lead } from '@/components/ui/design-system';\n\ninterface CMSStandardPageProps {\n  cmsConfig: CMSConfiguration;\n  pageType: keyof CMSConfiguration['pages'];\n  children: React.ReactNode;\n  variant?: 'standard' | 'marketing' | 'portal' | 'admin';\n  showHeader?: boolean;\n  headerAlign?: 'left' | 'center' | 'right';\n  containerMaxWidth?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full';\n  className?: string;\n  isEditable?: boolean;\n  onFieldChange?: (field: string, value: string) => void;\n}\n\nexport const CMSStandardPage: React.FC<CMSStandardPageProps> = ({\n  cmsConfig,\n  pageType,\n  children,\n  variant = 'standard',\n  showHeader = true,\n  headerAlign = 'left',\n  containerMaxWidth = 'xl',\n  className,\n  isEditable = false,\n  onFieldChange\n}) => {\n  const pageContent = cmsConfig.pages[pageType];\n  \n  const handleFieldChange = (field: string, value: string) => {\n    if (onFieldChange) {\n      onFieldChange(field, value);\n    }\n  };\n  \n  // Check if this page has standard title/subtitle/description properties\n  const hasStandardProps = pageContent && (\n    'title' in pageContent || \n    'subtitle' in pageContent || \n    'description' in pageContent\n  );\n  \n  return (\n    <CMSLayout \n      cmsConfig={cmsConfig} \n      pageType={pageType} \n      variant={variant}\n      className={className}\n    >\n      <Container maxWidth={containerMaxWidth} padding=\"lg\">\n        {showHeader && hasStandardProps && (\n          <PageHeader align={headerAlign} padding=\"lg\" margin=\"none\">\n            {'title' in pageContent && pageContent.title && (\n              <H1 >\n                {pageContent.title}\n              </H1>\n            )}\n            {'subtitle' in pageContent && pageContent.subtitle && (\n              <H2 >\n                {pageContent.subtitle}\n              </H2>\n            )}\n            {'description' in pageContent && pageContent.description && (\n              <Lead >\n                {pageContent.description}\n              </Lead>\n            )}\n          </PageHeader>\n        )}\n        \n        <LayoutPageContent padding=\"lg\" margin=\"none\">\n          {children}\n        </LayoutPageContent>\n      </Container>\n    </CMSLayout>\n  );\n};\n\nCMSStandardPage.displayName = 'CMSStandardPage'; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/CMSStatusPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isEditable' is assigned a value but never used.","line":51,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleFieldChange' is assigned a value but never used.","line":56,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { CMSConfiguration } from '@/types/cms';\nimport { CMSLayout } from '@/components/ui/layout/CMSLayout';\nimport { PageHeader } from '@/components/ui/layout/PageHeader';\nimport { Section, Container, H1, H2, Lead, Button } from '@/components/ui';\nimport { Card } from '@/components/ui/containers';\nimport { CardBody } from '@/components/ui/card';\nimport { Stack } from '@/components/ui/containers';\nimport { CheckCircle, Clock, AlertCircle, Info } from 'lucide-react';\n\ninterface CMSStatusPageProps {\n  cmsConfig: CMSConfiguration;\n  pageType: keyof CMSConfiguration['pages'];\n  children: React.ReactNode;\n  status?: 'success' | 'pending' | 'error' | 'info';\n  title?: string;\n  subtitle?: string;\n  description?: string;\n  showStatusIcon?: boolean;\n  showActionButtons?: boolean;\n  primaryAction?: {\n    text: string;\n    href: string;\n    variant?: 'primary' | 'outline' | 'secondary';\n  };\n  secondaryAction?: {\n    text: string;\n    href: string;\n    variant?: 'primary' | 'outline' | 'secondary';\n  };\n  containerMaxWidth?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full';\n  className?: string;\n  isEditable?: boolean;\n  onFieldChange?: (field: string, value: string) => void;\n}\n\nexport const CMSStatusPage: React.FC<CMSStatusPageProps> = ({\n  cmsConfig,\n  pageType,\n  children,\n  status = 'info',\n  title,\n  subtitle,\n  description,\n  showStatusIcon = true,\n  showActionButtons = true,\n  primaryAction,\n  secondaryAction,\n  containerMaxWidth = 'lg',\n  className,\n  isEditable = false,\n  onFieldChange\n}) => {\n  const pageContent = cmsConfig.pages[pageType];\n  \n  const handleFieldChange = (field: string, value: string) => {\n    if (onFieldChange) {\n      onFieldChange(field, value);\n    }\n  };\n\n  // Get page-specific content\n  const pageTitle = title || (pageContent && 'title' in pageContent ? pageContent.title : '');\n  const pageSubtitle = subtitle || (pageContent && 'subtitle' in pageContent ? pageContent.subtitle : '');\n  const pageDescription = description || (pageContent && 'description' in pageContent ? pageContent.description : '');\n  \n  // Status configuration\n  const statusConfig = {\n    success: {\n      icon: CheckCircle,\n      color: 'text-success-base',\n      bgColor: 'bg-success-light',\n      borderColor: 'border-success-base'\n    },\n    pending: {\n      icon: Clock,\n      color: 'text-warning-base',\n      bgColor: 'bg-warning-light',\n      borderColor: 'border-warning-base'\n    },\n    error: {\n      icon: AlertCircle,\n      color: 'text-error-base',\n      bgColor: 'bg-error-light',\n      borderColor: 'border-error-base'\n    },\n    info: {\n      icon: Info,\n      color: 'text-info-base',\n      bgColor: 'bg-info-light',\n      borderColor: 'border-info-base'\n    }\n  };\n\n  const currentStatus = statusConfig[status];\n  const StatusIcon = currentStatus.icon;\n  \n  return (\n    <CMSLayout \n      cmsConfig={cmsConfig} \n      pageType={pageType} \n      variant=\"status\"\n      className={className}\n    >\n      {/* Status Section */}\n      <Section variant=\"muted\" padding=\"xl\">\n        <Container maxWidth={containerMaxWidth}>\n          <Stack align=\"center\" spacing=\"lg\">\n            {/* Status Icon */}\n            {showStatusIcon && (\n              <Container>\n                <StatusIcon />\n              </Container>\n            )}\n\n            {/* Header */}\n            <PageHeader align=\"center\" padding=\"lg\" margin=\"none\">\n              {pageTitle && (\n                <H1>\n                  {pageTitle}\n                </H1>\n              )}\n              {pageSubtitle && (\n                <H2>\n                  {pageSubtitle}\n                </H2>\n              )}\n              {pageDescription && (\n                <Lead>\n                  {pageDescription}\n                </Lead>\n              )}\n            </PageHeader>\n\n            {/* Action Buttons */}\n            {showActionButtons && (primaryAction || secondaryAction) && (\n              <Stack direction=\"horizontal\" spacing=\"md\">\n                {primaryAction && (\n                  <a href={primaryAction.href}>\n                    <Button \n                      size=\"lg\"\n                      variant={primaryAction.variant || 'primary'}\n                    >\n                      {primaryAction.text}\n                    </Button>\n                  </a>\n                )}\n                {secondaryAction && (\n                  <a href={secondaryAction.href}>\n                    <Button \n                      size=\"lg\"\n                      variant={secondaryAction.variant || 'outline'}\n                    >\n                      {secondaryAction.text}\n                    </Button>\n                  </a>\n                )}\n              </Stack>\n            )}\n          </Stack>\n        </Container>\n      </Section>\n\n      {/* Main Content */}\n      <Section padding=\"xl\">\n        <Container maxWidth={containerMaxWidth}>\n          <Card variant=\"elevated\" padding=\"xl\">\n            <CardBody>\n              {children}\n            </CardBody>\n          </Card>\n        </Container>\n      </Section>\n    </CMSLayout>\n  );\n};\n\nCMSStatusPage.displayName = 'CMSStatusPage'; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/Navigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/PageContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/PageContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/PageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/StandardFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/StandardHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/StandardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/StandardNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/UnifiedLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'generateCSSVariables' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Stack' is defined but never used.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'variant' is assigned a value but never used.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cmsReady' is assigned a value but never used.","line":63,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'containerClasses' is assigned a value but never used.","line":124,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'variantStyles' is assigned a value but never used.","line":133,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":133,"endColumn":22}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🎯 UNIFIED LAYOUT SYSTEM\n * \n * THE single layout system for ALL pages in the app\n * Combines CMS design control + Universal Layout simplicity\n * \n * ✅ Works for: Admin, Customer, Content, Marketing, Status pages\n * ✅ Features: CMS color control, consistent spacing, responsive design\n * ✅ Usage: Simple props, no complexity, lightning fast\n */\n\n'use client';\n\nimport React, { ReactNode, useEffect, useState } from 'react';\nimport { generateCSSVariables } from '@/lib/design';\nimport { AccessibilityEnhancer } from '@/components/ui/AccessibilityEnhancer';\nimport { Container, H1, Text } from '@/components/ui';\nimport { Stack } from '@/components/ui/containers';\nimport Navigation from './Navigation';\nimport { StandardFooter } from './StandardFooter';\n\ninterface UnifiedLayoutProps {\n  children: ReactNode;\n  \n  // Page Configuration\n  title?: string;\n  subtitle?: string;\n  description?: string;\n  \n  // Layout Type (determines structure)\n  layoutType?: 'standard' | 'admin' | 'minimal' | 'marketing' | 'content' | 'status';\n  \n  // Navigation Control\n  showNavigation?: boolean;\n  showFooter?: boolean;\n  \n  // Content Structure\n  maxWidth?: 'sm' | 'md' | 'lg' | 'xl' | 'full';\n  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';\n  \n  // Visual Style\n  variant?: 'default' | 'brand' | 'minimal' | 'elevated';\n  centerContent?: boolean;\n  \n  // Meta\n  className?: string;\n}\n\nexport function UnifiedLayout({\n  children,\n  title,\n  subtitle,\n  description,\n  layoutType = 'standard',\n  showNavigation = true,\n  showFooter = true,\n  maxWidth = 'xl',\n  padding = 'lg',\n  variant = 'default',\n  centerContent = false,\n  className = ''\n}: UnifiedLayoutProps) {\n  const [cmsReady, setCmsReady] = useState(false);\n\n  // Apply CMS design system\n  useEffect(() => {\n    // Temporarily bypass CMS loading to fix the stuck loading issue\n    setCmsReady(true);\n    \n    // TODO: Re-enable CMS design system once import issues are resolved\n    // const applyCMSDesign = () => {\n    //   try {\n    //     let cmsConfig = {};\n    //     \n    //     if (typeof window !== 'undefined') {\n    //       const stored = localStorage.getItem('cmsConfig');\n    //       if (stored) {\n    //         try {\n    //           cmsConfig = JSON.parse(stored);\n    //         } catch (e) {\n    //           console.warn('Using default design system');\n    //         }\n    //       }\n    //       \n    //       if (typeof window !== 'undefined') {\n    //         const cssVars = generateCSSVariables(cmsConfig);\n    //         const rootElement = document.documentElement;\n    //           \n    //         Object.entries(cssVars).forEach(([property, value]) => {\n    //           rootElement.style.setProperty(property, String(value));\n    //         });\n    //       }\n    //       \n    //       setCmsReady(true);\n    //     } catch (error) {\n    //       console.warn('CMS design system failed, using defaults');\n    //       setCmsReady(true);\n    //     }\n    //   };\n    //   \n    //   // Apply design system in background\n    //   setTimeout(() => {\n    //     applyCMSDesign();\n    //   }, 100);\n\n    return () => {};\n  }, []);\n\n  // Layout-specific configurations\n  const layoutConfig = {\n    standard: { showNav: true, showFooter: true, container: true },\n    admin: { showNav: false, showFooter: false, container: true },\n    minimal: { showNav: false, showFooter: false, container: false },\n    marketing: { showNav: true, showFooter: true, container: true },\n    content: { showNav: true, showFooter: true, container: true },\n    status: { showNav: true, showFooter: false, container: true }\n  };\n\n  const config = layoutConfig[layoutType];\n  const shouldShowNav = showNavigation && config.showNav;\n  const shouldShowFooter = showFooter && config.showFooter;\n\n  // Container classes\n  const containerClasses = [\n    config.container && maxWidth !== 'full' ? 'unified-layout-container' : '',\n    padding !== 'none' ? `unified-layout-padding-${padding}` : '',\n    padding !== 'none' ? `unified-layout-max-width-${maxWidth}` : '',\n    centerContent ? 'unified-layout-center' : '',\n    className\n  ].filter(Boolean).join(' ');\n\n  // Variant-specific styles\n  const variantStyles = {\n    default: 'unified-layout-default',\n    brand: 'unified-layout-brand',\n    minimal: 'unified-layout-minimal',\n    elevated: 'unified-layout-elevated'\n  };\n\n  // Temporarily disable loading state to fix the stuck loading issue\n  // if (!cmsReady) {\n  //   return (\n  //     <div >\n  //       <div ></div>\n  //     </div>\n  //   );\n  // }\n\n  return (\n    <AccessibilityEnhancer>\n      <Container>\n        {/* Navigation */}\n        {shouldShowNav && (\n          <header>\n            <Navigation />\n          </header>\n        )}\n\n        {/* Page Header */}\n        {(title || subtitle || description) && (\n          <section>\n            <Container>\n              <Container>\n                {title && (\n                  <H1>\n                    {title}\n                  </H1>\n                )}\n                {subtitle && (\n                  <Text>\n                    {subtitle}\n                  </Text>\n                )}\n                {description && (\n                  <Text>\n                    {description}\n                  </Text>\n                )}\n              </Container>\n            </Container>\n          </section>\n        )}\n\n        {/* Main Content */}\n        <main id=\"main-content\">\n          <Container>\n            {children}\n          </Container>\n        </main>\n\n        {/* Footer */}\n        {shouldShowFooter && (\n          <footer>\n            <StandardFooter />\n          </footer>\n        )}\n      </Container>\n    </AccessibilityEnhancer>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/UniversalLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/layout/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/marketing/ContactSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'className' is defined but never used.","line":28,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ref' is defined but never used.","line":37,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getContactButtonVariant' is assigned a value but never used.","line":67,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":34}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { cn } from '@/lib/utils/utils';\nimport { Section, Container, H2, Text, Grid, GridItem } from '@/components/ui';\n\ninterface ContactMethod {\n  type: 'phone' | 'email' | 'text' | 'whatsapp';\n  label: string;\n  value: string;\n  href: string;\n}\n\ninterface ContactSectionProps extends React.HTMLAttributes<HTMLDivElement> {\n  title?: string;\n  subtitle?: string;\n  description?: string;\n  contactMethods: ContactMethod[];\n  variant?: 'default' | 'centered' | 'split';\n  showMap?: boolean;\n  mapLocation?: {\n    lat: number;\n    lng: number;\n    address: string;\n  };\n}\n\nconst ContactSection = React.forwardRef<HTMLDivElement, ContactSectionProps>(\n  ({ \n    className, \n    title, \n    subtitle, \n    description,\n    contactMethods,\n    variant = 'default',\n    showMap = false,\n    mapLocation,\n    ...props \n  }, ref) => {\n    const getContactIcon = (type: ContactMethod['type']) => {\n      switch (type) {\n        case 'phone':\n          return (\n            <svg  fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n            </svg>\n          );\n        case 'email':\n          return (\n            <svg  fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n            </svg>\n          );\n        case 'text':\n          return (\n            <svg  fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\n            </svg>\n          );\n        case 'whatsapp':\n          return (\n            <svg  fill=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path d=\"M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488\" />\n            </svg>\n          );\n      }\n    };\n\n    const getContactButtonVariant = (type: ContactMethod['type']) => {\n      switch (type) {\n        case 'phone':\n          return 'default';\n        case 'email':\n          return 'outline';\n        case 'text':\n          return 'outline';\n        case 'whatsapp':\n          return 'default';\n        default:\n          return 'outline';\n      }\n    };\n\n    return (\n      <Section {...props}>\n        <Container maxWidth=\"xl\">\n          {title && (\n            <H2 >\n              {title}\n            </H2>\n          )}\n          \n          {subtitle && (\n            <Text >\n              {subtitle}\n            </Text>\n          )}\n          \n          {description && (\n            <Text>\n              {description}\n            </Text>\n          )}\n          \n          <Grid columns={variant === 'split' ? 2 : 3} spacing=\"md\">\n            {contactMethods.map((method, index) => (\n              <GridItem key={index}>\n                <a href={method.href}>\n                  <div>\n                    {getContactIcon(method.type)}\n                  </div>\n                  <Container>\n                    <Text >{method.label}</Text>\n                    <Text>\n                      {method.value}\n                    </Text>\n                  </Container>\n                </a>\n              </GridItem>\n            ))}\n            \n            {showMap && mapLocation && (\n              <GridItem>\n                <iframe\n                  src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3024.2219901290355!2d-74.00369368400567!3d40.71312937933185!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x89c25a23e28c1191%3A0x49f75d3281df052a!2s150%20Park%20Row%2C%20New%20York%2C%20NY%2010007!5e0!3m2!1sen!2sus!4v1645000000000!5m2!1sen!2sus\"\n                  title=\"Office Location\"\n                  loading=\"lazy\"\n                />\n                {mapLocation.address && (\n                  <Container>\n                    <Text size=\"sm\">{mapLocation.address}</Text>\n                  </Container>\n                )}\n              </GridItem>\n            )}\n          </Grid>\n        </Container>\n      </Section>\n    );\n  }\n);\nContactSection.displayName = 'ContactSection';\n\nexport { ContactSection }; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/marketing/FAQ.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Section, Container, H2, H3, Text, Button } from '@/components/ui';\nimport { cn } from '@/lib/utils/utils';\n\ninterface FAQItem {\n  question: string;\n  answer: string;\n}\n\ninterface FAQProps extends React.HTMLAttributes<HTMLDivElement> {\n  title?: string;\n  subtitle?: string;\n  items: FAQItem[];\n  variant?: 'default' | 'accordion' | 'simple';\n}\n\nexport const FAQ: React.FC<FAQProps> = ({\n  title,\n  subtitle,\n  items,\n  variant = 'default',\n  className,\n  ...props\n}) => {\n  const [openItems, setOpenItems] = useState<Set<number>>(new Set());\n\n  if (variant === 'accordion') {\n    const toggleItem = (index: number) => {\n      const newOpenItems = new Set(openItems);\n      if (newOpenItems.has(index)) {\n        newOpenItems.delete(index);\n      } else {\n        newOpenItems.add(index);\n      }\n      setOpenItems(newOpenItems);\n    };\n\n    return (\n      <Section className={className} {...props}>\n        <Container maxWidth=\"lg\">\n          {title && (\n            <Container>\n              <H2>{title}</H2>\n              {subtitle && (\n                <Text>{subtitle}</Text>\n              )}\n            </Container>\n          )}\n          \n          <Container>\n            {items.map((item, index) => (\n              <Container key={index}>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => toggleItem(index)}\n                >\n                  <span>{item.question}</span>\n                  <svg\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                  </svg>\n                </Button>\n                \n                {openItems.has(index) && (\n                  <Container>\n                    <Text>{item.answer}</Text>\n                  </Container>\n                )}\n              </Container>\n            ))}\n          </Container>\n        </Container>\n      </Section>\n    );\n  }\n\n  if (variant === 'simple') {\n    return (\n      <Section className={className} {...props}>\n        <Container maxWidth=\"lg\">\n          {title && (\n            <Container>\n              <H2>{title}</H2>\n              {subtitle && (\n                <Text>{subtitle}</Text>\n              )}\n            </Container>\n          )}\n          \n          <Container>\n            {items.map((item, index) => (\n              <Container key={index}>\n                <H3>\n                  {item.question}\n                </H3>\n                <Text>\n                  {item.answer}\n                </Text>\n              </Container>\n            ))}\n          </Container>\n        </Container>\n      </Section>\n    );\n  }\n\n  // Default variant\n  return (\n    <Section className={className} {...props}>\n      <Container maxWidth=\"lg\">\n        {title && (\n          <Container>\n            <H2>{title}</H2>\n            {subtitle && (\n              <Text>{subtitle}</Text>\n            )}\n          </Container>\n        )}\n        \n        <Container>\n          {items.map((item, index) => (\n            <Container key={index}>\n              <H3>\n                {item.question}\n              </H3>\n              <Text>\n                {item.answer}\n              </Text>\n            </Container>\n          ))}\n        </Container>\n      </Container>\n    </Section>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/marketing/FeatureCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ref' is defined but never used.","line":22,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cardClasses' is assigned a value but never used.","line":23,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { cn } from '@/lib/utils/utils';\nimport { Container, H3, Text, Span } from '@/components/ui';\n\ninterface FeatureCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  title: string;\n  description: string;\n  icon?: React.ReactNode;\n  variant?: 'default' | 'highlighted' | 'minimal';\n  href?: string;\n}\n\nconst FeatureCard = React.forwardRef<HTMLDivElement, FeatureCardProps>(\n  ({ \n    className, \n    title, \n    description, \n    icon,\n    variant = 'default',\n    href,\n    ...props \n  }, ref) => {\n    const cardClasses = cn(\n      'group relative',\n      variant === 'highlighted' ? 'bg-gradient-to-br from-indigo-50 to-blue-50 border-indigo-200' : 'bg-white',\n      variant === 'minimal' ? 'border-0 shadow-none' : 'border border-gray-200 shadow-sm',\n      'rounded-lg p-6 transition-all duration-200',\n      href ? 'cursor-pointer hover:shadow-md hover:border-indigo-300' : '',\n      className\n    );\n\n    const content = (\n      <>\n        {icon && (\n          <Container>\n            {icon}\n          </Container>\n        )}\n        \n        <H3>\n          {title}\n        </H3>\n        \n        <Text>\n          {description}\n        </Text>\n        \n        {href && (\n          <Container>\n            <Span>Learn more</Span>\n            <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n            </svg>\n          </Container>\n        )}\n      </>\n    );\n\n    if (href) {\n      return (\n        <a href={href} className={className}>\n          {content}\n        </a>\n      );\n    }\n\n    return (\n      <Container className={className} {...props}>\n        {content}\n      </Container>\n    );\n  }\n);\nFeatureCard.displayName = 'FeatureCard';\n\nexport { FeatureCard }; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/marketing/HeroSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'contentClasses' is assigned a value but never used.","line":30,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Container, H1, Text, Button } from '@/components/ui';\nimport { Section } from '@/components/ui/containers';\n\ninterface HeroSectionProps {\n  title: string;\n  subtitle?: string;\n  description?: string;\n  primaryAction?: {\n    label: string;\n    href: string;\n  };\n  secondaryAction?: {\n    label: string;\n    href: string;\n  };\n  backgroundImage?: string;\n  variant?: 'default' | 'centered';\n}\n\nexport const HeroSection: React.FC<HeroSectionProps> = ({\n  title,\n  subtitle,\n  description,\n  primaryAction,\n  secondaryAction,\n  backgroundImage,\n  variant = 'default'\n}) => {\n  const contentClasses = `hero-content ${variant === 'centered' ? 'hero-content-centered' : ''}`;\n\n  return (\n    <Section variant=\"brand\" padding=\"xl\">\n      {backgroundImage && (\n        <div style={{ backgroundImage: `url(${backgroundImage})` }}>\n          <div />\n        </div>\n      )}\n      \n      <Container maxWidth=\"xl\">\n        <H1>{title}</H1>\n        {subtitle && <Text>{subtitle}</Text>}\n        {description && <Text>{description}</Text>}\n        \n        {(primaryAction || secondaryAction) && (\n          <div>\n            {primaryAction && (\n              <a href={primaryAction.href}>\n                <Button variant=\"primary\" size=\"lg\">\n                  {primaryAction.label}\n                </Button>\n              </a>\n            )}\n            \n            {secondaryAction && (\n              <a href={secondaryAction.href}>\n                <Button variant=\"outline\" size=\"lg\">\n                  {secondaryAction.label} <span aria-hidden=\"true\">→</span>\n                </Button>\n              </a>\n            )}\n          </div>\n        )}\n      </Container>\n    </Section>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/marketing/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/providers/CMSDesignProvider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":24,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, ReactNode } from 'react';\nimport { generateCSSVariables } from '@/lib/design';\n\ninterface CMSDesignProviderProps {\n  children: ReactNode;\n}\n\nexport function CMSDesignProvider({ children }: CMSDesignProviderProps) {\n  useEffect(() => {\n    // Apply CMS design system CSS variables on mount\n    const applyCMSDesign = () => {\n      try {\n        // Try to get CMS config (simplified approach)\n        let cmsConfig = {};\n        \n        // Check if we have stored CMS config\n        if (typeof window !== 'undefined') {\n          const stored = localStorage.getItem('cmsConfig');\n          if (stored) {\n            try {\n              cmsConfig = JSON.parse(stored);\n            } catch (e) {\n              console.warn('Invalid stored CMS config, using defaults');\n            }\n          }\n        }\n        \n        // Generate and apply CSS variables\n        if (typeof window !== 'undefined') {\n          const cssVars = generateCSSVariables(cmsConfig);\n          const rootElement = document.documentElement;\n          \n          Object.entries(cssVars).forEach(([property, value]) => {\n            rootElement.style.setProperty(property, String(value));\n          });\n          \n          console.log('✅ CMS Design System applied successfully');\n        }\n      } catch (error) {\n        console.warn('CMS design system initialization failed, using defaults:', error);\n        \n        // Fallback: apply defaults\n        if (typeof window !== 'undefined') {\n          const defaultVars = generateCSSVariables({});\n          const rootElement = document.documentElement;\n          Object.entries(defaultVars).forEach(([property, value]) => {\n            rootElement.style.setProperty(property, String(value));\n          });\n        }\n      }\n    };\n\n    applyCMSDesign();\n  }, []);\n\n  return <>{children}</>;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/templates/PageTemplates.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":208,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":208,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardContent' is not defined.","line":209,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":209,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'H3' is not defined.","line":213,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":213,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":244,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":244,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardContent' is not defined.","line":245,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":245,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'H3' is not defined.","line":249,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":249,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":252,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":252,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":275,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":275,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardContent' is not defined.","line":276,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":276,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'H3' is not defined.","line":277,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":277,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":301,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":301,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardContent' is not defined.","line":302,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":302,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'H3' is not defined.","line":308,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":308,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Lead' is not defined.","line":334,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":334,"endColumn":12}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { CMSConfiguration } from '@/types/cms';\nimport { useCMS } from '@/hooks/useCMS';\nimport { useEditMode } from '@/components/admin/EditModeProvider';\nimport { \n  CMSContentPage \n} from '@/components/layout/CMSContentPage';\nimport { \n  CMSConversionPage \n} from '@/components/layout/CMSConversionPage';\nimport { \n  CMSStatusPage \n} from '@/components/layout/CMSStatusPage';\nimport { \n  H2, Text, Container\n} from '@/components/ui';\nimport { \n  Star,\n  Users,\n  Shield,\n  Phone,\n  Mail,\n  Calendar,\n  MessageCircle\n} from 'lucide-react';\nimport Link from 'next/link';\n\n// ============================================================================\n// PAGE TEMPLATE SYSTEM\n// ============================================================================\n\n/**\n * Template for creating new content pages (About, Help, Terms, etc.)\n */\nexport const createContentPageTemplate = (\n  pageType: keyof CMSConfiguration['pages'],\n  sections: React.ReactNode[]\n) => {\n  return function ContentPageTemplate() {\n    const { config: cmsConfig } = useCMS();\n    const { editMode, handleFieldChange } = useEditMode();\n    \n    const pageContent = cmsConfig?.pages?.[pageType];\n\n    if (!cmsConfig) {\n      return (\n        <Container>\n          <Container>\n            <H2>Loading...</H2>\n            <Text>Please wait while we load the content.</Text>\n          </Container>\n        </Container>\n      );\n    }\n\n    return (\n      <CMSContentPage \n        cmsConfig={cmsConfig} \n        pageType={pageType}\n        title={pageContent?.title || \"Page Title\"}\n        subtitle={pageContent?.subtitle || \"Page Subtitle\"}\n        description={pageContent?.content || \"Page description\"}\n        showTableOfContents={true}\n        showRelatedLinks={true}\n        containerMaxWidth=\"xl\"\n        isEditable={editMode}\n        onFieldChange={(field, value) => handleFieldChange(pageType, field, value)}\n      >\n        {sections}\n      </CMSContentPage>\n    );\n  };\n};\n\n/**\n * Template for creating new conversion pages (Booking, Contact, etc.)\n */\nexport const createConversionPageTemplate = (\n  pageType: keyof CMSConfiguration['pages'],\n  formContent: React.ReactNode,\n  trustSignals?: React.ReactNode\n) => {\n  return function ConversionPageTemplate() {\n    const { config: cmsConfig } = useCMS();\n    const { editMode, handleFieldChange } = useEditMode();\n    \n    const pageContent = cmsConfig?.pages?.[pageType];\n\n    if (!cmsConfig) {\n      return (\n        <Container>\n          <Container>\n            <H2>Loading...</H2>\n            <Text>Please wait while we load the form.</Text>\n          </Container>\n        </Container>\n      );\n    }\n\n    return (\n      <CMSConversionPage \n        cmsConfig={cmsConfig} \n        pageType={pageType}\n        title={pageContent?.title || \"Form Title\"}\n        subtitle={pageContent?.subtitle || \"Form Subtitle\"}\n        description={pageContent?.description || \"Form description\"}\n        containerMaxWidth=\"xl\"\n        isEditable={editMode}\n        onFieldChange={(field, value) => handleFieldChange(pageType, field, value)}\n      >\n        {formContent}\n        {trustSignals}\n      </CMSConversionPage>\n    );\n  };\n};\n\n/**\n * Template for creating new status pages (Success, Error, Pending, etc.)\n */\nexport const createStatusPageTemplate = (\n  pageType: keyof CMSConfiguration['pages'],\n  status: 'success' | 'pending' | 'error' | 'info',\n  content: React.ReactNode,\n  actions?: {\n    primary?: { text: string; href: string; variant?: 'default' | 'outline' | 'secondary' };\n    secondary?: { text: string; href: string; variant?: 'default' | 'outline' | 'secondary' };\n  }\n) => {\n  return function StatusPageTemplate() {\n    const { config: cmsConfig } = useCMS();\n    const { editMode, handleFieldChange } = useEditMode();\n    \n    const pageContent = cmsConfig?.pages?.[pageType];\n\n    if (!cmsConfig) {\n      return (\n        <div >\n          <div >\n            <H2>Loading...</H2>\n            <Text variant=\"muted\">Please wait while we load your status.</Text>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <CMSStatusPage \n        cmsConfig={cmsConfig} \n        pageType={pageType}\n        status={status}\n        title={pageContent?.title || \"Status Title\"}\n        subtitle={pageContent?.subtitle || \"Status Subtitle\"}\n        description={pageContent?.description || \"Status description\"}\n        showStatusIcon={true}\n        showActionButtons={!!actions}\n        primaryAction={actions?.primary}\n        secondaryAction={actions?.secondary}\n        containerMaxWidth=\"lg\"\n        isEditable={editMode}\n        onFieldChange={(field, value) => handleFieldChange(pageType, field, value)}\n      >\n        {content}\n      </CMSStatusPage>\n    );\n  };\n};\n\n// ============================================================================\n// COMMON SECTION TEMPLATES\n// ============================================================================\n\n/**\n * Standard section template with title and content\n */\nexport const createSection = (\n  id: string,\n  title: string,\n  content: React.ReactNode,\n  icon?: React.ComponentType<any>\n) => {\n  const IconComponent = icon;\n  \n  return (\n    <section id={id} >\n      <H2 >\n        {IconComponent && <IconComponent  />}\n        {title}\n      </H2>\n      {content}\n    </section>\n  );\n};\n\n/**\n * Stats section template\n */\nexport const createStatsSection = (stats: Array<{\n  icon: React.ComponentType<any>;\n  value: string;\n  label: string;\n}>) => {\n  return (\n    <div >\n      {stats.map((stat, index) => {\n        const IconComponent = stat.icon;\n        return (\n          <Card key={index} variant=\"outlined\" padding=\"lg\">\n            <CardContent >\n              <div >\n                <IconComponent  />\n              </div>\n              <H3 >{stat.value}</H3>\n              <Text variant=\"small\" >\n                {stat.label}\n              </Text>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n};\n\n/**\n * Contact cards section template\n */\nexport const createContactSection = (contacts: Array<{\n  icon: React.ComponentType<any>;\n  title: string;\n  value: string;\n  action: { text: string; href: string; type: 'tel' | 'mailto' | 'link' };\n}>) => {\n  return (\n    <div >\n      {contacts.map((contact, index) => {\n        const IconComponent = contact.icon;\n        const ActionComponent = contact.action.type === 'link' ? Link : 'a';\n        const actionProps = contact.action.type === 'link' \n          ? { href: contact.action.href }\n          : { href: contact.action.href };\n\n        return (\n          <Card key={index} variant=\"elevated\" padding=\"lg\">\n            <CardContent >\n              <div >\n                <IconComponent  />\n              </div>\n              <H3 >{contact.title}</H3>\n              <Text >{contact.value}</Text>\n              <ActionComponent {...actionProps}>\n                <Button variant=\"outline\" size=\"sm\">\n                  {contact.action.text}\n                </Button>\n              </ActionComponent>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n};\n\n/**\n * FAQ section template\n */\nexport const createFAQSection = (faqs: Array<{\n  question: string;\n  answer: string;\n  category?: string;\n}>) => {\n  return (\n    <div >\n      {faqs.map((faq, index) => (\n        <Card key={index} variant=\"outlined\" padding=\"lg\">\n          <CardContent>\n            <H3 >{faq.question}</H3>\n            <Text variant=\"small\" >\n              {faq.answer}\n            </Text>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n};\n\n/**\n * Feature cards section template\n */\nexport const createFeaturesSection = (features: Array<{\n  icon: React.ComponentType<any>;\n  title: string;\n  description: string;\n}>) => {\n  return (\n    <div >\n      {features.map((feature, index) => {\n        const IconComponent = feature.icon;\n        return (\n          <Card key={index} variant=\"elevated\" padding=\"lg\">\n            <CardContent>\n              <div >\n                <div >\n                  <IconComponent  />\n                </div>\n                <div>\n                  <H3>{feature.title}</H3>\n                </div>\n              </div>\n              <Text variant=\"small\" >\n                {feature.description}\n              </Text>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n};\n\n// ============================================================================\n// USAGE EXAMPLES\n// ============================================================================\n\n/**\n * Example: Creating a new About page using templates\n */\nexport const createAboutPage = () => {\n  const sections = [\n    createSection(\n      'overview',\n      'Our Story',\n      <Lead>\n        Fairfield Airport Car Service has been providing reliable, comfortable, and professional \n        transportation services for over a decade.\n      </Lead>\n    ),\n    createSection(\n      'stats',\n      'Why Choose Us',\n      createStatsSection([\n        { icon: Star, value: '10+ Years', label: 'Of reliable service excellence' },\n        { icon: Users, value: '10,000+', label: 'Satisfied customers served' },\n        { icon: Shield, value: '100%', label: 'Licensed & insured service' }\n      ])\n    ),\n    createSection(\n      'contact',\n      'Get in Touch',\n      createContactSection([\n        {\n          icon: Phone,\n          title: 'Phone',\n          value: '(203) 555-0123',\n          action: { text: 'Call Now', href: 'tel:(203) 555-0123', type: 'tel' }\n        },\n        {\n          icon: Mail,\n          title: 'Email',\n          value: 'info@fairfieldairportcar.com',\n          action: { text: 'Send Email', href: 'mailto:info@fairfieldairportcar.com', type: 'mailto' }\n        },\n        {\n          icon: Calendar,\n          title: 'Service Hours',\n          value: '24/7 Service Available',\n          action: { text: 'Book Now', href: '/book', type: 'link' }\n        }\n      ])\n    )\n  ];\n\n  return createContentPageTemplate('about', sections);\n};\n\n/**\n * Example: Creating a new Help page using templates\n */\nexport const createHelpPage = () => {\n  const sections = [\n    createSection(\n      'faq',\n      'Frequently Asked Questions',\n      createFAQSection([\n        {\n          question: 'How far in advance should I book?',\n          answer: 'We recommend booking at least 24 hours in advance, especially for early morning flights.'\n        },\n        {\n          question: 'What if my flight is delayed?',\n          answer: 'We monitor flight status and will adjust pickup times accordingly. No additional charges for reasonable delays.'\n        }\n      ])\n    ),\n    createSection(\n      'contact',\n      'Need Help?',\n      createContactSection([\n        {\n          icon: Phone,\n          title: 'Call Us',\n          value: '(203) 555-0123',\n          action: { text: 'Call Now', href: 'tel:(203) 555-0123', type: 'tel' }\n        },\n        {\n          icon: Mail,\n          title: 'Email Support',\n          value: 'support@fairfieldairportcar.com',\n          action: { text: 'Send Email', href: 'mailto:support@fairfieldairportcar.com', type: 'mailto' }\n        },\n        {\n          icon: MessageCircle,\n          title: 'Live Chat',\n          value: 'Available during business hours',\n          action: { text: 'Start Chat', href: '/contact', type: 'link' }\n        }\n      ])\n    )\n  ];\n\n  return createContentPageTemplate('help', sections);\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/AccessibilityEnhancer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/ActionButtonGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/ActionCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/ActionGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/ActivityItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'iconType' is assigned a value but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'itemClass' is assigned a value but never used.","line":26,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\ninterface ActivityItemProps {\n  icon: string;\n  iconType?: 'success' | 'pending' | 'warning' | 'error' | 'info';\n  title: string;\n  subtitle?: string;\n  amount?: string | number;\n  href?: string;\n  onClick?: () => void;\n  className?: string;\n  theme?: 'light' | 'dark';\n}\n\nexport const ActivityItem: React.FC<ActivityItemProps> = ({\n  icon,\n  iconType = 'info',\n  title,\n  subtitle,\n  amount,\n  href,\n  onClick,\n  className = '',\n  theme = 'light'\n}) => {\n  const itemClass = [\n    'activity-item',\n    theme === 'dark' ? 'dark-theme' : '',\n    (href || onClick) ? 'activity-item-clickable' : '',\n    className\n  ].filter(Boolean).join(' ');\n\n  const content = (\n    <>\n      <div>\n        {icon}\n      </div>\n      <div>\n        <p>{title}</p>\n        {subtitle && <p>{subtitle}</p>}\n      </div>\n      {amount && (\n        <div>{amount}</div>\n      )}\n    </>\n  );\n\n  if (href) {\n    return (\n      <a href={href} className={className}>\n        {content}\n      </a>\n    );\n  }\n\n  if (onClick) {\n    return (\n      <button onClick={onClick} className={className}>\n        {content}\n      </button>\n    );\n  }\n\n  return (\n    <div className={className}>\n      {content}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/ActivityList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/AdminPageWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/AlertItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'itemClass' is assigned a value but never used.","line":26,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\ninterface AlertItemProps {\n  icon: string;\n  type?: 'success' | 'warning' | 'error' | 'info';\n  title: string;\n  message: string;\n  href?: string;\n  onClick?: () => void;\n  onDismiss?: () => void;\n  className?: string;\n  theme?: 'light' | 'dark';\n}\n\nexport const AlertItem: React.FC<AlertItemProps> = ({\n  icon,\n  type = 'info',\n  title,\n  message,\n  href,\n  onClick,\n  onDismiss,\n  className = '',\n  theme = 'light'\n}) => {\n  const itemClass = [\n    'alert-item',\n    type,\n    theme === 'dark' ? 'dark-theme' : '',\n    (href || onClick) ? 'alert-item-clickable' : '',\n    className\n  ].filter(Boolean).join(' ');\n\n  const content = (\n    <>\n      <div>\n        {icon}\n      </div>\n      <div>\n        <p>{title}</p>\n        <p>{message}</p>\n      </div>\n      {onDismiss && (\n        <button \n          onClick={(e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            onDismiss();\n          }}\n          aria-label=\"Dismiss alert\"\n        >\n          ✕\n        </button>\n      )}\n    </>\n  );\n\n  if (href) {\n    return (\n      <a href={href} className={className}>\n        {content}\n      </a>\n    );\n  }\n\n  if (onClick) {\n    return (\n      <button onClick={onClick} className={className}>\n        {content}\n      </button>\n    );\n  }\n\n  return (\n    <div className={className}>\n      {content}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/AlertList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/ChatContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/ChatInput.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'adjustHeight'. Either include it or remove the dependency array.","line":105,"column":6,"nodeType":"ArrayExpression","endLine":105,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [adjustHeight, value]","fix":{"range":[2836,2843],"text":"[adjustHeight, value]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useState } from 'react';\nimport { Button } from './button';\nimport { Container } from '@/components/ui';\n\nexport interface ChatInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  onSend: (message: string) => void;\n  onVoiceInput?: (text: string) => void;\n  disabled?: boolean;\n  placeholder?: string;\n  isVoiceSupported?: boolean;\n  maxRows?: number;\n}\n\nexport const ChatInput: React.FC<ChatInputProps> = ({\n  value,\n  onChange,\n  onSend,\n  onVoiceInput,\n  disabled = false,\n  placeholder = \"Ask me anything...\",\n  isVoiceSupported = true,\n  maxRows = 4\n}) => {\n  const [isListening, setIsListening] = useState(false);\n  const recognitionRef = useRef<any>(null);\n\n  const handleSend = () => {\n    if (value.trim() && !disabled) {\n      onSend(value.trim());\n      onChange('');\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  const startVoiceInput = () => {\n    if (!isVoiceSupported || disabled) return;\n\n    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n      recognitionRef.current = new SpeechRecognition();\n      \n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = true;\n      recognitionRef.current.lang = 'en-US';\n\n      recognitionRef.current.onstart = () => {\n        setIsListening(true);\n      };\n\n      recognitionRef.current.onresult = (event: any) => {\n        let finalTranscript = '';\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          if (event.results[i].isFinal) {\n            finalTranscript += event.results[i][0].transcript;\n          }\n        }\n        \n        if (finalTranscript) {\n          onChange(value + finalTranscript);\n          onVoiceInput?.(finalTranscript);\n        }\n      };\n\n      recognitionRef.current.onerror = (event: any) => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n      };\n\n      recognitionRef.current.onend = () => {\n        setIsListening(false);\n      };\n\n      recognitionRef.current.start();\n    }\n  };\n\n  const stopVoiceInput = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n\n  // Auto-resize textarea\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const adjustHeight = () => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      const newHeight = Math.min(textarea.scrollHeight, maxRows * 24);\n      textarea.style.height = `${newHeight}px`;\n    }\n  };\n\n  React.useEffect(() => {\n    adjustHeight();\n  }, [value]);\n\n  return (\n    <Container>\n      <Container>\n        <textarea\n          ref={textareaRef}\n          value={value}\n          onChange={(e) => {\n            onChange(e.target.value);\n            adjustHeight();\n          }}\n          onKeyPress={handleKeyPress}\n          placeholder={placeholder}\n          disabled={disabled}\n          rows={1}\n        />\n        \n        {isVoiceSupported && (\n          <Button\n            onClick={isListening ? stopVoiceInput : startVoiceInput}\n            disabled={disabled}\n            variant={isListening ? 'primary' : 'outline'}\n            size=\"sm\"\n          >\n            {isListening ? '🛑' : '🎤'}\n          </Button>\n        )}\n        \n        <Button\n          onClick={handleSend}\n          disabled={!value.trim() || disabled}\n          variant=\"primary\"\n          size=\"sm\"\n        >\n          📤\n        </Button>\n      </Container>\n    </Container>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/ChatMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/DataTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/ErrorState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/FeatureGrid.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'columns' is assigned a value but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\ninterface Feature {\n  id?: string | number;\n  icon: string;\n  title: string;\n  description: string;\n}\n\ninterface FeatureGridProps {\n  features: Feature[];\n  columns?: 2 | 3 | 4;\n  className?: string;\n}\n\n/**\n * FeatureGrid - A reusable component for displaying feature cards in a grid\n * \n * @example\n * ```tsx\n * const features = [\n *   { icon: \"⏰\", title: \"On Time\", description: \"Reliable pickup times\" },\n *   { icon: \"🚗\", title: \"Clean Cars\", description: \"Well-maintained vehicles\" },\n *   { icon: \"💳\", title: \"Easy Payment\", description: \"Secure online booking\" }\n * ];\n * \n * <FeatureGrid features={features} columns={3} />\n * ```\n */\nexport const FeatureGrid: React.FC<FeatureGridProps> = ({ \n  features, \n  columns = 3, \n  className = '' \n}) => {\n  return (\n    <div className={className}>\n      {features.map((feature, index) => (\n        <div key={feature.id || index}>\n          <div>\n            {feature.icon}\n          </div>\n          <h4>\n            {feature.title}\n          </h4>\n          <p>\n            {feature.description}\n          </p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default FeatureGrid; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/FormSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'className' is assigned a value but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardBody, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Text } from '@/components/ui';\n\ninterface FormSectionProps {\n  title: string;\n  description?: string;\n  icon?: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const FormSection: React.FC<FormSectionProps> = ({\n  title,\n  description,\n  icon,\n  children,\n  className = ''\n}) => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>\n          {icon && <span>{icon}</span>}\n          <span>{title}</span>\n        </CardTitle>\n        {description && (\n          <Text>{description}</Text>\n        )}\n      </CardHeader>\n      <CardBody>\n        {children}\n      </CardBody>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/Grid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/GridSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sectionClass' is assigned a value but never used.","line":21,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'gridClass' is assigned a value but never used.","line":29,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Section, Container } from '@/components/ui';\n\ninterface GridSectionProps {\n  children: React.ReactNode;\n  columns?: 1 | 2 | 3 | 4 | 6;\n  variant?: 'stats' | 'activity' | 'actions' | 'content';\n  spacing?: 'sm' | 'md' | 'lg' | 'xl';\n  className?: string;\n  theme?: 'light' | 'dark';\n}\n\nexport const GridSection: React.FC<GridSectionProps> = ({\n  children,\n  columns = 4,\n  variant = 'content',\n  spacing = 'lg',\n  className = '',\n  theme = 'light'\n}) => {\n  const sectionClass = [\n    'grid-section',\n    `grid-section-${variant}`,\n    `grid-section-${spacing}`,\n    theme === 'dark' ? 'grid-section-dark' : 'grid-section-light',\n    className\n  ].filter(Boolean).join(' ');\n\n  const gridClass = [\n    'grid-container',\n    `grid-columns-${columns}`,\n    `grid-spacing-${spacing}`\n  ].filter(Boolean).join(' ');\n\n  return (\n    <Section>\n      <Container>\n        {children}\n      </Container>\n    </Section>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/HelpCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/InfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/LoadingState.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'className' is assigned a value but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sizeClasses' is assigned a value but never used.","line":22,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { LoadingSpinner } from '@/components/data';\nimport { Container, H3, Text } from '@/components/ui';\n\ninterface LoadingStateProps {\n  title?: string;\n  subtitle?: string;\n  message?: string;\n  showSpinner?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n}\n\nexport const LoadingState: React.FC<LoadingStateProps> = ({\n  title = 'Loading...',\n  subtitle,\n  message,\n  showSpinner = true,\n  size = 'md',\n  className = ''\n}) => {\n  const sizeClasses = {\n    'sm': 'h-32',\n    'md': 'h-64',\n    'lg': 'h-96'\n  }[size];\n\n  return (\n        <Container>\n      <Container>\n        {showSpinner && (\n          <Container>\n            <LoadingSpinner />\n          </Container>\n        )}\n        <H3>{title}</H3>\n        {subtitle && (\n          <Text>{subtitle}</Text>\n        )}\n        {message && (\n          <Text>{message}</Text>\n        )}\n      </Container>\n    </Container>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/PageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/PageSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/ProgressIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/SettingInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/SettingSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/SettingToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/StatCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/StatusMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/ToastProvider.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'removeToast'. Either include it or remove the dependency array.","line":40,"column":6,"nodeType":"ArrayExpression","endLine":40,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [removeToast]","fix":{"range":[1150,1152],"text":"[removeToast]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useCallback } from 'react';\n\nexport interface Toast {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  message: string;\n  duration?: number;\n}\n\ninterface ToastContextType {\n  toasts: Toast[];\n  addToast: (type: Toast['type'], message: string, duration?: number) => void;\n  removeToast: (id: string) => void;\n}\n\nconst ToastContext = createContext<ToastContextType | undefined>(undefined);\n\nexport const useToast = () => {\n  const context = useContext(ToastContext);\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n  return context;\n};\n\nexport const ToastProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [toasts, setToasts] = useState<Toast[]>([]);\n\n  const addToast = useCallback((type: Toast['type'], message: string, duration = 4000) => {\n    const id = Math.random().toString(36).substr(2, 9);\n    const toast: Toast = { id, type, message, duration };\n    \n    setToasts(prev => [...prev, toast]);\n\n    if (duration > 0) {\n      setTimeout(() => {\n        removeToast(id);\n      }, duration);\n    }\n  }, []);\n\n  const removeToast = useCallback((id: string) => {\n    setToasts(prev => prev.filter(toast => toast.id !== id));\n  }, []);\n\n  return (\n    <ToastContext.Provider value={{ toasts, addToast, removeToast }}>\n      {children}\n      <ToastContainer toasts={toasts} onRemove={removeToast} />\n    </ToastContext.Provider>\n  );\n};\n\ninterface ToastContainerProps {\n  toasts: Toast[];\n  onRemove: (id: string) => void;\n}\n\nconst ToastContainer: React.FC<ToastContainerProps> = ({ toasts, onRemove }) => {\n  if (toasts.length === 0) return null;\n\n  return (\n    <div >\n      {toasts.map(toast => (\n        <ToastItem key={toast.id} toast={toast} onRemove={onRemove} />\n      ))}\n    </div>\n  );\n};\n\ninterface ToastItemProps {\n  toast: Toast;\n  onRemove: (id: string) => void;\n}\n\nconst ToastItem: React.FC<ToastItemProps> = ({ toast, onRemove }) => {\n  const getToastClass = () => {\n    const baseClass = 'toast-item';\n    const typeClass = `toast-item-${toast.type}`;\n    return `${baseClass} ${typeClass}`;\n  };\n\n  const getIcon = () => {\n    switch (toast.type) {\n      case 'success': return '✅';\n      case 'error': return '❌';\n      case 'warning': return '⚠️';\n      case 'info': return 'ℹ️';\n      default: return '';\n    }\n  };\n\n  return (\n    <div className={getToastClass()}>\n      <div >\n        <span >{getIcon()}</span>\n        <span >{toast.message}</span>\n      </div>\n      \n      <button\n        onClick={() => onRemove(toast.id)}\n        \n      >\n        ×\n      </button>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/card.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'className' is assigned a value but never used.","line":71,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":76},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'className' is assigned a value but never used.","line":79,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'className' is assigned a value but never used.","line":87,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":74},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'className' is assigned a value but never used.","line":95,"column":77,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":86}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Container, H3, Text } from '@/components/ui';\n\nexport interface CardProps {\n  children: React.ReactNode;\n  variant?: 'default' | 'outlined' | 'elevated' | 'light' | 'dark';\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n  onClick?: () => void;\n  hoverable?: boolean;\n}\n\nexport interface CardHeaderProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport interface CardBodyProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport interface CardTitleProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport interface CardDescriptionProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const Card: React.FC<CardProps> = ({\n  children,\n  variant = 'default',\n  size = 'md',\n  className = '',\n  onClick,\n  hoverable = false,\n}) => {\n  const baseClasses = 'info-card';\n  const variantClasses = {\n    default: 'info-card-default',\n    outlined: 'info-card-outlined',\n    elevated: 'info-card-elevated',\n    light: 'info-card-light',\n    dark: 'info-card-dark',\n  };\n  const sizeClasses = {\n    sm: 'info-card-sm',\n    md: 'info-card-md',\n    lg: 'info-card-lg',\n  };\n\n  const classes = [\n    baseClasses,\n    variantClasses[variant],\n    sizeClasses[size],\n    hoverable ? 'info-card-hoverable' : '',\n    onClick ? 'info-card-clickable' : '',\n    className,\n  ].filter(Boolean).join(' ');\n\n  return (\n    <div className={classes} onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\nexport const CardHeader: React.FC<CardHeaderProps> = ({ children, className = '' }) => {\n  return (\n    <Container>\n      {children}\n    </Container>\n  );\n};\n\nexport const CardBody: React.FC<CardBodyProps> = ({ children, className = '' }) => {\n  return (\n    <Container>\n      {children}\n    </Container>\n  );\n};\n\nexport const CardTitle: React.FC<CardTitleProps> = ({ children, className = '' }) => {\n  return (\n    <H3>\n      {children}\n    </H3>\n  );\n};\n\nexport const CardDescription: React.FC<CardDescriptionProps> = ({ children, className = '' }) => {\n  return (\n    <Text>\n      {children}\n    </Text>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/containers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/design-system.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/form.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'className' is assigned a value but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'className' is assigned a value but never used.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'required' is assigned a value but never used.","line":51,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":11}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Container } from '@/components/ui';\n\nexport interface FormProps {\n  children: React.ReactNode;\n  onSubmit?: (e: React.FormEvent) => void;\n  className?: string;\n  method?: 'get' | 'post';\n  action?: string;\n  encType?: 'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain';\n  target?: string;\n  noValidate?: boolean;\n}\n\nexport const Form: React.FC<FormProps> = ({\n  children,\n  onSubmit,\n  className = '',\n  method = 'post',\n  action,\n  encType,\n  target,\n  noValidate = false,\n}) => {\n  return (\n    <form\n      onSubmit={onSubmit}\n      method={method}\n      action={action}\n      encType={encType}\n      target={target}\n      noValidate={noValidate}\n\n    >\n      {children}\n    </form>\n  );\n};\n\nexport interface FormGroupProps {\n  children: React.ReactNode;\n  className?: string;\n  error?: string;\n  required?: boolean;\n}\n\nexport const FormGroup: React.FC<FormGroupProps> = ({\n  children,\n  className = '',\n  error,\n  required = false,\n}) => {\n  return (\n    <Container>\n      {children}\n      {error && <Container>{error}</Container>}\n    </Container>\n  );\n};\n\nexport interface LabelProps {\n  children: React.ReactNode;\n  htmlFor?: string;\n  className?: string;\n  required?: boolean;\n}\n\nexport const Label: React.FC<LabelProps> = ({\n  children,\n  htmlFor,\n  className = '',\n  required = false,\n}) => {\n  return (\n    <label\n      htmlFor={htmlFor}\n      className={`form-label ${required ? 'form-label-required' : ''} ${className}`}\n    >\n      {children}\n      {required && <span className=\"form-label-required-indicator\">*</span>}\n    </label>\n  );\n};\n\nexport interface FieldsetProps {\n  children: React.ReactNode;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport const Fieldset: React.FC<FieldsetProps> = ({\n  children,\n  className = '',\n  disabled = false,\n}) => {\n  return (\n    <fieldset\n      className={`form-fieldset ${disabled ? 'form-fieldset-disabled' : ''} ${className}`}\n      disabled={disabled}\n    >\n      {children}\n    </fieldset>\n  );\n};\n\nexport interface LegendProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const Legend: React.FC<LegendProps> = ({\n  children,\n  className = '',\n}) => {\n  return (\n    <legend className={`form-legend ${className}`}>\n      {children}\n    </legend>\n  );\n};\n\nexport interface SelectProps {\n  children: React.ReactNode;\n  value?: string | number | readonly string[];\n  onChange?: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n  className?: string;\n  id?: string;\n  name?: string;\n  disabled?: boolean;\n  required?: boolean;\n  multiple?: boolean;\n  size?: number;\n  [key: string]: any; // Allow additional props\n}\n\nexport const Select = React.forwardRef<HTMLSelectElement, SelectProps>(\n  ({ children, value, onChange, className = '', id, name, disabled = false, required = false, multiple = false, size }, ref) => {\n  return (\n    <select\n      ref={ref}\n      value={value}\n      onChange={onChange}\n      id={id}\n      name={name}\n      disabled={disabled}\n      required={required}\n      multiple={multiple}\n      size={size}\n      className={`form-select ${disabled ? 'form-select-disabled' : ''} ${className}`}\n    >\n      {children}\n    </select>\n  );\n});\nSelect.displayName = 'Select';\n\nexport interface OptionProps {\n  children: React.ReactNode;\n  value?: string | number;\n  selected?: boolean;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport const Option: React.FC<OptionProps> = ({\n  children,\n  value,\n  selected = false,\n  disabled = false,\n  className = '',\n}) => {\n  return (\n    <option\n      value={value}\n      selected={selected}\n      disabled={disabled}\n      className={`form-option ${disabled ? 'form-option-disabled' : ''} ${className}`}\n    >\n      {children}\n    </option>\n  );\n};\n\nexport interface OptGroupProps {\n  children: React.ReactNode;\n  label: string;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport const OptGroup: React.FC<OptGroupProps> = ({\n  children,\n  label,\n  disabled = false,\n  className = '',\n}) => {\n  return (\n    <optgroup\n      label={label}\n      disabled={disabled}\n      className={`form-optgroup ${disabled ? 'form-optgroup-disabled' : ''} ${className}`}\n    >\n      {children}\n    </optgroup>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/help-tooltip.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { HelpCircle } from 'lucide-react';\nimport { cn } from '@/lib/utils/utils';\nimport { Button } from './button';\n\ninterface HelpTooltipProps {\n  content: string;\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst HelpTooltip: React.FC<HelpTooltipProps> = ({\n  content,\n  className,\n  size = 'md'\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-5 h-5',\n    lg: 'w-6 h-6'\n  };\n\n  return (\n    <div >\n      <button\n        type=\"button\"\n        className={cn(\n          'inline-flex items-center justify-center text-gray-500 hover:text-gray-700 transition-colors p-2',\n          className\n        )}\n        onMouseEnter={() => setIsVisible(true)}\n        onMouseLeave={() => setIsVisible(false)}\n        onFocus={() => setIsVisible(true)}\n        onBlur={() => setIsVisible(false)}\n      >\n        <HelpCircle className={sizeClasses[size]} />\n      </button>\n      \n      {isVisible && (\n        <div >\n          {content}\n          <div ></div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport { HelpTooltip }; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/input.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'className' is assigned a value but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'size' is assigned a value but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fullWidth' is assigned a value but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'baseClasses' is assigned a value but never used.","line":47,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sizeClasses' is assigned a value but never used.","line":48,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":20}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Container } from '@/components/ui';\n\nexport interface InputProps {\n  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search' | 'datetime-local' | 'date' | 'time' | 'file' | 'color' | 'range' | 'checkbox';\n  placeholder?: string;\n  value?: string;\n  defaultValue?: string;\n  checked?: boolean;\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  onFocus?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n  required?: boolean;\n  name?: string;\n  id?: string;\n  className?: string;\n  error?: boolean;\n  errorMessage?: string;\n  size?: 'sm' | 'md' | 'lg';\n  fullWidth?: boolean;\n  icon?: React.ReactNode;\n  iconPosition?: 'left' | 'right';\n}\n\nexport const Input: React.FC<InputProps> = ({\n  type = 'text',\n  placeholder,\n  value,\n  defaultValue,\n  checked,\n  onChange,\n  onBlur,\n  onFocus,\n  disabled = false,\n  required = false,\n  name,\n  id,\n  className = '',\n  error = false,\n  errorMessage,\n  size = 'md',\n  fullWidth = false,\n  icon,\n  iconPosition = 'left',\n}) => {\n  const baseClasses = 'form-input';\n  const sizeClasses = {\n    sm: 'form-input-sm',\n    md: 'form-input-md',\n    lg: 'form-input-lg',\n  };\n\n\n\n  return (\n    <Container>\n      {icon && iconPosition === 'left' && (\n        <span>{icon}</span>\n      )}\n      <input\n        type={type}\n        placeholder={placeholder}\n        value={value}\n        defaultValue={defaultValue}\n        checked={checked}\n        onChange={onChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        disabled={disabled}\n        required={required}\n        name={name}\n        id={id}\n      />\n      {icon && iconPosition === 'right' && (\n        <span>{icon}</span>\n      )}\n      {error && errorMessage && (\n        <Container>{errorMessage}</Container>\n      )}\n    </Container>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/inputs.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelectItem' is defined but never used.","line":4,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ref' is defined but never used.","line":20,"column":106,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":109},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ref' is defined but never used.","line":88,"column":85,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":88}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label, Text } from '@/components/ui';\nimport { cn } from '@/lib/utils/utils';\n\n// Enhanced Input Component\ninterface EnhancedInputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  label?: string;\n  error?: string;\n  helper?: string;\n  variant?: 'default' | 'filled' | 'outlined';\n  size?: 'sm' | 'md' | 'lg';\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n}\n\nconst EnhancedInput = React.forwardRef<HTMLInputElement, EnhancedInputProps>(\n  ({ className, label, error, helper, variant = 'default', size = 'md', leftIcon, rightIcon, ...props }, ref) => {\n    const variantClasses = {\n      default: 'border-border-primary focus:border-brand-primary',\n      filled: 'bg-bg-secondary border-border-primary focus:border-brand-primary',\n      outlined: 'border-2 border-border-primary focus:border-brand-primary'\n    };\n\n    const sizeClasses = {\n      sm: 'text-sm p-3',\n      md: 'text-base p-4',\n      lg: 'text-lg p-4'\n    };\n\n    const inputClasses = cn(\n      'w-full transition-colors duration-200',\n      variantClasses[variant],\n      sizeClasses[size],\n      error && 'border-error focus:border-error',\n      leftIcon && 'pl-10',\n      rightIcon && 'pr-10',\n      className\n    );\n\n    return (\n      <div >\n        {label && (\n          <Label>\n            {label}\n          </Label>\n        )}\n        <div >\n          {leftIcon && (\n            <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2\">\n              {leftIcon}\n            </div>\n          )}\n          <Input\n            className={inputClasses}\n            {...(props as any)}\n          />\n          {rightIcon && (\n            <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n              {rightIcon}\n            </div>\n          )}\n        </div>\n        {error && (\n          <Text size=\"sm\">{error}</Text>\n        )}\n        {helper && !error && (\n          <Text size=\"sm\">{helper}</Text>\n        )}\n      </div>\n    );\n  }\n);\nEnhancedInput.displayName = 'EnhancedInput';\n\n// Enhanced Textarea Component\ninterface EnhancedTextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  label?: string;\n  error?: string;\n  helper?: string;\n  variant?: 'default' | 'filled' | 'outlined';\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst EnhancedTextarea = React.forwardRef<HTMLTextAreaElement, EnhancedTextareaProps>(\n  ({ className, label, error, helper, variant = 'default', size = 'md', ...props }, ref) => {\n    const variantClasses = {\n      default: 'border-border-primary focus:border-brand-primary',\n      filled: 'bg-bg-secondary border-border-primary focus:border-brand-primary',\n      outlined: 'border-2 border-border-primary focus:border-brand-primary'\n    };\n\n    const sizeClasses = {\n      sm: 'text-sm p-3',\n      md: 'text-base p-4',\n      lg: 'text-lg p-4'\n    };\n\n    const textareaClasses = cn(\n      'w-full transition-colors duration-200',\n      variantClasses[variant],\n      sizeClasses[size],\n      error && 'border-error focus:border-error',\n      className\n    );\n\n    return (\n      <div >\n        {label && (\n          <Label>\n            {label}\n          </Label>\n        )}\n        <Textarea\n          className={textareaClasses}\n          {...(props as any)}\n        />\n        {error && (\n          <Text size=\"sm\">{error}</Text>\n        )}\n        {helper && !error && (\n          <Text size=\"sm\">{helper}</Text>\n        )}\n      </div>\n    );\n  }\n);\nEnhancedTextarea.displayName = 'EnhancedTextarea';\n\n// Enhanced Select Component\ninterface EnhancedSelectProps {\n  label?: string;\n  error?: string;\n  helper?: string;\n  placeholder?: string;\n  value?: string;\n  onValueChange?: (value: string) => void;\n  children: React.ReactNode;\n  variant?: 'default' | 'filled' | 'outlined';\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n}\n\nconst EnhancedSelect: React.FC<EnhancedSelectProps> = ({\n  label,\n  error,\n  helper,\n  placeholder,\n  value,\n  onValueChange,\n  children,\n  variant = 'default',\n  size = 'md',\n  className\n}) => {\n  const variantClasses = {\n    default: 'border-border-primary focus:border-brand-primary',\n    filled: 'bg-bg-secondary border-border-primary focus:border-brand-primary',\n    outlined: 'border-2 border-border-primary focus:border-brand-primary'\n  };\n\n  const sizeClasses = {\n    sm: 'text-sm p-3',\n    md: 'text-base p-4',\n    lg: 'text-lg p-4'\n  };\n\n  const selectClasses = cn(\n    'w-full transition-colors duration-200',\n    variantClasses[variant],\n    sizeClasses[size],\n    error && 'border-error focus:border-error',\n    className\n  );\n\n  return (\n    <div >\n      {label && (\n        <Label>\n          {label}\n        </Label>\n      )}\n      <Select value={value} onValueChange={onValueChange}>\n        <SelectTrigger className={selectClasses}>\n          <SelectValue placeholder={placeholder} />\n        </SelectTrigger>\n        <SelectContent>\n          {children}\n        </SelectContent>\n      </Select>\n      {error && (\n        <Text size=\"sm\">{error}</Text>\n      )}\n      {helper && !error && (\n        <Text size=\"sm\">{helper}</Text>\n      )}\n    </div>\n  );\n};\n\n// Form Field Component\ninterface FormFieldProps {\n  label?: string;\n  error?: string;\n  helper?: string;\n  required?: boolean;\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst FormField: React.FC<FormFieldProps> = ({ label, error, helper, required, children, className }) => {\n  return (\n    <div className={cn('w-full', className)}>\n      {label && (\n        <Label>\n          {label}\n          {required && <span>*</span>}\n        </Label>\n      )}\n      {children}\n      {error && (\n        <Text size=\"sm\">{error}</Text>\n      )}\n      {helper && !error && (\n        <Text size=\"sm\">{helper}</Text>\n      )}\n    </div>\n  );\n};\n\n// Search Input Component\ninterface SearchInputProps extends Omit<EnhancedInputProps, 'type'> {\n  onSearch?: (value: string) => void;\n  searchIcon?: React.ReactNode;\n}\n\nconst SearchInput: React.FC<SearchInputProps> = ({\n  onSearch,\n  searchIcon,\n  ...props\n}) => {\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter' && onSearch) {\n      onSearch(e.currentTarget.value);\n    }\n  };\n\n  return (\n    <EnhancedInput\n      type=\"search\"\n      onKeyDown={handleKeyDown}\n      leftIcon={searchIcon || (\n        <svg  fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n        </svg>\n      )}\n      {...props}\n    />\n  );\n};\n\n// Phone Input Component\ninterface PhoneInputProps extends Omit<EnhancedInputProps, 'type'> {\n  countryCode?: string;\n}\n\nconst PhoneInput: React.FC<PhoneInputProps> = ({\n  countryCode = '+1',\n  ...props\n}) => {\n  return (\n    <EnhancedInput\n      type=\"tel\"\n      leftIcon={\n        <span>{countryCode}</span>\n      }\n      {...props}\n    />\n  );\n};\n\nexport {\n  EnhancedInput,\n  EnhancedTextarea,\n  EnhancedSelect,\n  FormField,\n  SearchInput,\n  PhoneInput\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/layout/CMSLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'pageType' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":11}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { CMSConfiguration } from '@/types/cms';\nimport { generateCSSVariables } from '@/lib/design';\nimport { cn } from '@/lib/utils/utils';\n\ninterface CMSLayoutProps {\n  cmsConfig: CMSConfiguration;\n  pageType: keyof CMSConfiguration['pages'];\n  children: React.ReactNode;\n  variant?: 'standard' | 'marketing' | 'portal' | 'admin' | 'conversion' | 'content' | 'status';\n  className?: string;\n}\n\nexport const CMSLayout: React.FC<CMSLayoutProps> = ({\n  cmsConfig,\n  pageType,\n  children,\n  variant = 'standard',\n  className\n}) => {\n  const cssVars = generateCSSVariables(cmsConfig);\n  \n  return (\n    <div \n      className={cn(\n        'min-h-screen flex flex-col',\n        variant === 'marketing' && 'bg-bg-primary',\n        variant === 'portal' && 'bg-bg-secondary',\n        variant === 'admin' && 'bg-bg-muted',\n        variant === 'conversion' && 'bg-bg-primary',\n        variant === 'content' && 'bg-bg-primary',\n        variant === 'status' && 'bg-bg-primary',\n        className\n      )}\n      style={cssVars}\n    >\n      {/* Header will be added here */}\n      <main >\n        {children}\n      </main>\n      {/* Footer will be added here */}\n    </div>\n  );\n};\n\nCMSLayout.displayName = 'CMSLayout'; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/layout/PageContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/layout/PageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/text.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'classes' is assigned a value but never used.","line":56,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Container } from '@/components/ui';\n\nexport interface TextareaProps {\n  placeholder?: string;\n  value?: string;\n  defaultValue?: string;\n  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onFocus?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  disabled?: boolean;\n  required?: boolean;\n  name?: string;\n  id?: string;\n  className?: string;\n  error?: boolean;\n  errorMessage?: string;\n  size?: 'sm' | 'md' | 'lg';\n  fullWidth?: boolean;\n  rows?: number;\n  cols?: number;\n  maxLength?: number;\n  minLength?: number;\n  autoFocus?: boolean;\n}\n\nexport const Textarea: React.FC<TextareaProps> = ({\n  placeholder,\n  value,\n  defaultValue,\n  onChange,\n  onBlur,\n  onFocus,\n  disabled = false,\n  required = false,\n  name,\n  id,\n  className = '',\n  error = false,\n  errorMessage,\n  size = 'md',\n  fullWidth = false,\n  rows = 4,\n  cols,\n  maxLength,\n  minLength,\n  autoFocus,\n}) => {\n  const baseClasses = 'form-textarea';\n  const sizeClasses = {\n    sm: 'form-textarea-sm',\n    md: 'form-textarea-md',\n    lg: 'form-textarea-lg',\n  };\n\n  const classes = [\n    baseClasses,\n    sizeClasses[size],\n    error ? 'form-textarea-error' : '',\n    fullWidth ? 'w-full' : '',\n    className,\n  ].filter(Boolean).join(' ');\n\n  return (\n    <Container>\n      <textarea\n        placeholder={placeholder}\n        value={value}\n        defaultValue={defaultValue}\n        onChange={onChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        disabled={disabled}\n        required={required}\n        name={name}\n        id={id}\n        rows={rows}\n        cols={cols}\n        maxLength={maxLength}\n        minLength={minLength}\n        autoFocus={autoFocus}\n      />\n      {error && errorMessage && (\n        <Container>{errorMessage}</Container>\n      )}\n    </Container>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/typography.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/voice-input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/components/ui/voice-output.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/hooks/useBookingStatus.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/hooks/useBrowserFeatures.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/hooks/useBusinessSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/hooks/useCMS.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/hooks/useChat.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/hooks/useComments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/hooks/useSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/business/confluence-comments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/business/cost-tracking.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/business/error-monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/business/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/business/interaction-tracker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/business/performance-monitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/business/real-cost-tracking.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/business/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/business/settings-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/business/version-control.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/design-system/LayoutEnforcer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/design/cms-integrated-colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/design/cms-integrated-spacing.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cmsConfig' is defined but never used.","line":3,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CMSConfiguration } from '@/types/cms';\n\nexport const getCMSSpacing = (cmsConfig: CMSConfiguration) => ({\n  // Base spacing scale (consistent)\n  base: {\n    xs: '0.25rem',\n    sm: '0.5rem',\n    md: '1rem',\n    lg: '1.5rem',\n    xl: '2rem',\n    '2xl': '3rem',\n    '3xl': '4rem',\n    '4xl': '6rem',\n    '5xl': '8rem',\n  },\n  // Component-specific spacing\n  component: {\n    // Button padding\n    button: {\n      sm: '0.5rem 1rem',\n      md: '0.75rem 1.5rem',\n      lg: '1rem 2rem',\n      xl: '1.25rem 2.5rem',\n    },\n    // Input padding\n    input: {\n      sm: '0.5rem 0.75rem',\n      md: '0.75rem 1rem',\n      lg: '1rem 1.25rem',\n      xl: '1.25rem 1.5rem',\n    },\n    // Card padding\n    card: {\n      sm: '1rem',\n      md: '1.5rem',\n      lg: '2rem',\n      xl: '3rem',\n    },\n    // Section padding\n    section: {\n      sm: '2rem',\n      md: '3rem',\n      lg: '4rem',\n      xl: '6rem',\n    },\n  },\n  // Layout spacing\n  layout: {\n    // Container max widths\n    container: {\n      sm: '640px',\n      md: '768px',\n      lg: '1024px',\n      xl: '1280px',\n      '2xl': '1536px',\n      full: '100%',\n    },\n    // Grid gaps\n    grid: {\n      xs: '0.5rem',\n      sm: '1rem',\n      md: '1.5rem',\n      lg: '2rem',\n      xl: '3rem',\n    },\n    // Stack spacing\n    stack: {\n      xs: '0.5rem',\n      sm: '1rem',\n      md: '1.5rem',\n      lg: '2rem',\n      xl: '3rem',\n    },\n  },\n  // Responsive breakpoints\n  breakpoints: {\n    sm: '640px',\n    md: '768px',\n    lg: '1024px',\n    xl: '1280px',\n    '2xl': '1536px',\n  },\n});\n\n// Default spacing for when CMS is not available\nexport const defaultSpacing = {\n  base: {\n    xs: '0.25rem',\n    sm: '0.5rem',\n    md: '1rem',\n    lg: '1.5rem',\n    xl: '2rem',\n    '2xl': '3rem',\n    '3xl': '4rem',\n    '4xl': '6rem',\n    '5xl': '8rem',\n  },\n  component: {\n    button: {\n      sm: '0.5rem 1rem',\n      md: '0.75rem 1.5rem',\n      lg: '1rem 2rem',\n      xl: '1.25rem 2.5rem',\n    },\n    input: {\n      sm: '0.5rem 0.75rem',\n      md: '0.75rem 1rem',\n      lg: '1rem 1.25rem',\n      xl: '1.25rem 1.5rem',\n    },\n    card: {\n      sm: '1rem',\n      md: '1.5rem',\n      lg: '2rem',\n      xl: '3rem',\n    },\n    section: {\n      sm: '2rem',\n      md: '3rem',\n      lg: '4rem',\n      xl: '6rem',\n    },\n  },\n  layout: {\n    container: {\n      sm: '640px',\n      md: '768px',\n      lg: '1024px',\n      xl: '1280px',\n      '2xl': '1536px',\n      full: '100%',\n    },\n    grid: {\n      xs: '0.5rem',\n      sm: '1rem',\n      md: '1.5rem',\n      lg: '2rem',\n      xl: '3rem',\n    },\n    stack: {\n      xs: '0.5rem',\n      sm: '1rem',\n      md: '1.5rem',\n      lg: '2rem',\n      xl: '3rem',\n    },\n  },\n  breakpoints: {\n    sm: '640px',\n    md: '768px',\n    lg: '1024px',\n    xl: '1280px',\n    '2xl': '1536px',\n  },\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/design/cms-integrated-typography.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cmsConfig' is defined but never used.","line":3,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":43}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CMSConfiguration } from '@/types/cms';\n\nexport const getCMSTypography = (cmsConfig: CMSConfiguration) => ({\n  // Font family from CMS branding (using defaults for now)\n  fontFamily: {\n    primary: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\n    heading: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\n    mono: 'ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, monospace',\n  },\n  // Typography scale (consistent)\n  fontSize: {\n    xs: '0.75rem',\n    sm: '0.875rem',\n    base: '1rem',\n    lg: '1.125rem',\n    xl: '1.25rem',\n    '2xl': '1.5rem',\n    '3xl': '1.875rem',\n    '4xl': '2.25rem',\n    '5xl': '3rem',\n    '6xl': '3.75rem',\n  },\n  // Font weights from CMS or defaults\n  fontWeight: {\n    light: '300',\n    normal: '400',\n    medium: '500',\n    semibold: '600',\n    bold: '700',\n    extrabold: '800',\n  },\n  // Line heights\n  lineHeight: {\n    none: '1',\n    tight: '1.25',\n    snug: '1.375',\n    normal: '1.5',\n    relaxed: '1.625',\n    loose: '2',\n  },\n  // Letter spacing\n  letterSpacing: {\n    tighter: '-0.05em',\n    tight: '-0.025em',\n    normal: '0em',\n    wide: '0.025em',\n    wider: '0.05em',\n    widest: '0.1em',\n  },\n});\n\n// Default typography for when CMS is not available\nexport const defaultTypography = {\n  fontFamily: {\n    primary: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\n    heading: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\n    mono: 'ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, monospace',\n  },\n  fontSize: {\n    xs: '0.75rem',\n    sm: '0.875rem',\n    base: '1rem',\n    lg: '1.125rem',\n    xl: '1.25rem',\n    '2xl': '1.5rem',\n    '3xl': '1.875rem',\n    '4xl': '2.25rem',\n    '5xl': '3rem',\n    '6xl': '3.75rem',\n  },\n  fontWeight: {\n    light: '300',\n    normal: '400',\n    medium: '500',\n    semibold: '600',\n    bold: '700',\n    extrabold: '800',\n  },\n  lineHeight: {\n    none: '1',\n    tight: '1.25',\n    snug: '1.375',\n    normal: '1.5',\n    relaxed: '1.625',\n    loose: '2',\n  },\n  letterSpacing: {\n    tighter: '-0.05em',\n    tight: '-0.025em',\n    normal: '0em',\n    wide: '0.025em',\n    wider: '0.05em',\n    widest: '0.1em',\n  },\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/design/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'defaultColors' is defined but never used.","line":1,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'defaultTypography' is defined but never used.","line":2,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'defaultSpacing' is defined but never used.","line":3,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'tokens' is assigned a value but never used.","line":96,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":15}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getCMSColors, defaultColors } from './cms-integrated-colors';\nimport { getCMSTypography, defaultTypography } from './cms-integrated-typography';\nimport { getCMSSpacing, defaultSpacing } from './cms-integrated-spacing';\n\n// CMS-Integrated Design System\nexport { getCMSColors, defaultColors } from './cms-integrated-colors';\nexport { getCMSTypography, defaultTypography } from './cms-integrated-typography';\nexport { getCMSSpacing, defaultSpacing } from './cms-integrated-spacing';\n\n// Design system utilities\nexport const getDesignTokens = (cmsConfig: any) => ({\n  colors: getCMSColors(cmsConfig),\n  typography: getCMSTypography(cmsConfig),\n  spacing: getCMSSpacing(cmsConfig),\n});\n\n// CSS custom properties generator\nexport const generateCSSVariables = (cmsConfig: any) => {\n  const colors = getCMSColors(cmsConfig);\n  const typography = getCMSTypography(cmsConfig);\n  const spacing = getCMSSpacing(cmsConfig);\n\n  return {\n    // Brand colors\n    '--brand-primary': colors.brand.primary,\n    '--brand-primary-hover': colors.brand.primaryHover,\n    '--brand-secondary': colors.brand.secondary,\n    '--brand-secondary-hover': colors.brand.secondaryHover,\n    \n    // Semantic colors\n    '--success-base': colors.success.base,\n    '--success-hover': colors.success.hover,\n    '--success-light': colors.success.light,\n    '--success-dark': colors.success.dark,\n    '--warning-base': colors.warning.base,\n    '--warning-hover': colors.warning.hover,\n    '--warning-light': colors.warning.light,\n    '--warning-dark': colors.warning.dark,\n    '--error-base': colors.error.base,\n    '--error-hover': colors.error.hover,\n    '--error-light': colors.error.light,\n    '--error-dark': colors.error.dark,\n    '--info-base': colors.info.base,\n    '--info-hover': colors.info.hover,\n    '--info-light': colors.info.light,\n    '--info-dark': colors.info.dark,\n    \n    // Text colors\n    '--text-primary': colors.text.primary,\n    '--text-secondary': colors.text.secondary,\n    '--text-muted': colors.text.muted,\n    '--text-inverse': colors.text.inverse,\n    '--text-success': colors.text.success,\n    '--text-warning': colors.text.warning,\n    '--text-error': colors.text.error,\n    '--text-info': colors.text.info,\n    \n    // Background colors\n    '--bg-primary': colors.background.primary,\n    '--bg-secondary': colors.background.secondary,\n    '--bg-muted': colors.background.muted,\n    '--bg-inverse': colors.background.inverse,\n    '--bg-success': colors.background.success,\n    '--bg-warning': colors.background.warning,\n    '--bg-error': colors.background.error,\n    '--bg-info': colors.background.info,\n    \n    // Border colors\n    '--border-primary': colors.border.primary,\n    '--border-secondary': colors.border.secondary,\n    '--border-success': colors.border.success,\n    '--border-warning': colors.border.warning,\n    '--border-error': colors.border.error,\n    '--border-info': colors.border.info,\n    \n    // Typography\n    '--font-family-primary': typography.fontFamily.primary,\n    '--font-family-heading': typography.fontFamily.heading,\n    '--font-family-mono': typography.fontFamily.mono,\n    \n    // Spacing\n    '--spacing-xs': spacing.base.xs,\n    '--spacing-sm': spacing.base.sm,\n    '--spacing-md': spacing.base.md,\n    '--spacing-lg': spacing.base.lg,\n    '--spacing-xl': spacing.base.xl,\n    '--spacing-2xl': spacing.base['2xl'],\n    '--spacing-3xl': spacing.base['3xl'],\n    '--spacing-4xl': spacing.base['4xl'],\n    '--spacing-5xl': spacing.base['5xl'],\n  } as React.CSSProperties;\n};\n\n// Utility function to apply design tokens to a component\nexport const applyDesignTokens = (cmsConfig: any, componentProps: any = {}) => {\n  const tokens = getDesignTokens(cmsConfig);\n  const cssVars = generateCSSVariables(cmsConfig);\n  \n  return {\n    ...componentProps,\n    style: {\n      ...cssVars,\n      ...componentProps.style,\n    },\n  };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/services/ai-assistant.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/services/auth-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/services/backup-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/services/booking-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/services/cms-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/services/email-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/services/enhanced-booking-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'serverTimestamp' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Timestamp' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dateTime' is defined but never used.","line":298,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":298,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dateTime' is defined but never used.","line":317,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":317,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'location' is defined but never used.","line":370,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":370,"endColumn":60}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Enhanced Booking Service\n// Advanced booking management with dynamic pricing, surge pricing, and business logic\n\nimport { \n  collection, \n  doc, \n  getDoc, \n  getDocs, \n  addDoc, \n  updateDoc, \n  query, \n  where, \n  orderBy, \n  limit,\n  serverTimestamp,\n  Timestamp \n} from 'firebase/firestore';\nimport { db } from '@/lib/utils/firebase';\n\nexport interface EnhancedBooking {\n  id?: string;\n  name: string;\n  email: string;\n  phone: string;\n  pickupLocation: string;\n  dropoffLocation: string;\n  pickupDateTime: Date;\n  passengers: number;\n  status: 'pending' | 'confirmed' | 'in-progress' | 'completed' | 'cancelled';\n  baseFare: number;\n  dynamicFare: number;\n  surgeMultiplier: number;\n  depositPaid: boolean;\n  balanceDue: number;\n  flightNumber?: string;\n  notes?: string;\n  driverId?: string;\n  driverName?: string;\n  estimatedArrival?: Date;\n  actualArrival?: Date;\n  tipAmount?: number;\n  cancellationFee?: number;\n  squareOrderId?: string;\n  depositAmount?: number;\n  reminderSent?: boolean;\n  onMyWaySent?: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n  // Enhanced fields\n  distance: number; // in miles\n  duration: number; // in minutes\n  trafficConditions: 'low' | 'medium' | 'high';\n  weatherConditions: 'clear' | 'rain' | 'snow' | 'storm';\n  airportRushHour: boolean;\n  specialRequests: string[];\n  customerRating?: number;\n  driverRating?: number;\n  feedback?: string;\n}\n\nexport interface PricingConfig {\n  baseRate: number; // per mile\n  airportFee: number;\n  lateNightFee: number;\n  earlyMorningFee: number;\n  passengerFee: number; // per additional passenger\n  surgePricing: {\n    enabled: boolean;\n    maxMultiplier: number;\n    factors: {\n      airportRushHour: number;\n      weather: number;\n      traffic: number;\n      specialEvents: number;\n    };\n  };\n  cancellation: {\n    over24hRefundPercent: number;\n    between3And24hRefundPercent: number;\n    under3hRefundPercent: number;\n  };\n}\n\nexport interface Driver {\n  id: string;\n  name: string;\n  phone: string;\n  email: string;\n  status: 'available' | 'busy' | 'offline';\n  currentLocation?: {\n    lat: number;\n    lng: number;\n  };\n  rating: number;\n  totalRides: number;\n  vehicleInfo: {\n    make: string;\n    model: string;\n    year: number;\n    color: string;\n    licensePlate: string;\n  };\n  availability: {\n    startTime: string; // HH:MM\n    endTime: string; // HH:MM\n    daysOfWeek: number[]; // 0-6, Sunday = 0\n  };\n  lastUpdated: Date;\n}\n\nclass EnhancedBookingService {\n  private pricingConfig: PricingConfig = {\n    baseRate: 2.50, // $2.50 per mile\n    airportFee: 15.00,\n    lateNightFee: 10.00,\n    earlyMorningFee: 8.00,\n    passengerFee: 5.00,\n    surgePricing: {\n      enabled: true,\n      maxMultiplier: 2.5,\n      factors: {\n        airportRushHour: 1.3,\n        weather: 1.2,\n        traffic: 1.15,\n        specialEvents: 1.4,\n      },\n    },\n    cancellation: {\n      over24hRefundPercent: 100,\n      between3And24hRefundPercent: 50,\n      under3hRefundPercent: 0,\n    },\n  };\n\n  // Calculate dynamic fare with surge pricing\n  async calculateDynamicFare(\n    pickupLocation: string,\n    dropoffLocation: string,\n    pickupDateTime: Date,\n    passengers: number = 1\n  ): Promise<{\n    baseFare: number;\n    dynamicFare: number;\n    surgeMultiplier: number;\n    breakdown: {\n      distance: number;\n      baseRate: number;\n      airportFee: number;\n      timeFee: number;\n      passengerFee: number;\n      surgeFee: number;\n    };\n  }> {\n    // Get distance and duration from Google Maps API\n    const routeInfo = await this.getRouteInfo(pickupLocation, dropoffLocation);\n    \n    // Calculate base fare\n    const baseFare = routeInfo.distance * this.pricingConfig.baseRate;\n    \n    // Calculate additional fees\n    const airportFee = this.isAirportLocation(dropoffLocation) ? this.pricingConfig.airportFee : 0;\n    const timeFee = this.calculateTimeFee(pickupDateTime);\n    const passengerFee = Math.max(0, passengers - 1) * this.pricingConfig.passengerFee;\n    \n    // Calculate surge pricing\n    const surgeMultiplier = await this.calculateSurgeMultiplier(pickupDateTime, routeInfo);\n    const surgeFee = (baseFare + airportFee + timeFee + passengerFee) * (surgeMultiplier - 1);\n    \n    const dynamicFare = baseFare + airportFee + timeFee + passengerFee + surgeFee;\n    \n    return {\n      baseFare,\n      dynamicFare,\n      surgeMultiplier,\n      breakdown: {\n        distance: routeInfo.distance,\n        baseRate: baseFare,\n        airportFee,\n        timeFee,\n        passengerFee,\n        surgeFee,\n      },\n    };\n  }\n\n  // Get route information from Google Maps API\n  private async getRouteInfo(pickup: string, dropoff: string): Promise<{ distance: number; duration: number }> {\n    try {\n      const response = await fetch('/api/route-info', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ pickup, dropoff }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to get route information');\n      }\n      \n      const data = await response.json();\n      return {\n        distance: data.distance, // in miles\n        duration: data.duration, // in minutes\n      };\n    } catch (error) {\n      console.error('Error getting route info:', error);\n      // Fallback to estimated distance\n      return {\n        distance: 25, // Default estimate\n        duration: 30, // Default estimate\n      };\n    }\n  }\n\n  // Check if location is an airport\n  private isAirportLocation(location: string): boolean {\n    const airports = [\n      'JFK', 'LGA', 'EWR', 'BDL', 'HPN', 'ISP', 'SWF',\n      'John F. Kennedy', 'LaGuardia', 'Newark', 'Bradley',\n      'Westchester', 'Islip', 'Stewart'\n    ];\n    \n    return airports.some(airport => \n      location.toUpperCase().includes(airport.toUpperCase())\n    );\n  }\n\n  // Calculate time-based fees\n  private calculateTimeFee(pickupDateTime: Date): number {\n    const hour = pickupDateTime.getHours();\n    \n    // Late night fee (10 PM - 6 AM)\n    if (hour >= 22 || hour < 6) {\n      return this.pricingConfig.lateNightFee;\n    }\n    \n    // Early morning fee (6 AM - 9 AM)\n    if (hour >= 6 && hour < 9) {\n      return this.pricingConfig.earlyMorningFee;\n    }\n    \n    return 0;\n  }\n\n  // Calculate surge pricing multiplier\n  private async calculateSurgeMultiplier(\n    pickupDateTime: Date,\n    routeInfo: { distance: number; duration: number }\n  ): Promise<number> {\n    if (!this.pricingConfig.surgePricing.enabled) {\n      return 1.0;\n    }\n\n    let multiplier = 1.0;\n    const factors = this.pricingConfig.surgePricing.factors;\n\n    // Check for airport rush hour\n    if (this.isAirportRushHour(pickupDateTime)) {\n      multiplier *= factors.airportRushHour;\n    }\n\n    // Check weather conditions (would need weather API integration)\n    const weatherMultiplier = await this.getWeatherMultiplier(pickupDateTime);\n    multiplier *= weatherMultiplier;\n\n    // Check traffic conditions\n    const trafficMultiplier = this.getTrafficMultiplier(routeInfo.duration, routeInfo.distance);\n    multiplier *= trafficMultiplier;\n\n    // Check for special events\n    const eventMultiplier = await this.getSpecialEventMultiplier(pickupDateTime);\n    multiplier *= eventMultiplier;\n\n    // Cap at maximum multiplier\n    return Math.min(multiplier, this.pricingConfig.surgePricing.maxMultiplier);\n  }\n\n  // Check if it's airport rush hour\n  private isAirportRushHour(dateTime: Date): boolean {\n    const hour = dateTime.getHours();\n    const dayOfWeek = dateTime.getDay();\n    \n    // Weekday rush hours\n    if (dayOfWeek >= 1 && dayOfWeek <= 5) {\n      // Morning rush (6 AM - 10 AM)\n      if (hour >= 6 && hour <= 10) return true;\n      // Evening rush (4 PM - 8 PM)\n      if (hour >= 16 && hour <= 20) return true;\n    }\n    \n    // Weekend airport traffic (Friday evening, Sunday evening)\n    if (dayOfWeek === 5 && hour >= 16) return true; // Friday evening\n    if (dayOfWeek === 0 && hour >= 16) return true; // Sunday evening\n    \n    return false;\n  }\n\n  // Get weather multiplier (placeholder for weather API integration)\n  private async getWeatherMultiplier(dateTime: Date): Promise<number> {\n    // This would integrate with a weather API\n    // For now, return base multiplier\n    return 1.0;\n  }\n\n  // Get traffic multiplier based on travel time vs distance\n  private getTrafficMultiplier(duration: number, distance: number): number {\n    const expectedSpeed = 30; // mph\n    const actualSpeed = distance / (duration / 60);\n    \n    if (actualSpeed < expectedSpeed * 0.7) {\n      return this.pricingConfig.surgePricing.factors.traffic;\n    }\n    \n    return 1.0;\n  }\n\n  // Get special event multiplier (placeholder for event API integration)\n  private async getSpecialEventMultiplier(dateTime: Date): Promise<number> {\n    // This would integrate with an events API\n    // For now, return base multiplier\n    return 1.0;\n  }\n\n  // Create enhanced booking\n  async createEnhancedBooking(bookingData: Omit<EnhancedBooking, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    // Calculate dynamic fare\n    const fareInfo = await this.calculateDynamicFare(\n      bookingData.pickupLocation,\n      bookingData.dropoffLocation,\n      bookingData.pickupDateTime,\n      bookingData.passengers\n    );\n\n    // Get route info for enhanced data\n    const routeInfo = await this.getRouteInfo(\n      bookingData.pickupLocation,\n      bookingData.dropoffLocation\n    );\n\n    const enhancedBooking: Omit<EnhancedBooking, 'id'> = {\n      ...bookingData,\n      baseFare: fareInfo.baseFare,\n      dynamicFare: fareInfo.dynamicFare,\n      surgeMultiplier: fareInfo.surgeMultiplier,\n      balanceDue: fareInfo.dynamicFare - (bookingData.depositPaid ? bookingData.depositAmount || 0 : 0),\n      distance: routeInfo.distance,\n      duration: routeInfo.duration,\n      trafficConditions: this.getTrafficConditions(routeInfo.duration, routeInfo.distance),\n      weatherConditions: 'clear', // Would be set by weather API\n      airportRushHour: this.isAirportRushHour(bookingData.pickupDateTime),\n      specialRequests: bookingData.specialRequests || [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    const docRef = await addDoc(collection(db, 'bookings'), enhancedBooking);\n    return docRef.id;\n  }\n\n  // Get traffic conditions\n  private getTrafficConditions(duration: number, distance: number): 'low' | 'medium' | 'high' {\n    const expectedSpeed = 30; // mph\n    const actualSpeed = distance / (duration / 60);\n    \n    if (actualSpeed < expectedSpeed * 0.7) return 'high';\n    if (actualSpeed < expectedSpeed * 0.9) return 'medium';\n    return 'low';\n  }\n\n  // Find available drivers\n  async findAvailableDrivers(pickupDateTime: Date, location: string): Promise<Driver[]> {\n    const driversRef = collection(db, 'drivers');\n    const q = query(\n      driversRef,\n      where('status', '==', 'available'),\n      orderBy('rating', 'desc'),\n      limit(5)\n    );\n\n    const snapshot = await getDocs(q);\n    const drivers: Driver[] = [];\n\n    snapshot.forEach((doc) => {\n      const driverData = doc.data() as Driver;\n      driverData.id = doc.id;\n      \n      // Check if driver is available at the requested time\n      if (this.isDriverAvailable(driverData, pickupDateTime)) {\n        drivers.push(driverData);\n      }\n    });\n\n    return drivers;\n  }\n\n  // Check if driver is available at specific time\n  private isDriverAvailable(driver: Driver, pickupDateTime: Date): boolean {\n    const hour = pickupDateTime.getHours();\n    const dayOfWeek = pickupDateTime.getDay();\n    \n    // Check if driver works on this day\n    if (!driver.availability.daysOfWeek.includes(dayOfWeek)) {\n      return false;\n    }\n    \n    // Check if pickup time is within driver's hours\n    const [startHour] = driver.availability.startTime.split(':').map(Number);\n    const [endHour] = driver.availability.endTime.split(':').map(Number);\n    \n    return hour >= startHour && hour <= endHour;\n  }\n\n  // Update booking status with enhanced tracking\n  async updateBookingStatus(\n    bookingId: string, \n    status: EnhancedBooking['status'], \n    driverId?: string\n  ): Promise<void> {\n    const bookingRef = doc(db, 'bookings', bookingId);\n    \n    const updateData: any = {\n      status,\n      updatedAt: new Date(),\n    };\n    \n    if (driverId) {\n      updateData.driverId = driverId;\n      // Get driver info\n      const driverDoc = await getDoc(doc(db, 'drivers', driverId));\n      if (driverDoc.exists()) {\n        const driverData = driverDoc.data() as Driver;\n        updateData.driverName = driverData.name;\n      }\n    }\n    \n    await updateDoc(bookingRef, updateData);\n  }\n\n  // Get booking analytics\n  async getBookingAnalytics(): Promise<{\n    totalBookings: number;\n    totalRevenue: number;\n    averageFare: number;\n    surgePricingRevenue: number;\n    popularRoutes: Array<{ route: string; count: number }>;\n    peakHours: Array<{ hour: number; bookings: number }>;\n  }> {\n    const bookingsRef = collection(db, 'bookings');\n    const snapshot = await getDocs(bookingsRef);\n    \n    const bookings: EnhancedBooking[] = [];\n    snapshot.forEach((doc) => {\n      bookings.push({ id: doc.id, ...doc.data() } as EnhancedBooking);\n    });\n\n    const totalBookings = bookings.length;\n    const totalRevenue = bookings.reduce((sum, booking) => sum + booking.dynamicFare, 0);\n    const averageFare = totalBookings > 0 ? totalRevenue / totalBookings : 0;\n    const surgePricingRevenue = bookings.reduce((sum, booking) => \n      sum + (booking.dynamicFare - booking.baseFare), 0\n    );\n\n    // Calculate popular routes\n    const routeCounts: Record<string, number> = {};\n    bookings.forEach(booking => {\n      const route = `${booking.pickupLocation} → ${booking.dropoffLocation}`;\n      routeCounts[route] = (routeCounts[route] || 0) + 1;\n    });\n\n    const popularRoutes = Object.entries(routeCounts)\n      .map(([route, count]) => ({ route, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n\n    // Calculate peak hours\n    const hourCounts: Record<number, number> = {};\n    bookings.forEach(booking => {\n      const hour = new Date(booking.pickupDateTime).getHours();\n      hourCounts[hour] = (hourCounts[hour] || 0) + 1;\n    });\n\n    const peakHours = Object.entries(hourCounts)\n      .map(([hour, bookings]) => ({ hour: parseInt(hour), bookings }))\n      .sort((a, b) => b.bookings - a.bookings)\n      .slice(0, 5);\n\n    return {\n      totalBookings,\n      totalRevenue,\n      averageFare,\n      surgePricingRevenue,\n      popularRoutes,\n      peakHours,\n    };\n  }\n}\n\n// Export singleton instance\nexport const enhancedBookingService = new EnhancedBookingService(); ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/services/feedback-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/services/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/services/notification-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/services/performance-optimizer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'height' is defined but never used.","line":105,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fallback' is defined but never used.","line":115,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":13}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Performance Optimization Service\n// Handles code splitting, bundle optimization, and performance monitoring\n\nimport React from 'react';\n\ninterface PerformanceMetrics {\n  pageLoadTime: number;\n  timeToInteractive: number;\n  bundleSize: number;\n  apiResponseTime: number;\n  errorRate: number;\n}\n\ninterface OptimizationConfig {\n  enableCodeSplitting: boolean;\n  enableImageOptimization: boolean;\n  enableCaching: boolean;\n  enableCompression: boolean;\n  performanceBudget: {\n    pageLoadTime: number; // ms\n    bundleSize: number; // bytes\n    apiResponseTime: number; // ms\n  };\n}\n\nclass PerformanceOptimizer {\n  private metrics: PerformanceMetrics[] = [];\n  private config: OptimizationConfig;\n\n  constructor(config: OptimizationConfig) {\n    this.config = config;\n    this.setupPerformanceMonitoring();\n  }\n\n  // Monitor Core Web Vitals\n  private setupPerformanceMonitoring() {\n    if (typeof window === 'undefined') return;\n\n    // Monitor Largest Contentful Paint (LCP)\n    const observer = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      const lastEntry = entries[entries.length - 1];\n      if (lastEntry) {\n        this.recordMetric('lcp', lastEntry.startTime);\n      }\n    });\n    observer.observe({ entryTypes: ['largest-contentful-paint'] });\n\n    // Monitor First Input Delay (FID)\n    const fidObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      entries.forEach((entry) => {\n        const firstInputEntry = entry as any;\n        if (firstInputEntry.processingStart) {\n          this.recordMetric('fid', firstInputEntry.processingStart - firstInputEntry.startTime);\n        }\n      });\n    });\n    fidObserver.observe({ entryTypes: ['first-input'] });\n\n    // Monitor Cumulative Layout Shift (CLS)\n    let clsValue = 0;\n    const clsObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      entries.forEach((entry: any) => {\n        if (!entry.hadRecentInput) {\n          clsValue += entry.value;\n        }\n      });\n      this.recordMetric('cls', clsValue);\n    });\n    clsObserver.observe({ entryTypes: ['layout-shift'] });\n  }\n\n  // Record performance metric\n  private recordMetric(type: string, value: number) {\n    const metric = {\n      type,\n      value,\n      timestamp: Date.now(),\n      url: window.location.href\n    };\n\n    // Store metric\n    this.metrics.push({\n      pageLoadTime: type === 'pageLoad' ? value : 0,\n      timeToInteractive: type === 'tti' ? value : 0,\n      bundleSize: type === 'bundleSize' ? value : 0,\n      apiResponseTime: type === 'apiResponse' ? value : 0,\n      errorRate: type === 'errorRate' ? value : 0\n    });\n\n    // Send to analytics in production\n    if (process.env.NODE_ENV === 'production') {\n      this.sendToAnalytics(metric);\n    }\n\n    // Log in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`📊 Performance Metric: ${type} = ${value}ms`);\n    }\n  }\n\n  // Optimize images\n  optimizeImage(src: string, width: number, height: number): string {\n    if (!this.config.enableImageOptimization) return src;\n\n    // Use Next.js Image optimization\n    return `/_next/image?url=${encodeURIComponent(src)}&w=${width}&q=75`;\n  }\n\n  // Lazy load components\n  lazyLoadComponent<T extends React.ComponentType<any>>(\n    importFunc: () => Promise<{ default: T }>,\n    fallback?: React.ReactNode\n  ): React.LazyExoticComponent<T> {\n    return React.lazy(() => \n      importFunc().then(module => ({\n        default: module.default\n      }))\n    );\n  }\n\n  // Optimize API calls with caching\n  async cachedApiCall<T>(\n    url: string,\n    options: RequestInit = {},\n    cacheTime: number = 5 * 60 * 1000 // 5 minutes\n  ): Promise<T> {\n    if (!this.config.enableCaching) {\n      return this.makeApiCall<T>(url, options);\n    }\n\n    const cacheKey = `api-cache-${url}-${JSON.stringify(options)}`;\n    const cached = sessionStorage.getItem(cacheKey);\n    \n    if (cached) {\n      const { data, timestamp } = JSON.parse(cached);\n      if (Date.now() - timestamp < cacheTime) {\n        return data;\n      }\n    }\n\n    const data = await this.makeApiCall<T>(url, options);\n    \n    // Cache the result\n    sessionStorage.setItem(cacheKey, JSON.stringify({\n      data,\n      timestamp: Date.now()\n    }));\n\n    return data;\n  }\n\n  private async makeApiCall<T>(url: string, options: RequestInit = {}): Promise<T> {\n    const startTime = Date.now();\n    \n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers\n        }\n      });\n\n      const responseTime = Date.now() - startTime;\n      this.recordMetric('apiResponse', responseTime);\n\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      this.recordMetric('errorRate', 1);\n      throw error;\n    }\n  }\n\n  // Bundle size optimization\n  optimizeBundleSize(): void {\n    if (!this.config.enableCodeSplitting) return;\n\n    // Dynamic imports for heavy components\n    const heavyComponents = {\n      DataTable: () => import('@/components/ui/DataTable'),\n      // Only include components that actually exist\n    };\n\n    // Preload critical components\n    Object.entries(heavyComponents).forEach(([name, importFunc]) => {\n      if (document.querySelector(`[data-component=\"${name}\"]`)) {\n        importFunc();\n      }\n    });\n  }\n\n  // Compression optimization\n  enableCompression(): void {\n    if (!this.config.enableCompression) return;\n\n    // Enable gzip compression for text assets\n    const textAssets = document.querySelectorAll('link[rel=\"stylesheet\"], script[type=\"text/javascript\"]');\n    textAssets.forEach((asset) => {\n      if (asset instanceof HTMLLinkElement) {\n        asset.href = asset.href.replace(/\\.(css|js)$/, '.gz.$1');\n      }\n    });\n  }\n\n  // Performance budget checking\n  checkPerformanceBudget(metrics: PerformanceMetrics): boolean {\n    const budget = this.config.performanceBudget;\n    \n    const violations = [\n      metrics.pageLoadTime > budget.pageLoadTime && 'Page load time exceeded budget',\n      metrics.bundleSize > budget.bundleSize && 'Bundle size exceeded budget',\n      metrics.apiResponseTime > budget.apiResponseTime && 'API response time exceeded budget'\n    ].filter(Boolean);\n\n    if (violations.length > 0) {\n      console.warn('🚨 Performance budget violations:', violations);\n      return false;\n    }\n\n    return true;\n  }\n\n  // Get performance report\n  getPerformanceReport(): {\n    averagePageLoadTime: number;\n    averageApiResponseTime: number;\n    errorRate: number;\n    recommendations: string[];\n  } {\n    if (this.metrics.length === 0) {\n      return {\n        averagePageLoadTime: 0,\n        averageApiResponseTime: 0,\n        errorRate: 0,\n        recommendations: ['No performance data available']\n      };\n    }\n\n    const avgPageLoadTime = this.metrics.reduce((sum, m) => sum + m.pageLoadTime, 0) / this.metrics.length;\n    const avgApiResponseTime = this.metrics.reduce((sum, m) => sum + m.apiResponseTime, 0) / this.metrics.length;\n    const errorRate = this.metrics.reduce((sum, m) => sum + m.errorRate, 0) / this.metrics.length;\n\n    const recommendations: string[] = [];\n\n    if (avgPageLoadTime > 3000) {\n      recommendations.push('Consider implementing code splitting for faster page loads');\n    }\n\n    if (avgApiResponseTime > 1000) {\n      recommendations.push('Optimize API endpoints or implement caching');\n    }\n\n    if (errorRate > 0.05) {\n      recommendations.push('Investigate and fix error sources');\n    }\n\n    return {\n      averagePageLoadTime: avgPageLoadTime,\n      averageApiResponseTime: avgApiResponseTime,\n      errorRate,\n      recommendations\n    };\n  }\n\n  private async sendToAnalytics(metric: any) {\n    try {\n      await fetch('/api/analytics/performance', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(metric)\n      });\n    } catch (error) {\n      console.error('Failed to send performance metric:', error);\n    }\n  }\n}\n\n// Default configuration\nconst defaultConfig: OptimizationConfig = {\n  enableCodeSplitting: true,\n  enableImageOptimization: true,\n  enableCaching: true,\n  enableCompression: true,\n  performanceBudget: {\n    pageLoadTime: 3000, // 3 seconds\n    bundleSize: 500 * 1024, // 500KB\n    apiResponseTime: 1000 // 1 second\n  }\n};\n\n// Export singleton instance\nexport const performanceOptimizer = new PerformanceOptimizer(defaultConfig);\n\n// Export types\nexport type { PerformanceMetrics, OptimizationConfig }; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/services/promo-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/services/security-monitoring-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/services/square-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/services/twilio-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/services/user-experience-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'performanceOptimizer' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'locationInterval' is assigned a value but never used.","line":350,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":350,"endColumn":27}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// User Experience Service\n// Handles real-time tracking, offline capabilities, accessibility, and mobile optimization\n\nimport { performanceOptimizer } from './performance-optimizer';\n\ninterface UserPreferences {\n  accessibility: {\n    highContrast: boolean;\n    reduceMotion: boolean;\n    fontSize: 'normal' | 'large' | 'extra-large';\n    screenReader: boolean;\n  };\n  notifications: {\n    email: boolean;\n    sms: boolean;\n    push: boolean;\n    reminderTime: number; // hours before pickup\n  };\n  language: string;\n  timezone: string;\n}\n\ninterface TrackingData {\n  bookingId: string;\n  driverLocation?: {\n    lat: number;\n    lng: number;\n    timestamp: Date;\n    heading: number;\n    speed: number;\n  };\n  estimatedArrival?: Date;\n  status: 'confirmed' | 'driver-assigned' | 'en-route' | 'arrived' | 'completed';\n  lastUpdated: Date;\n}\n\ninterface OfflineData {\n  bookings: any[];\n  userPreferences: UserPreferences;\n  cachedRoutes: Record<string, any>;\n  pendingActions: Array<{\n    type: 'booking' | 'payment' | 'feedback';\n    data: any;\n    timestamp: Date;\n  }>;\n}\n\nclass UserExperienceService {\n  private userPreferences: UserPreferences;\n  private trackingData: Map<string, TrackingData> = new Map();\n  private offlineData: OfflineData;\n  private websocketConnection?: WebSocket;\n  private isOnline: boolean = navigator.onLine;\n\n  constructor() {\n    this.userPreferences = this.loadUserPreferences();\n    this.offlineData = this.loadOfflineData();\n    this.setupEventListeners();\n    this.initializeAccessibility();\n  }\n\n  // Load user preferences from localStorage\n  private loadUserPreferences(): UserPreferences {\n    if (typeof window === 'undefined') {\n      return this.getDefaultPreferences();\n    }\n\n    const stored = localStorage.getItem('user-preferences');\n    if (stored) {\n      try {\n        return { ...this.getDefaultPreferences(), ...JSON.parse(stored) };\n      } catch (error) {\n        console.error('Failed to load user preferences:', error);\n      }\n    }\n\n    return this.getDefaultPreferences();\n  }\n\n  // Get default user preferences\n  private getDefaultPreferences(): UserPreferences {\n    return {\n      accessibility: {\n        highContrast: false,\n        reduceMotion: false,\n        fontSize: 'normal',\n        screenReader: false,\n      },\n      notifications: {\n        email: true,\n        sms: true,\n        push: false,\n        reminderTime: 24,\n      },\n      language: 'en',\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    };\n  }\n\n  // Load offline data from localStorage\n  private loadOfflineData(): OfflineData {\n    if (typeof window === 'undefined') {\n      return this.getDefaultOfflineData();\n    }\n\n    const stored = localStorage.getItem('offline-data');\n    if (stored) {\n      try {\n        return { ...this.getDefaultOfflineData(), ...JSON.parse(stored) };\n      } catch (error) {\n        console.error('Failed to load offline data:', error);\n      }\n    }\n\n    return this.getDefaultOfflineData();\n  }\n\n  // Get default offline data\n  private getDefaultOfflineData(): OfflineData {\n    return {\n      bookings: [],\n      userPreferences: this.getDefaultPreferences(),\n      cachedRoutes: {},\n      pendingActions: [],\n    };\n  }\n\n  // Setup event listeners for online/offline status\n  private setupEventListeners(): void {\n    if (typeof window === 'undefined') return;\n\n    // Online/offline status\n    window.addEventListener('online', () => {\n      this.isOnline = true;\n      this.syncOfflineData();\n      this.showNotification('Connection restored', 'You are back online');\n    });\n\n    window.addEventListener('offline', () => {\n      this.isOnline = false;\n      this.showNotification('Connection lost', 'You are offline. Some features may be limited.');\n    });\n\n    // Before unload - save current state\n    window.addEventListener('beforeunload', () => {\n      this.saveOfflineData();\n    });\n\n    // Service worker for offline functionality\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register('/sw.js').catch(console.error);\n    }\n  }\n\n  // Initialize accessibility features\n  private initializeAccessibility(): void {\n    if (typeof window === 'undefined') return;\n\n    // Apply accessibility settings\n    this.applyAccessibilitySettings();\n\n    // Setup keyboard navigation\n    this.setupKeyboardNavigation();\n\n    // Setup screen reader announcements\n    this.setupScreenReaderAnnouncements();\n  }\n\n  // Apply accessibility settings to the page\n  private applyAccessibilitySettings(): void {\n    const root = document.documentElement;\n    const settings = this.userPreferences.accessibility;\n\n    // High contrast\n    root.classList.toggle('high-contrast', settings.highContrast);\n\n    // Reduced motion\n    root.classList.toggle('reduce-motion', settings.reduceMotion);\n\n    // Font size\n    root.classList.remove('font-large', 'font-extra-large');\n    if (settings.fontSize === 'large') {\n      root.classList.add('font-large');\n    } else if (settings.fontSize === 'extra-large') {\n      root.classList.add('font-extra-large');\n    }\n\n    // Screen reader support\n    if (settings.screenReader) {\n      this.enhanceScreenReaderSupport();\n    }\n  }\n\n  // Setup keyboard navigation\n  private setupKeyboardNavigation(): void {\n    document.addEventListener('keydown', (event) => {\n      // Skip to main content\n      if (event.key === 'Tab' && event.altKey) {\n        event.preventDefault();\n        const mainContent = document.querySelector('main');\n        if (mainContent) {\n          (mainContent as HTMLElement).focus();\n        }\n      }\n\n      // Escape key to close modals\n      if (event.key === 'Escape') {\n        const modals = document.querySelectorAll('[role=\"dialog\"]');\n        modals.forEach(modal => {\n          if (modal.classList.contains('open')) {\n            this.closeModal(modal as HTMLElement);\n          }\n        });\n      }\n    });\n  }\n\n  // Setup screen reader announcements\n  private setupScreenReaderAnnouncements(): void {\n    // Create live region for announcements\n    const announcementRegion = document.createElement('div');\n    announcementRegion.setAttribute('aria-live', 'polite');\n    announcementRegion.setAttribute('aria-atomic', 'true');\n    announcementRegion.style.position = 'absolute';\n    announcementRegion.style.left = '-10000px';\n    announcementRegion.style.width = '1px';\n    announcementRegion.style.height = '1px';\n    announcementRegion.style.overflow = 'hidden';\n    announcementRegion.id = 'screen-reader-announcements';\n    \n    document.body.appendChild(announcementRegion);\n  }\n\n  // Enhance screen reader support\n  private enhanceScreenReaderSupport(): void {\n    // Add ARIA labels to interactive elements\n    const buttons = document.querySelectorAll('button:not([aria-label])');\n    buttons.forEach(button => {\n      const text = button.textContent?.trim();\n      if (text) {\n        button.setAttribute('aria-label', text);\n      }\n    });\n\n    // Add skip links\n    this.addSkipLinks();\n  }\n\n  // Add skip links for keyboard navigation\n  private addSkipLinks(): void {\n    const skipLinks = [\n      { href: '#main-content', text: 'Skip to main content' },\n      { href: '#navigation', text: 'Skip to navigation' },\n      { href: '#booking-form', text: 'Skip to booking form' },\n    ];\n\n    const skipLinksContainer = document.createElement('div');\n    skipLinksContainer.className = 'skip-links';\n\n    skipLinks.forEach(link => {\n      const skipLink = document.createElement('a');\n      skipLink.href = link.href;\n      skipLink.textContent = link.text;\n      skipLink.className = 'skip-link';\n      skipLinksContainer.appendChild(skipLink);\n    });\n\n    document.body.insertBefore(skipLinksContainer, document.body.firstChild);\n  }\n\n  // Close modal\n  private closeModal(modal: HTMLElement): void {\n    modal.classList.remove('open');\n    modal.setAttribute('aria-hidden', 'true');\n    \n    // Return focus to trigger element\n    const trigger = document.querySelector(`[data-modal=\"${modal.id}\"]`);\n    if (trigger) {\n      (trigger as HTMLElement).focus();\n    }\n  }\n\n  // Start real-time tracking for a booking\n  startTracking(bookingId: string): void {\n    if (!this.isOnline) {\n      console.warn('Cannot start tracking while offline');\n      return;\n    }\n\n    // Initialize tracking data\n    this.trackingData.set(bookingId, {\n      bookingId,\n      status: 'confirmed',\n      lastUpdated: new Date(),\n    });\n\n    // Connect to WebSocket for real-time updates\n    this.connectWebSocket(bookingId);\n\n    // Start periodic location updates\n    this.startLocationUpdates(bookingId);\n  }\n\n  // Connect to WebSocket for real-time updates\n  private connectWebSocket(bookingId: string): void {\n    const wsUrl = `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.host}/api/ws/tracking/${bookingId}`;\n    \n    this.websocketConnection = new WebSocket(wsUrl);\n\n    this.websocketConnection.onopen = () => {\n      console.log('WebSocket connected for tracking');\n    };\n\n    this.websocketConnection.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      this.updateTrackingData(bookingId, data);\n    };\n\n    this.websocketConnection.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      // Fallback to polling\n      this.startPolling(bookingId);\n    };\n\n    this.websocketConnection.onclose = () => {\n      console.log('WebSocket disconnected');\n      // Fallback to polling\n      this.startPolling(bookingId);\n    };\n  }\n\n  // Start polling as fallback for WebSocket\n  private startPolling(bookingId: string): void {\n    const pollInterval = setInterval(async () => {\n      try {\n        const response = await fetch(`/api/booking/${bookingId}/status`);\n        const data = await response.json();\n        this.updateTrackingData(bookingId, data);\n      } catch (error) {\n        console.error('Polling error:', error);\n        clearInterval(pollInterval);\n      }\n    }, 10000); // Poll every 10 seconds\n  }\n\n  // Start location updates for driver tracking\n  private startLocationUpdates(bookingId: string): void {\n    // This would integrate with driver's GPS\n    // For now, simulate location updates\n    const locationInterval = setInterval(() => {\n      // Simulate driver location updates\n      const mockLocation = {\n        lat: 40.7128 + (Math.random() - 0.5) * 0.01,\n        lng: -74.0060 + (Math.random() - 0.5) * 0.01,\n        timestamp: new Date(),\n        heading: Math.random() * 360,\n        speed: 30 + Math.random() * 20,\n      };\n\n      this.updateTrackingData(bookingId, { driverLocation: mockLocation });\n    }, 30000); // Update every 30 seconds\n  }\n\n  // Update tracking data\n  private updateTrackingData(bookingId: string, data: Partial<TrackingData>): void {\n    const currentData = this.trackingData.get(bookingId);\n    if (!currentData) return;\n\n    const updatedData = { ...currentData, ...data, lastUpdated: new Date() };\n    this.trackingData.set(bookingId, updatedData);\n\n    // Update UI\n    this.updateTrackingUI(bookingId, updatedData);\n\n    // Announce to screen reader\n    this.announceToScreenReader(this.getTrackingAnnouncement(updatedData));\n  }\n\n  // Update tracking UI\n  private updateTrackingUI(bookingId: string, data: TrackingData): void {\n    // Update status display\n    const statusElement = document.querySelector(`[data-booking-id=\"${bookingId}\"] .status`);\n    if (statusElement) {\n      statusElement.textContent = data.status;\n      statusElement.className = `status status-${data.status}`;\n    }\n\n    // Update map if available\n    if (data.driverLocation) {\n      this.updateMap(bookingId, data.driverLocation);\n    }\n\n    // Update estimated arrival\n    if (data.estimatedArrival) {\n      this.updateEstimatedArrival(bookingId, data.estimatedArrival);\n    }\n  }\n\n  // Update map with driver location\n  private updateMap(bookingId: string, location: TrackingData['driverLocation']): void {\n    // This would integrate with Google Maps API\n    // For now, just log the location\n    console.log(`Driver location for booking ${bookingId}:`, location);\n  }\n\n  // Update estimated arrival time\n  private updateEstimatedArrival(bookingId: string, estimatedArrival: Date): void {\n    const etaElement = document.querySelector(`[data-booking-id=\"${bookingId}\"] .eta`);\n    if (etaElement) {\n      const minutes = Math.round((estimatedArrival.getTime() - Date.now()) / 60000);\n      etaElement.textContent = `${minutes} minutes`;\n    }\n  }\n\n  // Get tracking announcement for screen reader\n  private getTrackingAnnouncement(data: TrackingData): string {\n    if (data.status === 'en-route' && data.driverLocation) {\n      return 'Driver is on the way to your location';\n    } else if (data.status === 'arrived') {\n      return 'Driver has arrived at your location';\n    } else if (data.status === 'completed') {\n      return 'Your ride has been completed';\n    }\n    return '';\n  }\n\n  // Announce to screen reader\n  private announceToScreenReader(message: string): void {\n    if (!message) return;\n\n    const announcementRegion = document.getElementById('screen-reader-announcements');\n    if (announcementRegion) {\n      announcementRegion.textContent = message;\n      setTimeout(() => {\n        announcementRegion.textContent = '';\n      }, 1000);\n    }\n  }\n\n  // Show notification to user\n  showNotification(title: string, message: string, type: 'info' | 'success' | 'warning' | 'error' = 'info'): void {\n    // Check if browser supports notifications\n    if ('Notification' in window && Notification.permission === 'granted') {\n      new Notification(title, { body: message, icon: '/favicon.ico' });\n    }\n\n    // Show in-app notification\n    this.showInAppNotification(title, message, type);\n  }\n\n  // Show in-app notification\n  private showInAppNotification(title: string, message: string, type: string): void {\n    const notification = document.createElement('div');\n    notification.className = `notification notification-${type}`;\n    notification.innerHTML = `\n      <div class=\"notification-header\">\n        <h4>${title}</h4>\n        <button class=\"notification-close\" aria-label=\"Close notification\">×</button>\n      </div>\n      <p>${message}</p>\n    `;\n\n    // Add to notification container\n    const container = document.getElementById('notification-container') || this.createNotificationContainer();\n    container.appendChild(notification);\n\n    // Auto-remove after 5 seconds\n    setTimeout(() => {\n      notification.remove();\n    }, 5000);\n\n    // Close button functionality\n    const closeButton = notification.querySelector('.notification-close');\n    if (closeButton) {\n      closeButton.addEventListener('click', () => notification.remove());\n    }\n  }\n\n  // Create notification container\n  private createNotificationContainer(): HTMLElement {\n    const container = document.createElement('div');\n    container.id = 'notification-container';\n    container.className = 'notification-container';\n    document.body.appendChild(container);\n    return container;\n  }\n\n  // Save offline data\n  private saveOfflineData(): void {\n    if (typeof window === 'undefined') return;\n\n    try {\n      localStorage.setItem('offline-data', JSON.stringify(this.offlineData));\n    } catch (error) {\n      console.error('Failed to save offline data:', error);\n    }\n  }\n\n  // Sync offline data when back online\n  private async syncOfflineData(): Promise<void> {\n    if (!this.isOnline) return;\n\n    // Process pending actions\n    for (const action of this.offlineData.pendingActions) {\n      try {\n        await this.processPendingAction(action);\n      } catch (error) {\n        console.error('Failed to process pending action:', error);\n      }\n    }\n\n    // Clear pending actions\n    this.offlineData.pendingActions = [];\n    this.saveOfflineData();\n  }\n\n  // Process pending action\n  private async processPendingAction(action: OfflineData['pendingActions'][0]): Promise<void> {\n    switch (action.type) {\n      case 'booking':\n        await fetch('/api/booking', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(action.data),\n        });\n        break;\n      case 'payment':\n        await fetch('/api/payment/process', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(action.data),\n        });\n        break;\n      case 'feedback':\n        await fetch('/api/feedback', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(action.data),\n        });\n        break;\n    }\n  }\n\n  // Add pending action for offline processing\n  addPendingAction(type: OfflineData['pendingActions'][0]['type'], data: any): void {\n    this.offlineData.pendingActions.push({\n      type,\n      data,\n      timestamp: new Date(),\n    });\n    this.saveOfflineData();\n  }\n\n  // Update user preferences\n  updateUserPreferences(preferences: Partial<UserPreferences>): void {\n    this.userPreferences = { ...this.userPreferences, ...preferences };\n    this.applyAccessibilitySettings();\n    \n    // Save to localStorage\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('user-preferences', JSON.stringify(this.userPreferences));\n    }\n  }\n\n  // Get current user preferences\n  getUserPreferences(): UserPreferences {\n    return { ...this.userPreferences };\n  }\n\n  // Check if user is online\n  isUserOnline(): boolean {\n    return this.isOnline;\n  }\n\n  // Get tracking data for a booking\n  getTrackingData(bookingId: string): TrackingData | undefined {\n    return this.trackingData.get(bookingId);\n  }\n\n  // Stop tracking for a booking\n  stopTracking(bookingId: string): void {\n    this.trackingData.delete(bookingId);\n    \n    if (this.websocketConnection) {\n      this.websocketConnection.close();\n    }\n  }\n}\n\n// Export singleton instance\nexport const userExperienceService = new UserExperienceService();\n\n// Export types\nexport type { UserPreferences, TrackingData, OfflineData }; ","usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/utils/firebase-admin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/utils/firebase-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/utils/firebase-test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/utils/firebase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/utils/session-storage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/utils/test-utils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/utils/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/validation/booking-validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/validation/content-validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/lib/validation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/types/booking.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/types/cms.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/types/ics.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/types/promo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/types/settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/justinpease/workspace/fairfield-airport-cars/src/utils/testRunner.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
